FuncCat	Financial	Financial Routines
FuncCat	Math	Mathematical
FuncCat	DBase	Database Related
FuncCat	List	List
FuncCat	V4Int	V4 Internal
FuncCat	RelLog	Relational & Logical
FuncCat	Statistical	Statistical
FuncCat	DateTime	Date & Time
FuncCat	OSRel	Operating System & World Wide Web
FuncCat	String	String Routines
FuncCat	SSRel	Spread Sheet & Reporting
Mod	Abs	Calculate Absolute Value	Math
Usage	result	"number"
Params	result	"The absolute value of the argument."
Params	number	"A scaler or complex number."
Desc
IPar	"This module returns the absolute value of its argument. If the number is greater or equal to zero then the number is returned as the result. If the number is negative then (0-number) is returned. If complex, then the absolute value (modulus) is returned."
Examples
EXWD	Abs(123)	returns 123
EXWD	Abs(-345.44)	returns 345.44
EXWD	Abs(Complex:123 231)	returns 261.7054
Mod	AggDel	Delete an Aggregate Record	DBase
Usage	result	"key"
Params	result	"Returns Logical:True if the aggregate associated with key was deleted. The module fails otherwise."
Params	key	"A value representing the aggregate to be deleted."
Desc
IPar	"This module deletes an aggregate based on the " Param:key " value."
Mod	AggPut	Write Out an Aggregate Record	DBase
Usage	result	"tagkey valpoint valpoint ... "
Params	result	"An indicator specifying where the aggregate was written. Positive numbers indicate Aggregate Areas, negative indicate V4 Areas. The module fails if any problems occur."
Params	tagkey	"A tagged value indicating the type of aggregate to be written, see below."
Params	valpoint	"One or more value points to be included in the aggregate."
Tag	Agg	keypoint	"Write out an aggregate."
TagRes	Create	"Add the " Param:keypoint " to the list of known points on the dimension."
Tag	FAgg	keypoint	"Write out a fixed aggregate, all aggregates of this type must be of the same format and length."
Tag	BFAgg	keypoint	"Write out a blocked-fixed aggregate."
Tag	New	logpt	"If " Param:logpt " is TRUE (default) then the point written must be new (i.e. must not already \
exist within the aggregate). If " Param:logpt " is FALSE then the aggregate, if it already exists, will be replaced with \
the new set of data points."
Tag	Out	id	"Output to the aggregate with the specified " Param:id ". An unique identifier may be associated with an aggregate when it is open. See \
the " TagName:Id " tag within the " IntMod:V4 " module and the 'Id' option within the " Command:Area " command."
Desc
Ipar	"The " IntMod:AggPut " module is used to write out aggregates during the evaluation of a V4 intersection. \
This module is identical to the " Command:Aggregate ", " Command:FAggregate ", and " Command:BFAggregate " commands \
available within the V4 command processor."
IPar	"If the " Param:keypoint " value given as the first argument is a point on Dim:Int then the key value is taken as \
the " Param:keypoint "<sup>th</sup> value point."
Examples
Ipar	"The following example accesses a sales history relation on another system and loads columns 2 and 4 into a V4 aggregate-"
EXWD	Dim SH AggVal	Define the Sales History Dimension
EXWD	Dim O XDB	Define external database Dimension
EXWD	Eval dbConnect(Dim:O DSN::Sales-History)	Connect to the proper table
EXWD	Context Add dbGet(SQL:: Select * From SLSDtl)	Grab the rows we want
EXWD	Eval Enum(O*	Enumerate through all rows
EXWD	@AggPut(Agg::MakeP(Dim:SH)	Make new aggregate point
EXWD	 dbVal(O* Int:2) dbVal(O* Int:4) ))	Grab columns 2 & 4 for current row
Mod	AggUpd	Update an Aggregate Record	DBase
Usage	result	"key dim index value"
Params	result	"Returns Logical:True if the aggregate associated with key was updated. The module fails otherwise."
Params	key	"The key to the aggregate."
Params	dim	"The dimension associated with the value within the aggregate to be updated."
Params	index	"The index to the field in the aggregate (1 is the first field)."
Params	value	"The new value for the field."
Desc
IPar	"The " IntMod:AggUpd " module is used to update a specific field within an aggregate."
Mod	AggVal	Return an Element from an Aggregate	DBase
Usage	value	"key dimension index"
Usage	value	"key dimension" 
Usage	value	"agg dimension index tagarg"
Params	value	"The returned value, may be any type of point."
Params	key	"The key point used to retrieve the aggregate (the first point in the " Command:Aggregate " command)."
Params	dimension	"The dimension of the resulting point. A list of dimensions is also allowed. If more than one dimension is specified then the internal type of the value dictates which dimension is used (see below)."
Params	index	"The index within the aggregate for the value point."
Params	agg	"An aggregate point."
Params	tagarg	"One or more optional tagged arguments."
Tag	EQ	point	"Compares aggregate value with point value and returns Logical:True if the values are the same, Logical:False if not the same. Note that the comparison is for numerical results only. The dimensions of the aggregate value and the point need not be the same."
Tag	Error	point	"If an error occurs when accessing the aggregate (ex: it is not found) then evaluate " Param:point " and return it as the value. \
Also see the <b>Missing</b> attribute in the " Command:Column " command and the <b>#m#</b> tag within the " Command:Loop " command."
Tag	GE	point	"Same as " Tag:EQ " but a greater-equal test is performed."
Tag	GT	point	"Same as " Tag:EQ " but a greater-than test is performed."
Tag	LE	point	"Same as " Tag:EQ " but a less-equal test is performed."
Tag	LT	point	"Same as " Tag:EQ " but a less-than test is performed."
Tag	NE	point	"Same as " Tag:EQ " but a not-equal test is performed."
Tag	Nth	point	"Tests the " Tag:Nth " bit (as specified by the numeric point) of the resulting aggregate value. If the bit is set then Logical:True is returned. If the bit is not set then Logical:False is returned."
Desc
IPar	"This module is used to returns point values previously stored via the " Command:Aggregate " command. It is most often used to relate a field name with a record. If the aggregate corresponding to the key cannot be located then the module fails. If the value corresponding to the index has not been defined then the module fails."
IPar	"When the first argument is an aggregate point (not a key to an aggregate record), this module extracts the requested field directly out of the point. No access is made to an aggregate record."
IPar	"If an aggregate value can be more than one internal point type (e.g. UDate or Alpha) then multiple dimensions must be given in the second argument."
IPar	"If no index is specified then the area constant associated with the key and dimension are returned. See the " Command:CAggregate " command for setting area constants."
Examples
EXML	"Use of AggVal with V4 Macro"
ML	"[Id Cus..] AggVal( Cus* Dim:CusId 1 )"
ML	"[Name Cus..] AggVal( Cus* Dim:Alpha 2 )"
ML	"[Attr Cus..] AggVal(Cus* Dim:Int 3)"
ML	"[IsActive Cus..] AggVal(Cus* Dim:Int 3 Nth::8)"
ML	"[IsTest Cus..] AggVal(Cus* Dim:Int 3 Nth::4)"
ML	"[StartDate Cus..] AggVal(Cus* Dim:UDate Int:4)"
ML	"[IsNew Cus..] AggVal(Cus* Dim:UDate Int:4 GE::DTInfo(UDate:{now} Month::1 Day::1 UDate?))"
ML	" "
ML	"{/Cus( aId, aName, aAttr, aStart... )"
ML	"Context Add Cus:{new} ;"
ML	"Aggregate< Cus* aId aName aAttr aStart... >"
ML	"}/Cus"
IPar	"In this example, the Cus macro is defining fields in a customer record. The key to the aggregate is the current customer, the first entry in the aggregate is the customer id followed by the customer name. The bindings above the macro definition define the Id and Name of any customer as the first and seconds fields in the aggregate for that customer. The Attr field is the third aggregate value. A customer is a test customer if the 4th bit is set in this value. The starting date for a customer is the fourth value. A customer is new if the start date is greater than or equal to the first of the current year."
Mod	And	Logical And (Bitwise And)	RelLog List
Usage	logres	"value1" "value2" "..."
Usage	list	"list1" "list2" "..."
Params	logres	"The logical result of and'ing all of the arguments."
Params	valuen	"One or more values to be logically and'ed. Note that any numeric value greater than zero is considered to be Logical:True and any number less than or equal to zero is considered to be Logical:False."
Params	list	"The resulting list from logically and'ing all of the bits from each of the argument lists."
Params	listn	"A bitmapped list."
Desc
IPar	"This module returns Logical:True if each of its argument evaluates to true and Logical:False if any of its arguments evaluates to false. Normally all arguments are evaluated before the test is performed. If the evaluation of an argument is expensive then preface it with a quote (see example below) and it will only be evaluated if each of the preceding arguments evaluated to true. If the module is called with no arguments it returns Logical:True."
IPar	"In the case that the arguments are bitmapped lists, then the corresponding bits from each map are and'ed and the resulting map is returned."
Examples
EXWD	And(GE(Emp.Age Years:25) @LT(Emp.AvgSalary 35000))	"This example returns Logical:True if the age of the current employee is greater than or equal to 25 and the average salary is less than 35000. Note that the second argument (LT(...)) will not be evaluated if the first argument evaluates to false."
EXWD	{Emp.Age >= Years:25 & Emp.AvgSalary < 35000}	This is identical to the above example.
Mod	Area	Manipulating V4 Areas	V4Int
Usage	value	"filename tagarg..."
Usage	value	"list tagarg..."
Usage	value	"tagarg ..."
Params	value	"The returned value depends on the arguments."
Params	filename	"The name of the area to be opened or created."
Params	list	"A list of filenames to be opened."
Params	tagarg	"One or more of the tags decribed below."
Tag	BucketSize	num	"Sets the bucketsize to " Param:num " for the area being created. In most cases, the default is optimal and this is unecessary."
Tag	Close	aid	"Closes the area specified by the previously opened area of id " Param:aid "."
Tag	Close	list	"Closes all of the areas specified by the " Param:list " of previously opened area ids."
Tag	Error	logical	"Determines how errors are to be handled. If " Param:logical " is TRUE (default) then errors opening areas generate an error, if FALSE \
then the " IntMod:Area " module returns FALSE."
Tag	Hierarchy	num	"Sets the hierarchy number for the area being created. No two opened area may have the same number. The value, " Param:num " may be between 1 and 6. \
The default number is 5."
Tag	Id	idpnt	"Associates an identifier with the area. The " Param:idpnt " point must be either an integer or dictionary point."
Tag	Index	logical	"If TRUE (the default) then open the Aggregate area with indexing. If false then open the created area for data put access only. The area must be indexed before \
it is read."
TagRes	Index	"Create the index for the specified area that was opened with the " TagName:Index ":No option."
TagRes	ListOf	"Returns a list of all open areas. Each list entry is itself a list consisting of (<i>areaid type filename hierarchy</i>) where <i>type</i> is one of: <b>Area</b>, <b>Dictionary</b> or <b>Aggregate</b>. \
The <i>hierarchy</i> value is given for regular areas, not aggregates."
TagRes	NoError	"This is identical to " TagName:Error ":FALSE."
Tag	Open	mode	"Specifies how the area is to be opened. Use <b>Read</b> (default) for read-only access, <b>Create</b> to create a new area file, <b>CreateIf</b> to open an \
existing file or create it if it does not already exist, <b>Update</b> for update access."
Tag	Rebuild	newfilename	"Rebuild the " Param:filename " specified as the first argument into the new file " Param:newfilename "."
TagRes	Reset	"To reset the area specified by the first argument " Param:filename ". This <b>must</b> be an external dictionary file. This will remove all entries in the dictionary \
except for dimension values."
Tag	Retry	num	"Specifies the number of times to attempt to open an area if the first attempt(s) fail. The default is 3."
Tag	Sequential	logical	"If TRUE then optimize the opening of the area for sequential access. If FALSE (default) then open normally."
Tag	Type	atype	"Specifies the type of the area. The allowed values for " Param:atype " are: <b>Area</b> (default) to open as a normal V4 area, \
<b>Agg</b> to open as an aggregate, <b>Dictionary</b>, <b>Dict</b> or <b>External</b> to open as an external dictionary."
Desc
IPar	"This module duplicates all of the functionality of the " Command:Area " command."
Mod	Array	Multidimensional Array Update & Retrieval	Math V4Int List
Usage	array	"dimension" "range1" "range2" "..."
Usage	value	"array" "index1" "index2" "..." "Value::value"
Usage	value	"array" "index1" "index2" "..." "Add::value"
Usage	value	"array" "index1" "index2" "..."
Usage	value	"array" "index1" "index2" "..." "If::test" "ListOf::result"
Params	array	"A V4 Array point"
Params	dimension	"A point on the V4 Dim dimension. This defines the type of point to be stored in the array."
Params	rangen	"A range of points or integer number that declares the size and bounds of a dimension of the array."
Params	index	"A index value into the corresponding dimension of the array."
Params	value	"The value to be assigned (or added) to the element(s) of the array."
Tag	Distance	num	"Specifies the distance to search from a given starting point within an array. This is used with the " TagName:If " and\
 " TagName:ListOf " options."
Tag	If	test	"Defines a test expression " Param:test " to be used when search a subset of the array."
Tag	ListOf	result	"Determines what is to be returned on a succesful search of an array subset. The " Param:result " must be INDEXES to return \
a list of array indexes or VALUES to return a list of values. If it is INDEXES, the result is a list of lists with each inner list being the indexes \
within the array that matched the " TagName:If " condition."
Index	INDEXES	General	Str("v4refmod_a.htm#IntMod:Array")	Array	IntMod
Index	VALUES	General	Str("v4refmod_a.htm#IntMod:Array")	Array	IntMod
Tag	ListOf	num	"Returns a list of points corresponding to the values of the " Param:num "<sup>th</sup> index/dimension of the array. This option is only valid for arrays created via the " IntMod:Tally " module."
Tag	Add	value	"Adds the " Param:value "to the specified element or elements in the array."
Tag	Value	value	"Sets the specified element or elements in the array to " Param:value "."
Desc
IPar	"The " IntMod:Array " module creates arrays, updates arrays, and retrieves one or more values from arrays. An array may have up to 16 dimensions. Dimensions may be any point that \
maps to an integer value including dictionary point types. V4 arrays are provided for efficiency purposes. Solutions implemented with arrays often run considerably faster than \
those implemented solely with bindings."
IPar	"The steps involved in using a V4 array are 1) create the array point by calling the " IntMod:Array " module with the first argument being a point on \
the Dim Dimension and the following points being the bounds of the array, 2) Setting value within the array using the " Tag:Value " tagged argument, 3) Referencing values within the array."
IPar	"It is possible to set array values more than once and to use other array references. One typical use of arrays is for generating cumulating values."
Ipar	"V4 supports an alternative syntax for array declaration, updates and access. The form: '<i>name</i>[...]' is converted by the V4 compiler to 'Array([<i>name</i>] ...)' and the \
form '<i>name</i>[Dim:<i>dimension</i> ...]' is converted to 'BindQE([<i>name</i>] Array(Dim:<i>dimension</i> ...))'. This is allow array usage in V4 to follow more traditional syntactic conventions."
Examples
EXWD	BindQE([ray] Array(Dim:UDate Udate:1/1/00..12/31/00 10))	Creates an array of UDate points. The first dimension corresponds to the days from 1-Jan-2000 through 31-Dec-2000. The second dimension corresponds to the integers from 1 through 10."
EXWD	Array([ray] Value::UDate:11/2/50)	Sets all elements of the array to 2-Nov-1950
EXWD	Array([ray] UDate:5/1/01 2 Value::Udate:5/25/01)	Fails - 1-May-2001 not in valid range for first dimension
EXWD	Array([ray] UDate:4/1/00..5/31/00 Int:3..6)	Returns a sub-array corresponding to dimensions- (1-Apr-2000..31-May-2000 and 3..6) to 
EXWD	Eval Enum(Array([ray] UDate:4/30/00..5/2/00 Int:1..4) @EchoT(UDate*))	Echos 12 elements from specified sub-array
EXWD	BindQE([2darray] Array(Dim:Int 100 100))	Defines a two dimensional array of integer values
EXWD	Array([2darray] 20 30 Distance::2 If::{Int* <> 0} ListOf::Indexes)	searches the array within the rectangle bounded by (18,32) and (22,28)
Mod	Avg	Returns Average of its Arguments	Math
Usage	result	"value1" "value2" "..."
Usage	result	"list"
Params	result	"The sum of the values divided by the number of values."
Params	valuen	"A numeric value."
Params	list	"A list of numeric values."
Desc
IPar	"The " IntMod:Avg " module simple sums its arguments, divides the sum by the number of arguments and returns that as the result."
Examples
EXWD	Avg( 1 2 3 4 5 )	results in Num:3
EXWD	[NumList] (1 2 3 4 5)	define a list of numbers
EXWD	Avg([NumList])	also results in Num:3
Mod	BindQE	Bind Intersection to a Value Point	V4Int
Usage	value	"isct value tagarg ..."
UsageX	value	BindQQ	"isct value tagarg ..."
UsageX	value	BindEQ	"isct value tagarg ..."
UsageX	value	BindEE	"isct value tagarg ..."
Params	value	"The value bound to the intersection is also the returned value."
Params	isct	"An intersection (quoted) to be bound to the value."
Params	value	"The point to be bound as the value of the intersection."
Tag	Out	id	"Write the binding into the area specified by " Param:id ". This refers to an area previously opened with the " TagName:Id " tag (" IntMod:V4 ") or option ( " Command:Area ")."
Tag	Weight	num	"Create the binding a binding weight of " Param:num "."
Tag	Weight	delta	"Adjust the calculated binding weight by plus or minus " Param:delta "."
Desc
IPar	"The " IntMod:BindQE " modules performs the same function as the " Command:Bind " command in the V4 evaluator. It binds the value point to the (quoted) intersection and returns that value point as it's result. This module may be used to save the result of an expensive computation so that future requests do not have to go through all the work."
IPar	"The variations of this module have to do with the evaluation of the first and second arguments. " IntMod:BindQE " does not evaluate the first argument but does the second. " IntMod:BindQQ " does not evaluate either argument. " IntMod:BindEQ " evaluates the first but not the second, and " IntMod:BindEE " evaluates both arguments. " IntMod:BindQE " is most often used and is identical to the Bind command of the V4 interpreter."
Examples
EX	"Bind [AverageDaysToPay Cus..]"
EX	"BindQE( [AverageDaysToPay Cus*] [ExpensiveCalc Cus*] )"
IPar	"This example defines the AverageDaysToPay for any customer. The outer binding (from the V4 evaluator) invokes the Bind module which then binds the AverageDaysToPay for that particular customer to the result of the ExpensiveCalc for that customer. Future evaluations of [AverageDaysToPay] for this particular customer would simple return the previously calculated result. (An alternative way of optimizing this is with the CBind command)."
IPar	"The next example demonstrates the use of " IntMod:BindQE ". The need for the " IntMod:BindQE " is due to the fact that the nested " IntMod:MakeI " (make intersection) would normally be evaluated when it is the intersection itself that needs to be the first argument of the Bind/BindQ."
EX	"MakeI( IntMod:BindQ MakeI( MakeP( [Dim All*] Special::All ) EvalPt* ) 0)"
Mod	Bits	Perform Various Bit-Level Operations	Math
Usage	value	"num tagval ..."
Usage	value	"bitmap tagval ..."
Params	value	"The resulting 32/64 bit integer result."
Params	num	"The base number (32/64 bit integer)"
Params	tagval	"One or more tagged arguments."
Params	bitmap	"A bitmap implemented as a " PntType:Binary " V4 point type. See also the " Command:Column " Hex4 option. The only tagged argument \
type supporting a " Param:bitmap " is the " TagName:Nth " option."
Tag	And	arg	"Logically and" Param:arg " to " param:num "."
Tag	AndC	arg	"Logical and the one's complement of " Param:arg " to " param:num "."
Tag	Any	arg	"Returns TRUE if any of the bits in " Param:arg " are also set in " Param:num "."
Tag	Else	value	"Used to return an 'else' result if all prior tests resulted in FALSE or 0. If used it should be the last argument."
TagRes	ListOf?	"Returns a list of bits set in the first argument. If no bits are set (the first argument is 0) then an empty list is returned."
TagRes	Not	"Return the one's complement of " param:num "."
Tag	Nth	arg	"Return Logical:True if the argth bit of " param:num " is set. If the first argument is an integer \
then " Param:arg " must be between 1 and 64. If the first argument is a bitmap then " Param:arg " may be 1 through the number \
of bits in the map. This " Param:arg " may also contain multiple values. If so then the test succeeds if any of the \
specified bits are set."
Tag	Or	arg	"Logically or " Param:arg " to " param:num "."
Tag	Rotate	arg	"Rotate bits to the left if " Param:arg " is positive, to the right if negative. The sign bit \
is shifted into the low order bits on a left rotate, the low order bit is shifted into the sign bit on a right rotate."
Tag	Shift	arg	"Shift bits to the left if " Param:arg " is positive, to the right if negative."
Tag	XOr	arg	"Logically exclusive-or " Param:arg " to " param:num "."
Tag	All	arg	"All bits in " Param:arg " must also be set in " Param:num "."
Tag	None	arg	"None of the bits in " Param:arg " can be set."
Tag	Result	value	"This option can be used chain a series of tests and return a " Param:value " as soon as a test evaluates to TRUE or non-zero value. See examples below."
Tag	Num	value	"Same as the " Tag:Result " tag."
Desc
IPar	IntMod:Bits " is a general purpose module for performing bit-wise operations on an integer value. \
More than one tagged argument can be given with the results being chained left to right."
Examples
EXWD	Bits(16 Nth::5)	results in Int:1
EXWD	Bits(^xf0000000 Rotate::4)	results in 15
EXWD	Bits(^xf0000000 Rotate::-28)	identical to above, results in 15
EXWD	Bits(1 Shift::3)	results in 8
EXWD	Bits(3 And::2)	results in Int:2
EXWD	Bits(16 Nth::Int:1,2,3)	results in Logical:False
EXWD	Bits(16 Nth::Int:4,5,6)	results in Logical:True
EXWD	Bits(Cus.Attr Nth::3 Num::Type:A Nth::8 Num::Type:B Num::Type:C)	Tests the third bit of Cus.Attr and if set returns Type:A as the value. If not then tests eighth bit and if set returns Type:B otherwise Type:C
EXWD	Bits(1234 All::^N(1,2,3,4))	returns Int:0 (bits 1, 2, 3, and 4 are not all set in 1234)
EXWD	Bits(^xf0f listof?)	returns (1 2 3 4 9 10 11 12)
EXWD	Bits(Int* Nth::3 Result::3rd Nth::5 Result::5th Else::nobits)	Returns 3rd or 5th if corresponding bits set, otherwise nobits is returned
EXWD	Bits(Int* Nth::3 Result::3rd Nth::5 Result::5th)	Returns 3rd or 5th if corresponding bits set, otherwise 0 is returned
Mod	Context	Add/Remove Points from the Context	V4Int
Usage	point	"point point ..."
UsageX	point	ContextL	"point point..."
Params	point	"The " param:point " (or points) to be added to the current context. The last " param:point " is returned as the value."
Desc
IPar	"The " IntMod:Context " module adds the specified " param:point "(s) to the context, replacing any other " param:point " of the same dimension. The difference between " IntMod:Context " and " IntMod:ContextL " is that " IntMod:Context " adds the " param:point " to the closest permanent frame, while " IntMod:ContextL " adds the " param:point " to the local frame."
IPar	"A potential source of problems with the " IntMod:Context " module is when it is invoked in a nested module situation. For instance"
EX	"Enum( dim.."
EX	   "@ Do(..."
EX	   "Context( [NewPoint dim*] )"
EX	   ". . ."
Par	"where [NewPoint dim*] evaluates to a " param:point " on dim other than the context " param:point ". Here we are attempting to update the context with a " param:point " that is already on the context and being updated as part of the " IntMod:Enum " module. In these cases V4 will generate an error and the " IntMod:ContextL " module should be used."
IPar	"If all the points in a list are to be added to the context, use " IntMod:Context "(`" param:list ")."
Examples
EXWD	"Context( Cus:1234 )"	"Adds Customer 1234 to the current context."
Mod	Counter	Creates, Updates  and Tests Internal Counters	V4Int Math
Usage	result	"tagarg"
Usage	result	"Reset:counter value"
Params	result	"The result is based on the tagged argument."
Params	tagarg	"One of the tagged arguments below."
Tag	Count	name	"Returns the current value of counter " Param:name ". No change is made to the counter."
Tag	First	name	"Returns Logical:True if this is the first runtime reference to counter " Param:name " or Logical:False if it is not. Each time \
the counter is tested with this argument it is incremented."
Tag	Next	name	"Increments and returns the incremented value of the counter as a point on Dim:Int."
Tag	Reset	name	"If a second argument is specified then the counter's internal value is set to the integer value of the second argument."
Tag	Reset	name	"If a second argument is <b>not</b> given then Resets the counter " Param:name " to zero. A subsequent call with " TagName:First " will return \
Logical:True."
Desc
IPar	"This module allows the programmer to maintain any number of internal integer counters within V4. All counters are referenced with a name or number. \
A counter is automatically created and set to zero on its first call to this module. All counters are points on Dim:Int."
EXWD	Counter(First::xxx)	returns True on the first call
EXWD	Counter(First::xxx)	returns False after the first call
EXWD	Counter(Next::xxx)	returns Int:3 as this is the third call
EXWD	Counter(First::^p"V4(Unique?)")	returns True on the first call, False thereafter
Mod	db	General Database Update Module	Database Related	DBase OSRel
Usage	value	"dbsel tagarg arg ..."
Params	value	"The returned value depends on the arguments"
Params	dbsel	"A database selection expression (typically of the form: <i>dim</i>:(<i>selection criteria</i>))"
Params	tagarg	"Zero or more of the tagged arguments described below."
Params	arg	"Zero or more other arguments."
Desc
IPar	"This module provides a general framework for specifying database updates in a non-database specific fashion. It simply repackages its arguments \
and calls user-defined intersections to perform the actual database updates."
IPar	"The actions performed by this module are as follows: first the point IntMod:db is inserted into the context; then an empty list (Dim:List) point is created; each argument is evaluated, if the result \
is a point on Dim:Alpha or either the action or table dimensions then those points are inserted into the context otherwise the point is appended to the list. After all arguments are evaluated \
the list is inserted into the context, finally the intersection [UV4:db] is evaluated and the result of the evaluation is returned as the module result."
IPar	"The real work is performed within the [UV4:db] binding that is evaluated. This is up to the implementor and the target database(s) to be updated."
IPar	"By convention, a " IntMod:db " call that results in an insertion should return the primary key of the new row as its value."
IPar	"The V4 xlib application library implements the SQL Insert, Update and Delete operations using this module. See the examples below."
Tag	Action	actdim	"The dimension specifying the action to be be performed. Any subsequent arguments of this dimension are inserted into the context as-is."
Tag	Table	tbldim	"The dimension specifying the table to be affected. Any subsequent arguments of this dimension are inserted into the context as-is."
Examples
EXWD	db(employee:() name:"John Smith" dob:1/1/1980 department:it salary:50000)	Inserts a new row into the employee table
EXWD	db(item:(itemcode:abcd) listPrice:49.99)	Updates the item with code 'abcd' with a new list price of 49.99
EXWD	db(customer:(dateLastOrder:<1/1/2000))	Deletes all customers with no orders since 1/1/2000
Mod	Dbg	Debugging Module	V4Int
Usage	value	"tagarg ..."
Params	value	"The returned value depends on the arguments."
Params	tagarg	"One or more of the tags decribed below."
Tag	Break	option	"Sets a breakpoint with one of the following options: \
AutoStep, Break, Context, Continue, Evaluations, Fail, Location, Once, Point, Results, Silent, Skip, Stack, Time"
Tag	Break	list	"Sets a breakpoint with all of the options (described above) contained in " Param:list "."
TagRes	Break	"Generates an immediate V4 breakpoint."
Tag	Delete	bpnum	"Delete the specified break point number."
Tag	Do	point	"Evaluate the " Param:point " at the breakpoint."
Tag	Fail	point	"Evaluate the " Param:point " and iff the evaluation fails then re-evaluate the " Param:point " with the specified " TagName:Trace " options."
Tag	If	point	"Evaluate the " Param:point " at the breakpoint and only break if the result is Logical:True."
Tag	Line	num	"Set the breakpoint at line " Param:num " of the specified " Tagname:Source " file."
Tag	Log	num	"This is the same as the '" Command:"Set Trace Log" "<i>num</i>' command."
Tag	Module	modname	"Break at this V4 module."
Tag	Progress	num	"This is the same as the '" Command:"Set Trace Progress" " <i>num</i>' command."
Tag	Return	point	"Return " Param:point " as the value for the the point at the specified break."
Tag	Source	num	"This is the same as '" Command:"Debug" " Source " param:num "'."
Tag	Source	name	"This is the same as '" Command:"Debug" " Source " Param:name "'."
Tag	Trace	option	"Set the trace option for this scope of this breakpoint command. The allowed " Param:option " values are: \
AddContext, All, Arith, AutoContext, Bind, BindEval, Binding, Compares, Dimension, Dimensions, Errors, EvalPt, EvalToContext, Frame, \
IsctFail, Lists, Log, Macro, NBLBindings, None, ODBC, Off, Optimize, Point, Progress, Recursion, Tally, TallyBind, TimeStamp, V4IS, XDB."
Tag	Trace	list	"Sets the V4 trace flag to all of the options within the " Param:list ". When used in conjuction with the " TagName:Do " or " TagName:Fail " \
tags it set the V4 trace flag <b>only</b> for the duration of the " IntMod:Dbg " call."
Tag	Trace	tag::list	"This option permits finer control over the V4 trace flag. If " Param:tag " is <b>Test</b> then it tests the trace options in " Param:list " \
and returns Logical:True if they are all set, Logical:False otherwise. If <b>Plus</b> then adds the specified options to the existing V4 trace value. If <b>Minus</b> then removes \
the specified options. If <b>Set</b> then it sets the V4 trace to the specified options (same as " TagName:Trace "::" Param:list ")."
Tag	Value	point	"Return " Param:point " as the value for the the point at the specified break. (Same as the " TagName:Return " option.)"
Tag	Web	list	"Sets up process for debugging via web client. " Param:list " is a 4-element list: (<i>messageId url port sesKey</i>) where <i>messageId</> is an id returned \
by the " IntMod:Message "() module that is listening for messages, <i>url</i> and <i>port</i> are the to a v4WebSocket instance and <i>sesKey</i> is the process' session key."
Desc
IPar	"This module duplicates all of the functionality of the " Command:Debug " command."
Mod	Def	Test Successful Evaluation of Intersection	V4Int
Index	DefQ	Module	Str("v4refmod_d.htm#IntMod:Def")
Index	NDefQ	Module	Str("v4refmod_d.htm#IntMod:Def")
Usage	value	"point [[defvalue] undefval]"
Usage	value	point tagargs
UsageX	value	DefQ	"arguments same as Def"
UsageX	value	NDefQ	"arguments same as Def"
Params	value	"The point returned as the result."
Params	point	"A point to be tested. This is either an intersection or dim* point."
Params	defvalue	"The point to be returned if " param:isct " is defined."
Params	undefvalue	"The point to be returned if " param:isct " is not defined."
Tag	Then	value	"The " param:value " to be returned if the first argument is defined."
Tag	Else	value	"The " param:value " to be returned if the first argument is not defined."
Tag	ElseIf	logical	"If the first argument is not defined then " Param:logical " is evaluated. If the result is Logical:True \
then the following " TagName:Then " argument is evaluated. If it is Logical:False then the following " TagName:Else " argument \
is evaluated. Multiple " TagName:ElseIf " tags may be chained."
Desc
IPar	"The " IntMod:Def " module tests its first argument to see if it can be successfully evaluated. If it can then \
the second argument is returned otherwise the third argument is returned. If only two arguments are given then the value \
of " param:point " is returned if it evaluates, otherwise the second argument is returned. If only one argument is given \
then " IntMod:Def " attempts to evaluate it and returns Logical:True if the evaluation succeeded, Logical:False otherwise."
IPar	"The " TagName:Then ", " TagName:ElseIf ", and " TagName:Else " tags may be used to explicitly define results or \
chain multiple conditionals. If tags are present but the tag to be taken as the result is missing then UV4:none is returned."
IPar	"If the argument to " IntMod:Def " is a reference to a point in the context (dim*) then " IntMod:Def " will \
return Logical:True if the dimension has a point in the current context and Logical:False otherwise."
IPar	IntMod:DefQ " differs from " IntMod:Def " in that the first argument is not evaluated as part of the normal module argument evaluation process."
IPar	IntMod:NDefQ " is the logical compliment of " IntMod:DefQ " (i.e. " IntMod:NDefQ "() = " IntMod:Not "(" IntMod:DefQ "()))"
Index	UV4:none	general	Str("v4refmod_d.htm#IntMod:Def")	Def	IntMod
Examples
EXWD	DefQ(UMonth*)	returns Logical:True if UMonth in context otherwise Logical:False
EXWD	DefQ(UMonth* Then::Logical:True Else::Logical:False)	This is identical to the prior example
EXWD	DefQ(UMonth* Then::UMonth*)	returns UMonth* if defined, fails if not
EXWD	DefQ(UMonth* UMonth:{now})	returns UMonth* if defined, current month if not
EXWD	UMonth*,UMonth:{now}	same as above
EXWD	UMonth*,UMonth:{now}*	returns UMonth* if defined, if not then return current and put into context
EXWD	DefQ(Cus.Name "unknown)	same as Cus.Name,"unknown"
EXWD	Def(MakeI(....) Then::1 Else::2)	evaluates the MakeI and then evaluates the result returning 1 if defined, 2 if not.
EXWD	DefQ(UDate* Then::{UDate* + 10})	returns UV4:none if Dim:UDate not in context
Mod	Dim	Create, Alter, or Retrieve Dimension Attributes	V4Int
Usage	result	"dim tagarg ..."
Usage	dim	"name tagarg ..."
Usage	dim	"point"
Params	result	"The result depends on the arguments to the module."
Params	tagarg	"One or more tagged arguments."
Params	dim	"The newly created dimension."
Params	name	"The name of the dimension to be created."
Params	point	"If a single argument is given then the dimension of that argument is returned. If the single argument is a reference to a shell point in context \
then the dimension of the shell point's context value is returned."
Desc
Tag	Acceptor	logical	"Sets the attribute to TRUE or FALSE."
TagRes	Acceptor	"Returns the current value of the attribute."
Tag	ADPoint	point	"Sets the optional additional Acceptor/Displayer point."
TagRes	ADPoint	"Returns the ADPoint for the dimension or fails if none is set."
Tag	All	num	"Set the All-value to " Param:num "."
TagRes	All	"Returns the All value or fails if none is set."
Tag	AsIs	logical	"Sets or resets the <b>Asis</b> attribute of a dimension. See the " Command:Dimension " for more discussion and examples."
TagRes	AsIs	"Returns the current setting of the As-Is attributes."
Tag	Attributes	string	"Sets the Attributes option to " Param:string "."
TagRes	Attributes	"Returns the Attributes string or fails if none is set."
Tag	BaseDate	point	"Sets the base date attribute for a " PntType:UWeek " dimension. " Param:point " must be a point on a " PntType:UDate " dimension."
TagRes	BaseDate	"Returns the BaseDate value (as a point on Dim:UDate) for the " PntType:UWeek " dimension, fails for other dimension types."
Tag	BindEval	logical	"Sets the attribute to TRUE or FALSE."
TagRes	BindEval	"Returns the current BindEval setting (TRUE or FALSE)."
Tag	Binding	num	"Sets the Binding number."
TagRes	Binding	"Returns the current Binding number."
Tag	Calendar	name	"Sets the Calendar type."
TagRes	Calendar	"Returns the calendar type as a point on Dim:UV4 or fails if dimension is not a calendar."
Tag	Create	logical	"Sets the auto-create option on the dimension. The default for " PntType:Dictionary " points is TRUE."
TagRes	Create	"Returns the current value (TRUE or FALSE)."
Tag	Decimals	num	"Set the number of decimal places for a numeric dimension."
TagRes	Decimals	num	"Returns the number of decimal places (0 for none or not-applicable)."
Tag	Description	string	"Sets the dimension description."
TagRes	Description	"Returns the dimension description."
Tag	Displayer	logical	"Sets the Displayer option for the dimension."
TagRes	Displayer	"Returns the Displayer value (TRUE or FALSE)."
Tag	DisplayerTRACE	logical	"Sets the DisplayerTRACE option for the dimension."
TagRes	DisplayerTRACE	"Returns the DisplayerTRACE value (TRUE or FALSE)."
Tag	DotDotToList	logical	"Sets the option."
TagRes	DotDotToList	"Returns the current value (TRUE or FALSE)."
Tag	DotIndex	logical	"Sets the option."
TagRes	DotIndex	"Returns the current value (TRUE or FALSE)."
Tag	DotList	logical	"Sets the option."
TagRes	DotList	"Returns the current value (TRUE or FALSE)."
Tag	Duplicate	logical	"Sets the option (default is TRUE)."
TagRes	Duplicate	"Returns the current value (TRUE or FALSE)."
Tag	Entries	dim	"Defines the list entry dimension."
TagRes	Entries	"Returns the dimension of list entries or fails if not set."
Tag	FileName	logical	"Sets whether or not an " PntType:Alpha " dimension is to be parsed as file names."
TagRes	FileName	"Returns the current setting (TRUE or FALSE)."
Tag	Format	string	"Sets the formatting string for the dimension."
TagRes	Format	"Returns the formatting string or fails if none set."
Tag	Hidden	logical	"Sets the 'hidden' flag for the dimension. If set to TRUE then the dimension will appear to be undefined (i.e. any reference will result in a 'Point not defined...' error. \
Furthermore, any future output of the dimension will be displayed with 'UV4:hidden'."
TagRes	Hidden	"Returns the state of the " TagName:Hidden " flag for the dimension."
Tag	History	logical	"Sets the 'history' flag for the dimension. If TRUE then only historical dates will be allowed, if FALSE then any time period is allowed."
TagRes	History	"Returns the setting of the " TagName:History " attribute."
Tag	IC	logical	"Sets the option (default is TRUE)."
TagRes	IC	"Returns the current value (TRUE or FALSE)."
Tag	IsA	dim	"Sets the (parent) Is-A dimension for the dimension."
TagRes	IsA	"Returns the parent dimension or fails if none set."
Tag	JSON	logical	"Sets/resets the JSON attribute on an " PntType:Alpha "/" PntType:Bigtext " dimension. If set then the " Command:Context " ADV command will immediately parse the JSON string."
TagRes	Listof?	"Returns the dimension attributes of the prior argument."
Tag	MMDDYY	logical	"Sets the option."
TagRes	MMDDYY	"Returns the option (TRUE or FALSE) or fails if not applicable."
Tag	MMYY	logical	"Sets the option."
TagRes	MMYY	"Returns the option (TRUE or FALSE) or fails if not applicable."
Tag	Multiple	logical	"Sets the option."
TagRes	Multiple	"Returns the current value (TRUE or FALSE)."
Tag	None	num	"Sets the None value for the dimension to " Param:num "."
TagRes	None	"Returns the value or fails if not applicable."
Tag	NoPrefix	logical	"Sets the NoPrefix option (controls display of prefix dimension name when points are output)."
TagRes	NoPrefix	"Returns the NoPrefix setting (TRUE or FALSE)."
Tag	Normalize	logical	"Sets the option."
TagRes	Normalize	"Returns the current value (TRUE or FALSE)."
Tag	Overload	num	"Sets the option."
TagRes	Overload	"Returns the current value."
Tag	Periods	num	"Set the number of periods per year for a " PntType:UPeriod " dimension to " Param:num "."
TagRes	Periods	"Returns the number of periods per year for a " PntType:UPeriod " dimension."
Tag	Point	mode	"Sets the point creation mode to either NEW or POINT."
TagRes	Point	"Returns the mode as a point on Dim:UV4."
Tag	Range	logical	"Sets the option."
TagRes	Range	"Returns the current value (TRUE or FALSE)."
Tag	References	type	"Returns a list of all dimension references of " Param:type " which must be one of: Defined, Dim, Lexical, Point, Used, \
or Value. <b>Defined</b> returns the reference in which a dimension is defined. <b>Dim</b> returns references where a dimension is referenced as Dim:<i>dimension</i>. \
<b>Lexical</b> returns references where a dimension is referenced in a lexical command (ex: If not Dimension <i>dimension</i> Then ...). <b>Point</b> returns references \
of the form \"Point <i>dimension</i> values...\". <b>Used</b> returns all references that are not of type Defined (i.e. Dim, Lexical, Point, Used)."
TagRes	References	"Returns a list of all references to this dimension. This requires that the " Command:"Set Trace Dimensions" " command be enabled. \
The returned value is a list of numbers that refer to more information. See the " TagName:SourceFile " option within the " IntMod:V4 " module for more \
information."
Tag	RDB	mode	"Sets the handling of relational database numerics to NORMAL or RAW."
TagRes	RDB	"Returns the RDB mode as a point on Dim:UV4."
Tag	Structure	logical	"Sets the option (default is TRUE)."
TagRes	Structure	"Returns the current value (TRUE or FALSE)."
Tag	TimeZone	zone	"Sets the timezone for a " PntType:Calendar " dimension. The value must be an integer from -12 to +12. \
If not specified then the zone is assumed to be 'local'."
TagRes	TimeZone	"Returns the timezone or fails if not applicable or not set (i.e. local)."
Tag	Type	pnttype	"The point type of the dimension. This is mandatory when creating a new dimension."
TagRes	Type	"Returns the point type of the dimension as a point on Dim:UV4."
Tag	UOMId	num	"Sets the unit-of-measure id for the dimension."
TagRes	UOMId	"Returns the UOM id or fails if not applicable."
Tag	Value	type	"Enables the use of '<i>dim</i>:[...]' and '<i>dim</i>:(...)' notation. If " Param:type " is <b>List</b> then a list of the enclosed points is passed to the handler. \
If " Param:type " is <b>Tree</b> then the enclosed points are parsed as a boolean expression and a V4 tree of the parsed result is passed to the handler. See the " Command:Dim " command for \
more information on this option."
TagRes	Value	"Returns UV4:none, UV4:List or UV4:Tree depending on the state of the " TagName:Value " flag for the dimension."
Tag	XML	logical	"This option enables the passing of HTML/XML strings from the web via the dimension. If TRUE then XML strings may be passed. If \
FALSE then the leading '&lt;' of any tags are replaced with '&amp;lt;'."
TagRes	XML	"Returns TRUE or FALSE depending on the current setting of the option."
Tag	YMDOrder	ymd	"Sets the year-month-day order to " Param:ymd "."
Tag	YMDOrder	list	"Sets the year-month-day order to the list specified."
TagRes	YMDOrder	"Returns the year-month-day order (or list) for the dimension or fails if not-applicable or not set."
IPar	"This module may be used to create dimensions, alter the runtime attributes of a dimension, or return any of the \
attributes set for a dimension."
IPar	"If the first argument is a dimension then the module either sets an attribute or returns an attribute depending on \
the tagged arguments. Otherwise, the first argument is taken as the name of a new dimension to be created and subsequent arguments \
define the attributes. In this case the " TagName:Type " argument is mandatory and determines the point type of the dimension."
IPar	"For the most part, the arguments match the options of the " Command:Dimension " command."
Mod	Div	Divide Two Numbers	Math
Usage	resnum	"npt1 npt2 tagarg"
UsageX	resnum	DDiv	"npt1 npt2 tagarg"
Params	resnum	"The resulting numerical point. Note that the dimension of the result is always the dimension of the second argument to the module for " IntMod:Div ". The result is a point on the Num dimension for " IntMod:DDiv "."
Params	npt1	"A numerical point."
Params	npt2	"A numerical point."
Params	tagarg	"One or more optional tagged arguments described below"
Tag	Error	num	"Return num if the division results in an error (e.g. divide by zero)."
Tag	Round	num	"Rounds the result to num number of decimal places if positive or to num significant digits if negative."
Desc
IPar	IntMod:Div " divides the first argument by the second. If both arguments are a 32-bit integer value then an \
integer divide occurs and the result is the dimension of the second argument. Otherwise a floating point division is performed \
and the result is a point on the Num dimension. " IntMod:DDiv " always performs a floating point division and results in a \
number on the Num dimension."
Examples
EXWD	Div(5 2)	Int:2
EXWD	Div(5 2.0)	Num:2.5
EXWD	DDiv(1000000 3)	Num:333333.333333333
EXWD	DDiv(1000000 3 Round::2)	Num:333333.33
EXWD	DDiv(1000000 3 Round::-3)	Num:333000
Mod	Do	Evaluate Points (in List)	V4Int
Usage	lastpt	"tag isct isct ..."
Usage	lastpt	"list"
Params	lastpt	"The value of the last evaluated intersection."
Params	tag	"Optional tagged arguments."
Params	isct	"" IntMod:Do " evaluates each argument and returns, as its value, the last point evaluated."
Params	list	"A list of points to be evaluated. Again, the last point evaluated is returned as its result."
Tag	Context	point	"For each enumeration point, V4 evaluates and inserts the " Param:point " into the current context. \
If the point is UV4:none then nothing is done (i.e. UV4:none is not placed into the context). This point can be inserted into the context by quoting it: Context::@UV4:none."
Tag	ContextP	point	"This is identical to the " TagName:Context " tag except that if " Param:point " evaluates to a list then each point in the list is inserted into the context."
Tag	Continue	idname	"Continue with the next point in the " IntMod:Enum " with " TagName:Id ":" Param:idname "."
TagRes	Continue	"Continue with the next point in the immediate parent " IntMod:Enum " module."
Tag	End	point	"Evaluates the point, if the result is false, processing of the " IntMod:Do " arguments continues. If it is true then processing immediately stops."
Tag	Hold	point	"Enters the point into the current context and prevents any nested calls from changing the point for that dimension."
Tag	Id	name	"Associates " Param:name " with the current evaluation of the " IntMod:Do " module. This name may \
be later referenced with the " TagName:Continue " and " TagName:End " tag values to alter the normal flow of the " IntMod:Do " \
processing. See below for more details."
Tag	Out	fileid	"Specifies that all subsequent data-stream output is to be directed to the output identified by " param:fileid ".\
This redirection is effective from the time the " TagName:Out " tag is evaluated until either another " TagName:Out " tag \
overrides it or until the V4 runtime exits from the scope of the current " IntMod:Do " module."
Tag	XML	point	"The value of point is used as the begin/end " tag:XML " tag for this " IntMod:Do ". If " Param:point " evaluates \
to a 0 length string then no begin/end tags are output. If the value is UV4:none then the option is ignored."
Tag	Optimize	logical	"Enables (if " Param:logical " is TRUE) or disables (if FALSE) optimization of evaluations within the scope of the " IntMod:Do " module."
TagRes	Optimize	"Toggles optimizations for subsequent evaluations within the module."
Tag	Value	point	"Normally the " IntMod:Do " module returns its last argument as its value. The " Tag:Value " tag can be used to override this."
Tag	While	point	"If this tag is specified then " Param:point " is evaluated before subsequent point. If it \
evaluates to Logical:True then processing continues, if Logical:False then the " IntMod:Do " processing terminates and \
returns the last processed point. If no points have been processed then the module fails."
Desc
IPar	"" IntMod:Do " evaluates all of it argument points or lists. " IntMod:Do " returns the last point evaluated. The " Tag:Context " and " Tag:Hold " shell dimension points may be used to alter the context for the duration of the " IntMod:Do ". " Tag:Context "::" Param:cpoint " sets a context point which may be overridden in a nested evaluation. " Tag:Hold "::" Param:hpoint " differs in that once the point has been added to the context, no other point in that dimension may be added to the context. Any attempts in nested evaluations will be ignored- no error is generated. Note that the tagged arguments are processed left to right with the other arguments. If an intersection is to the left of a tagged argument, it will be evaluated before the context is set."
Index	Continue	Tag	Str("v4refmod_d.htm#IntMod:Do")	Do	IntMod
Index	End	Tag	Str("v4refmod_d.htm#IntMod:Do")	Do	IntMod
IPar	"If any of the points evaluated by the module result either the " TagResName:Continue " or " TagName:Continue "::" Param:name " \
then the processing of the module is immediately terminated. If " TagResName:Continue " is detected then the module returns \
the last argument index processed. If " TagName:Continue "::" Param:name " is detected <b>and</b> " Param:name " is identical \
to the " TagName:Id " name then the module returns the argument index. If the names do <b>not</b> match then the " TagName:Continue "::" Param:name " \
point is returned unchanged. (Note how the " IntMod:Enum " module handles these points.)"
IPar	"If any of the points evaluated by the module result either the " TagResName:End " or " TagName:End "::" Param:name " \
then the processing of the module is immediately terminated. If " TagResName:End " is detected then the module returns \
the " TagResName:End " point as its value. If " TagName:End "::" Param:name " is detected <b>and</b> " Param:name " is identical \
to the " TagName:Id " name then the module returns the " TagResName:End " point. If the names do <b>not</b> match then the " TagName:End "::" Param:name " \
point is returned unchanged. (Note how the " IntMod:Enum " module handles these points.)"
IPar	"The " TagResName:Optimize " tag triggers a particular optimization that can be very effective in reducing the CPU time required to perform a complex V4 analysis. \
The optimization consists of partially evaluating intersections of the form " Param:dim.point " ([" Param:dim "* " Param:point "]) and \
if the partial evaluation results in a module call replacing the original intersection with the module call. For example if the \
first level evaluation of 'Customer.Name' results in 'AggVal(Customer* Dim:Name Int:3)' then replace 'Customer.Name' with \
'AggVal(Customer* Dim:Name Int:3)'. The CPU reduction can be dramatic. <b>Note</b> that there are tradeoffs. One is trading \
speed for the loss of the contextual evaluation. In many cases it is well worth it. Also the assumed trapping of a failed intersection may not occur. Just be aware!"
IPar	"Optimizations can be toggled on or off. For example enabling optimizations for a " IntMod:Tally " or " IntMod:Enum " \
and then toggling off for output of results can get you the best of both worlds - fast scanning of large databases and contextual evaluations for output."
Examples
EX	"Bind [SalesByState]"
EX	"Enum([StateList] @EchoT([MonthsInYear Year:94] )"
EX	". . ."
EX	"Do(Hold::Year:95 [SalesByState])"
IPar	"The binding value for [SalesByState] generates a matrix where the columns are the months of the year for 1994. However, the " IntMod:Do " puts a hold on Year:95 and then evaluates [SalesByState] forcing all references to Year to be 1995. The result is a matrix with columns for the months of 1995, not 1994!"
EXML	"When Optimize? May not be Appropriate"
ML	[Student.. Id UV4:IsctFail] Str("?Student-" Student* "?")
ML	[AnOptimizedBinding]
ML	&nbsp;Do(Optimize?
ML	&nbsp;&nbsp;&nbsp;&nbsp;... Student.Id ...
IPar	"The example above demonstrates a possible problem with the Optimize? tag. The evaluation of the UV4:IsctFail \
binding may not occur on the failure of Student.Id if Student.Id has been replaced with a lower level result."
Mod	Drawer	"Add, Remove, Retrieve Points from a Drawer"	DBase V4Int
Usage	value	"drawerpt tagarg..."
Usage	value	"tagarg..."
Params	value	"The returned value depends on the arguments."
Params	drawerpt	"A drawer point previously created with a call to this module."
Params	tagarg	"One or more of the tagged arguments or tagged results below."
Tag	Add	point	"Adds the " Param:point " to the specified " Param:drawerpt ". If the point already resides within \
the drawer then no action is occurs. In either case, the " Param:point " is returned as the value of the module."
Tag	Create	dim	"Creates a new drawer point and returns it as a point on dimension " Param:dim "."
TagRes	Create	"Create a new new drawer point and return it as the value of the module. The result is a point on the Dim:UV4 \
dimension."
TagRes	Delete	"Removes the drawer from the current runtime environment."
Tag	Delete	point	"Removes " Param:point " from the previously specified drawer. If " Param:point " is not found in \
the drawer then the module fails. You may use the three-colon tag option to override this error."
Tag	Dim	dimension	"Returns all points within the drawer belonging to the " Param:dimension ". If multiple points are found then \
they are returned as a list. If a single point is found then just that point is returned."
Tag	Empty	All	"Removes all points from the drawer specified by " Param:drawerpt "."
Tag	Empty	logical	"Returns TRUE or FALSE depending on whether or not the drawer is empty or not. See the examples below."
TagRes	Empty	"Returns TRUE if the drawer is empty, FALSE otherwise."
Tag	Filter	isct	"Evaluates the " Param:isct " for each point in the drawer. If the result is Logical:TRUE then the point is removed from the drawer and appended to a list. \
The list of all filtered points is then returned. If no points are filtered then an empty list is returned. An error is generated if the drawer is empty."
Tag	Has	point	"Returns TRUE if the drawer contains (has) the specified " Param:point "."
Tag	Head	point	"Adds " Param:point " to the head of the drawer. This option always adds the " Param:point " even if \
it already exists within the drawer."
TagRes	Head	"Returns the point currently at the head of the drawer."
Tag	ListOf	drawerpt	"Returns all points in " Param:drawerpt " as a list on Dim:List."
TagRes	ListOf?	"Returns all points in the previously specified drawer as a list."
Tag	Number	drawerpt	"Returns the number of points in " Param:drawerpt "."
TagRes	Number	"Returns the number of points currently in the drawer previously specified."
Tag	Pop	position	"Removes a point from the previously specified drawer and returns it as the value of the \
module. The " Param:position " value may be <b>FIFO</b> to remove the head of the drawer or <b>LIFO</b> to remove the tail \
of the drawer."
TagRes	Pop	"Removes the tail of the drawer and returns it as the value (same as " TagName:Pop ":LIFO)."
Tag	Push	point	"Adds " Param:point " to the tail or end of the drawer. The " Param:point " is always added, even \
if it is already within the drawer."
Tag	Tail	point	"Adds " Param:point " to the tail or end of the drawer. The " Param:point " is always added, even \
if it is already within the drawer."
TagRes	Tail	"Returns the point at the tail or end of the drawer."
Desc
IPar	"This module is used to create and manipulate <i>drawers</i> - containers that hold points. Any number of drawers may \
be created and each drawer can hold a large (but not infinite) number of points. Drawers are points and a drawer may contain \
other drawers."
IPar	"Currently drawers are implemented as runtime objects (i.e. they are not permanent nor can they be stored in areas.) \
This limitation may be changed in a future release of V4."
IPar	"Points within a drawer are sequenced in the order of addition to that drawer. The " TagName:Head " and " TagName:Tail " \
arguments may be used to force points to either the head (start) or tail (end) of a drawer. The " TagName:Pop " argument \
may be used to treat a drawer as a simple FIFO or LIFO stack."
IPar	"The " TagName:Add " , " TagName:Empty ", " TagName:Head ", " TagResName:Pop ",  " TagName:Remove " and " TagName:Tail " tags can all be chained."
IPar	"The " IntMod:In " module may be used to determine if a point is within a drawer."
Examples
EXWD	EBind [D1] Drawer(Create?)	Bind [D1] to a new drawer (do not use the Bind command or a new drawer will be created with each evaluation of [D1]
EXWD	Drawer([D1] Add::123)	Add point 123 to drawer [D1]
EXWD	Drawer([D1] Add::hohoho)	Adds hohoho to the drawer
EXWD	Drawer([D1] Add::123)	Does nothing - 123 already within the drawer
EXWD	Drawer([D1] Tail::123)	Adds 123 to the end of the drawer
EXWD	Drawer([D1] ListOf?)	returns (123 hohoho 123)
EXWD	{hohoho == [D1]}	returns Logical:True (hohoho is in the drawer)
EXWD	Drawer([D1] Empty::All)	removes all points from the drawer
EXWD	Drawer([xyz] Empty::TRUE)	returns TRUE if the drawer is empty
EXWD	Drawer([xyz] Empty::FALSE)	returns TRUE if the drawer is not empty
EXWD	Drawer([xyz] Empty::All Add::point1 Add::point2)	empties the drawer and adds the two points
Mod	DTInfo	"Get Information on a Date and/or Time"	DateTime
Usage	value	"timept [adj adj ...] [ tagres tagval ...]"
Params	value	"The resulting date/time point."
Params	timept	"A date, month, or time point."
Params	adj	"One or more adjustments to the date (see below)."
Params	tagres	"One of the tagged result points below."
Params	tagval	"Optional tagged value."
Tag	Age	base	"Calculates the age, in years, between the first argument date and the " Param:base " date. The result is the integer age in years."
Tag	By	amount	"Used with " TagName:Number " or " Tagname:To " to set the increment of elements in the list to " Param:amount "."
Tag	Calc	exp	"Perform a relative date calculation on the date. See <a href='v4refconcepts.htm#relDateCalcs'>here</a> for details."
Tag	Number	num	"Return a list of size " Param:num " of date-times starting with the first argument. See also the " TagName:By " tag."
Tag	To	dt	"Generates a list of date-times from the first argument date-time  to " Param:dt "."
Tag	Day	n	"Adjust the date to the specified day of the month. This may be an absolute or delta number. For example Day::3 will adjust " Param:timept " to the third day of the month it references. Day::+3 will add three days to the " Param:timept ". If the argument is greater than 31 then the last day of the month will be used."
Tag	DayOfWeek	day	"Adjusts the date to the nearest date (before or after) such that the day of the week is " Param:day "."
Tag	DayOfWeek	+/-day	"Adjusts the date to the nearest date (after if '+', before if '-') such that the day of the week is " Param:day "."
Tag	DayOfYear	day	"Adjusts the date to the " Param:day "<sup>th</sup> day of the year where 1 is the first day \
and 365/366 is the last. If " Param:day " exceeds the number of days in the year then the date rolls over into the next year. \
Values less than one roll back through prior years."
Tag	Hour	hh	"Adjust the first argument to the specified hour (" Param:hh "). This may only be done with date-time and calendar points."
Tag	Hour	+/-hh	"Adjust the first argument up or down by the specified number of hours."
Tag	LunarAltitude	geo	"Returns the lunar altitude at the location specified by " Param:geo " (a point on a Geocoordinate dimension) at the \
date(time) of the first argument. The result varies between -180 and +180 degrees. Moon rise and moon set correspond to zero degrees. If the first argument is a " PntType:UDate " \
or " PntType:DateTime " point then it is with respect to GMT, <b>not</b> local time."
Tag	LunarPhase	degree	"Returns the date and/or time when the phase of the moon matches " Param:degree ". If " Param:degree " is positive then the \
date-time is after then date-time of the first argument. If it is negative then it is the nearest date-time before the first argument. The phases of \
the moon vary from 0&deg; (new moon), to 90&deg; (first-quarter), to 180&deg; (full) to 270&deg; (last quarter). The result \
takes on the dimension of the first argument. Note that if the result is a " PntType:UDate " or " PntType:DateTime " point then the result is with \
respect to GMT, <b>not</b> local time."
Tag	Minute	mm	"Adjust the first argument to the specified minutes (" Param:mm "). This may only be done with date-time and calendar points."
Tag	Minute	+/-mm	"Adjust the first argument up or down by the specified number of minutes."
Tag	Month	n	"Similar to Day except that it adjusts the month."
Tag	Year	n	"Similar to Day and Month except that it adjusts the year."
Tag	BaseDate	udate	"A base or starting date to be used with UWeek?. If not specified then the first day of the year is used."
Tag	BaseMonth	umonth	"A base month to be used with UPeriod? and UQuarter?. If not specified then the first month of the year is the base."
Tag	POSIX	n	"Converts <a href='http://en.wikipedia.org/wiki/Unix_time' target='_blank'>POSIX system date-time value</a> to V4 date-time format. This must be the first argument to the module."
Tag	Round	n	"Adjusts the " Param:timept " to the nearest n minutes. " Param:timept " must be a date-time or time point. The argument need not be less than 60. For \
example 180 rounds to the nearest 3-hour period."
Index	rounding	general	Str("v4refmod_d.htm#IntMod:DTInfo")	DTInfo	IntMod
Tag	Second	ss	"Adjust the first argument to the specified seconds (" Param:ss "). This may only be done with date-time and calendar points."
Tag	Second	+/-ss	"Adjust the first argument up or down by the specified number of seconds."
Tag	SolarLongitude	degree	"Returns the date and/or time when the solar longitude matches " Param:degree ". If " Param:degree " is positive then the \
date-time is after then date-time of the first argument. If it is negative then it is the nearest date-time before the first argument. The longitude of \
the sun varies from 0&deg; (spring equinox), to 90&deg; (begin of summer), to 180&deg; (fall equinox) to 270&deg; (begin of winter). The result \
takes on the dimension of the first argument. Note that if the result is a " PntType:UDate " or " PntType:DateTime " point then the result is with \
respect to GMT, <b>not</b> local time."
Tagres	Day	"Return the day of the month (1-31)"
Tagres	DaylightSavings	"Returns Logical:True if the " Param:timept " refers to a date within the current U.S. definition of daylight savings time. \
Note that this only refers to a time period, not a location."
Tagres	DayOfWeek	"Return the day of the week. Monday is 1, Sunday is 7."
Tagres	Easter	"Returns the date (on Dim: " PntType:UDate ") for the year specified or implied."
Tagres	Hour	"Return the hour as a number from 0 to 23."
TagRes	LunarPhase	"Returns the lunar phase (from 0 to 360 degrees) corresponding to the first argument. If the first argument is a " PntType:UDate " \
or " PntType:DateTime " point then it is with respect to GMT, <b>not</b> local time."
TagRes	SolarLongitude	"Returns the solar longitude (from 0 to 360 degrees) corresponding to the first argument. If the first argument is a " PntType:UDate " \
or " PntType:DateTime " point then it is with respect to GMT, <b>not</b> local time."
Tag	UTime	time	"Returns the time difference as a " PntType:UTime " point (i.e. seconds) between the first argument \
and " Param:time ". The first argument and " Param:time " must be of the same point type. This option is available for points \
of type " PntType:UDate ", " PntType:DateTime ", " PntType:UTime ", and " PntType:Calendar ". Note that the returned difference \
is always a positive value."
Tagres	Minute	"Return the minute as a number from 0 to 59."
Tagres	Month	"Return the month as a number from 1 to 12."
Tagres	Passover	"Returns the date of Passover (on Dim: " PntType:UDate ") for the year specified or implied."
Tagres	Second	"Return the second as a number from 0 to 59."
Tagres	UDate	"Return the universal date."
Tagres	UMonth	"Return the universal month."
Tagres	UPeriod	"Return the universal period."
Tagres	UQuarter	"Return the universal quarter."
Tagres	UTime	"Return the universal time"
Tagres	UWeek	"Return the universal week."
Tagres	Week	"Returns the week number (1 through 52)."
Tagres	Period	"Returns the period number (1 through 13)."
Tagres	Month	"Returns the month number (1 through 12)."
Tagres	DayOfYear	"Returns the day of the year (1 through 365)."
Tagres	UYear	"Return the year as a four digit year."
Tagres	YomKippur	"Returns the date (on Dim: " PntType:UDate ") for the year specified or implied."
Desc
IPar	"This module is used to convert a date, time, or month to another format as governed by valuetype. Dimensions of type UDate, UMonth, and UDT can use the {now} construct to obtain information about now on the current system. The following chart shows the permitted variations-"
Table	Supported Conversions within DTInfo()	0	0	#E6E6C0
TE	"" "UDaTE" "UMonth" "UDT" "UWeek" "UQtr" "UPeriod" "Integer" "UTime"
TE	"Day?" "ok" "" "ok" "" "" "" "" ""
TE	"DayOfWeek?" "ok" "" "ok" "" "" "" "" ""
TE	"Hour?" "" "" "ok" "" "" "" "" "ok"
TE	"Minute?" "" "" "ok" "" "" "" "" "ok"
TE	"Month?" "ok" "ok" "ok" "" "" "" "" ""
TE	"Second?" "" "" "ok" "" "" "" "" "ok"
TE	"UDate?" "ok" "" "ok" "" "" "" "converts" ""
TE	"UMonth?" "ok" "ok" "ok" "" "" "" "" ""
TE	"UPeriod?" "ok" "ok" "ok" "" "" "" "" ""
TE	"UQuarter?" "ok" "ok" "ok" "" "" "" "" ""
TE	"UTime?" "" "" "ok" "" "" "" "" "ok"
TE	"UWeek?" "ok" "ok" "ok" "" "" "" "" ""
TE	"UYear?" "ok" "ok" "ok" "ok" "ok" "ok" "" ""
Examples
EXWD	DTInfo(UDate:951201 UMonth?)	returns UMonth:9512 (this could also be done as UMonth:=UDate:951201)
EXWD	DTInfo(UDate:{now} UYear?)	returns the current year (this could also be done as UYear:=UDate:{now})
EXWD	DTInfo(UDT:970101::11:24 Minutes::15)	returns 970101:11:30
EXWD	DTInfo(UDate:970803 Month::+5 UMonth?)	returns UMonth:9801
EXWD	DTInfo(UDate:{current} Month::1 Day::1 UDate?)	returns the first day of the current year
EXWD	(DTInfo(UMonth* Day::1) DTInfo(UMonth* Day::15) DTINfo(UMonth* Day::31))/UMonth:=UYear:{now}	returns a list of dates corresponding to the 1<sup>st</sup>, 15<sup>th</sup>, and last day of each month in the current year.
EXWD	DTInfo(UDate:{now} DayOfWeek::-1)	returns nearest date on or before today that is a Monday
EXWD	Enum(UYear:1990..2010 @EchoT(DTInfo(UYear* Month::11 Day::22 DayOfWeek::+4)))	Echos date of Thanksgiving between 1990 and 2010
EXWD	DTInfo(UDate:11/2/07 Age::UDate:11/2/00)	Int:7
EXWD	DTInfo(UDate:11/1/07 Age::UDate:11/2/00)	Int:6 (has not yet reached birthday)
Mod	Echo	Output arguments to the Data Stream	OSRel
Usage	result	"message"
Usage	result	"point point tag..."
Usage	result	"Table::name point"
Params	result 	"The result is always Logical:True"
Params	point	"One or more points to be output."
Params	tag	"One or more of the tagged arguments below."
Tag	Buffer	name	"Output the contents of the stream buffer " Param:name " (i.e. buffer declared with " IntMod:Output "(" TagResName:Buffer " " TagName:Id ":" Param:name ")). \
The contents of the buffer are left intact. This option is also supported with the " TagName:JSON " and " TagName:Javascript " options."
Tag	Include	file	"The entire contents of " Param:file " is included as output."
Tag	Javascript	file	"Output the contents " Param:file " but process as if it were " PntType:BigText " with the 'Javascript' option."
Tag	JSON	name	"The arguments are formatted to the named JSON string. See below for examples."
Tag	NoPrefix	name	"Same as the " TagName:Table " tag except that output names do not incorporate any <b>Prefix</b>/<b>Suffix</b> given for the table."
Tag	Out	id	"Direct the output to the file or Stream specified by " Param:id ". (See the " IntMod:Output " module for details.) \
The scope of this redirection is limited to this " IntMod:Echo " module."
Tag	Table	name	"Format an output line for each element in the specified name as defined by " Param:name "."
Tag	XML	text	"Output the the specified text as opening XML/HTML section. The corresponding closing section \
is automatically added at the end of the output. If the " Param:text " is 0 length then no begin/end tags are output. If the value is UV4:none then it is ignored."
Desc
Ipar	"The " IntMod:Echo " module echos each of its points to the device or file currently assigned to the Data stream \
followed by a newline character."
IPar	"<b>Note</b> that the UV4:none point is not output."
Index	UV4:none	general	Str("v4refmod_e.htm#IntMod:Echo")	Echo	IntMod
Examples
EX	Echo("Context value of Year* = " Year*)"
EXWD	Echo(XML::td "this is the cell value")	outputs: &lt;td>this is the cell value&lt;/td>
EXWD	Echo(XML::"p align='center'" "A new paragraph...")	outputs: &lt;p align=center>A new paragraph...&lt;/p>
EXWD	Enum(Student.. @Echo(Table::Student Student*))	for each point on the Student dimension outputs all columns in Student table
EXWD	Echo(JSON::bigArg Include::"hugefile.txt")	Output the entire contents of the file as a single JSON string named 'bigArg'
Mod	EchoP	Output arguments to the Data stream (without Newline)	OSRel
Usage	result	"point point tag..."
Params	result 	"The result is always Logical:True"
Params	point	"One or more points to be output."
Desc
Ipar	"The " IntMod:EchoP " module echos each of its points to the output console but unlike " IntMod:Echo " without the terminating newline."
Mod	EchoA	Output an alert message to Standard Ouput	OSRel
Usage	"undef"	"point point... tagarg"
Params	point	"One or more points to be output."
Params	tagarg	"One or more of the optional tagged arguments below."
Tag	Exit	status	"The V4 process exits with the specified " Param:status " integer number."
Tag	URL	url	"Defines a URL to be invoked after the alert is handled by the client web page. This option is only \
effective when output is directed through the xvrestohtml process. If this tagged " Param:url " is not specified then \
the xvrestohtml process will return to the prior page after the error pop-up window is acknowledged by the client user."
Desc
Ipar	"The " IntMod:EchoA " module concatenates its argument points and generates an alert using the result. \
It does not return a value."
IPar	"If stdout has been redirected to a file and this module is called then the error message is also sent to the output file. \
The format of this output is such that all backend processors (Excel addin, converters to HTML, converts to BIFF) will \
properly interpret and handle the alert."
Examples
EX	EchoA("The server process has been restarted")
Mod	EchoD	Output Debugging Results to the Debug Stream	OSRel
Usage	undef	"point point ..."
Params	undef 	"All of the Echo modules return an undefined value."
Params	point	"One or more points to be output."
Desc
Ipar	"The " IntMod:EchoD " module echos each of its points to the device or file currently assigned to the Debug stream followed by a \
newline character. Output points are delimited by a single space. " IntMod:EchoD " differs from the other output modules \
in two ways. First, the output is always to the Debug stream (not the Data stream). Secondly, it always shows each point as a dimension:value pair."
IPar	"Note - this module never fails. The module evaluates and outputs its arguments one at a time. If the evaluation of an argument fails then a short \
string is output indicating that the argument failed. See below for an example."
Examples
EXWD	EchoD("Context value of Year* =" UYear*)	outputs "Context value of Year*" = UYear:<i>yyyy<\i>
EXWD	EchoD(123 hohoho Fail("A failure message"))	outputs "123 hohoho ?3:Fail(A fai"
Mod	EchoE	Output error message to Standard Ouput	OSRel
Usage	"undef"	"point point... tagarg"
Params	point	"One or more points to be output."
Params	tagarg	"One or more of the optional tagged arguments below."
Tag	Exit	status	"The V4 process exits with the specified " Param:status " integer number."
Tag	URL	url	"Defines a URL to be invoked after the error is handled by the client web page. This option is only \
effective when output is directed through the xvrestohtml process. If this tagged " Param:url " is not specified then \
the xvrestohtml process will return to the prior page after the error pop-up window is acknowledged by the client user."
Desc
Ipar	"The " IntMod:EchoE " module concatenates its argument points and generates a V4 error using the result. \
It does not return a value. It increments the internal error count by 1 (see " IntMod:Error "(" TagName:Count ")."
IPar	"If stdout has been redirected to a file and this module is called then the error message is also sent to the output file. \
The format of this output is such that all backend processors (Excel addin, converters to HTML, converts to BIFF) will \
properly interpret and handle the error."
Examples
EX	EchoE("Sorry, you are not allowed to access this analysis")
Mod	EchoN	Outputs Argument(s) to the Null Device	OSRel
Usage	result	"point point"
Params	result 	"The result is always Logical:True"
Params	point	"One or more points to be output."
Desc
Ipar	"The " IntMod:EchoN " module echos its output to the null device. It may be used to in conjunction with \
the " IntMod:Enum " and " IntMod:RCV " modules to generate recaps or totals without any supporting detail. \
The same effect can be achieved with the " IntMod:EchoS " or " IntMod:EchoT " modules and the " Tag:If " tag."
Examples
EXWD	EchoN(Student.Name Student.Advisor Student.GPA Student.Course)	Output four columns, one for each argument
Mod	EchoS	Output Results in SpreadSheet Metaformat to the Data Stream	V4Int OSRel
Usage	result	"point point tagval ..."
Params	result 	"Logical:True is always returned by this module."
Params	point	"One or more points to be output."
Params	tagval	"One or more tagged references described below."
Params	format	"A string format identical to the formatting used in the C programming language."
Tag	AutoFit	num	"Auto-fits the column widths for all rows output. The first " Param:num " lines are not included."
Tagres	AutoFit	"Auto-fits the column widths for all rows output."
Tag	AutoHead	logical	"If " Param:logical " is TRUE then auto format the column headings. This has minimal \
impact on Excel but does alter the font and background color for HTML. The " Tag:End " tag sets this option to TRUE."
Tag	BackgroundColor	color	"Specifies the background color."
Tag	BackgroundImage	url	"Specifies the " Param:url " for a background image."
Tag	BMargin	num	"Specifies the bottom margin in inches."
Tag	CellColor	num	"Sets the background color for the current cell to that specified by " param:num ". If " param:num " is negative then the tag is ignored."
Tag	ColCap	num	"The number of rows, starting with row 1, to be repeated on each output page."
Tag	ColColor	num	"Sets the background color for the current row to that specified by " param:num ". If " param:num " is negative then the tag is ignored."
Tag	ColGap	num	"The number of columns to skip between column sets when snaking. See example below."
Tag	Column	num	"Position to absolute or relative column. If " param:num " is an integer then position to that specified column. If " param:num " is a delta (i.e. plus or minus) then position relative to the current column."
Tag	Columns	num	"Defines the number of column sets when snaking output to a spreadsheet. See example below."
Tag	Context	string	"Passes the " Param:string ", as is, to the post-processor. The xvrestohtml program takes this string \
of context points and incorporates it into a javascript function used in saving the current output as an example."
Tag	Count	dim	"Increments the dimension point in the current context for the dimension " Param:dim " by 1. Note that the dimension must be in the current context and be of type Int."
Tag	CSS	text	"Include " Param:text " as a cascading-style-sheet entry when the output is passed through the \
xvrestohtml processor. If " Param:text " includes braces '{...}' then it is assumed to be a style entry. If " Param:text " does not include braces then it is assumed to be a URL link to a style sheet."
Tag	DHTML	logical	"If " Param:logical " is FALSE then disable any dynamic HTML (menus) within the HTML file generated \
by the xvrestohtml program. Setting this tag to false effectively disables the xvrestohtml -o option."
Tag	DHTML	text	"If " Param:text " begins with an angle bracket (&lt;) then the " Param:text " is assumed to be \
HTML that fully describes a dynamic-menu link to appear at the top of the output. If it does not then it is assumed to be \
the name of a javascript function to be called to create the menu."
Tag	Duplicate	dupfile	"If this tag is specified then either the xvrestohtml or xvrestobiff post-processor will duplicate \
the output file as " Param:dupfile ". If the extension of " Param:dupfile " is htm/html then xvrestohtml duplicates its \
output. If the extension is xls then xvrestobiff duplicates its output."
Tag	Echo	logical	"Echo::1 enables echoing of output to the spreadsheet as it is being processed. Echo::0 disables echoing until all output from V4 has been processed by the spreadsheet program. This is usually much faster (and easier on the eyes) for large outputs."
Tag	End	text	"Initiates end of data processing on the spreadsheet. The " param:text " value is set as the \
title for the spreadsheet. Various parameters are set on the spreadsheet based on the number of columns. \
These include Portrait, AutoFit, AutoHead, Footer, ColCap, and the margins."
Tag	Error	text	"The argument is displayed as an error message within the output HTML page or spreadsheet program."
Tag	Evaluate	logical	"Evaluate::1 (or Logical:True) positions the current cell on the spreadsheet to be the current cell at the time of the V4 invocation. The V4 intersection or row-columns in the spreadsheet are then evaluated. This can be used to automatically evaluate a row-column combination created by a V4 process."
Tag	ExcelIni	file	"The name of a V4/Excel Add-In initialization file. This must be given if the resulting V4R is to be read into Excel via \
the V4:Results command and the V4:Expand command is to be used."
Tag	FileName	name	"Defines the filename to be used when result is being downloaded to a client."
Tag	Font	name	"Declares the new global font " Param:name " for the spreadsheet. This argument may be specified more \
than once with the global font default in effect from that point onward."
Tag	FontSize	num	"This argument is similar to " TagName:Font ". The global font size is changed to " Param:num " from \
this point onward."
Tag	Footer	text	"The text becomes the footer text for the spreadsheet when it is printed. See the section below for character combinations can be used when Excel is the client spreadsheet."
Tag	Frames	num	"Forces any generated HTML output to be split into " Param:num " frames."
Tag	Grid	type	"Display row and column grid lines in the output. The " Param:type " is an integer greater than 0 indicating the grid \
format. " Tag:Grid ":1 should be used for hairline gridlines in HTML and to enable the GridLines print option in Excel. " Tag:Grid " :2 \
should be used for a hairline grid in HTML and hairline black borders on all cells in Excel."
Tag	Header	text	"The text becomes the header (or title) for the spreadsheet when it is printed. See the section below for character combinations can be used when Excel is the client spreadsheet."
Tag	HTML	text	"Defines an HTML text string that is to be included in subsequent output. If a following output point contains an escape character ('\\$'), then that character will be replaced by the " Tag:HTML " " param:text " string. Note that several " Tag:HTML " tags may be specified within a single " IntMod:EchoS " call."
Tag	HTTP_HTML	text	"Specifies an HTTP header line to appear at the top of any HTML page generated by this output."
Tag	HTTP_Other	text	"Specifies an HTTP header line to appear at the top of any non-HTML (e.g. Excel/BIFF) file generated by this output."
Tag	Id	text	"The text becomes the footer identification found in the lower left or right corner."
Tag	If	logical	"Output only if " Param:logical " evaluates to true. If " param:logical " is false then " IntMod:EchoS " does \
not output anything (see Description below). Note however that any totaling for recapping (" IntMod:RCV ") is still performed. This option can \
be used to control the level of output detail for reporting."
Tag	Include	file	"The " Param:file " is verified and passed to the next output processor. If the processor is xvrestohtml, then \
the file is retrieved and included directly after the HTML header and before any significant output. Multiple " Tag:Include " files \
may be passed this way. The content of these files must be valid HTML and/or Javascript (enclosed within &lt;script>...&lt;/script>)."
Tag	LMargin	num	"Defines the left margin, in inches, for printing the spreadsheet."
Tag	LogoImage	url	"The url for a logo image to appear at the top of the page. If the extension of this argument file is either 'htm' \
or 'txt' then the file is assumed to be the html to be used for the resulting page header and is copied directly to the output of xvrestohtml."
Tag	LogoURL	url	"A " Param:url " to link to if the top-of-page logo is clicked."
Tag	Macro	name	"Invokes the named macro on the user's current spreadsheet. This can be used to prompt the user for more information."
Tag	Menu1	name	"Defines the name of the first menu, of a possible two, on a spreadsheet. Each of the following string arguments in the remainder of the " IntMod:EchoS " call are the elements of the menu. The format of these strings is name;description;intersection where name is the name to appear on the menu, description is a description of the menu element, and intersection is a V4 intersection to be executed when the item is selected."
Tag	Menu2	name	"Defines the second menu. The format is the same as Menu1."
Tag	Message	text	"The " param:text " message is displayed at the bottom of the spreadsheet."
Tag	Note	text	"Associates a " param:text " note with the current cell."
Tag	Out	id	"Direct the output to the file specified by " Param:id ". (See the " IntMod:Output " module for details.)\
The scope of this redirection is limited to this " IntMod:EchoS " module."
Tag	Page	num..num	"The page numbers of the spreadsheet to be selected for printing."
Tag	PageBreak	num	"If " Param:num " is 1 then insert pagebreak before the current row, if 2 then insert after."
Tag	Portrait	logical	"Logical:True to print the spreadsheet in portrait mode, Logical:False to print in landscape."
Tag	RCV	logical	"If false then the all following arguments are NOT included in row-column totaling. If true then following arguments are included. Normally arguments are included."
Tag	RMargin	num	"The right margin, in inches, when printing."
Tag	Row	num	"Position to absolute or relative row. If " param:num " is an integer then position to that specified row. If num is a delta (i.e. plus or minus) then position relative to the current row."
Tag	RowCap	num	"The number of columns, starting with column 1, to be repeated on each output page."
Tag	RowColor	num	"Sets the background color for the current row to the color denoted by " param:num ". If the " param:num " is less than 0 then this tag is ignored."
Tag	RowGap	num	"The number of rows to skip between column sets when snaking. See example below."
Tag	Rows	num	"Defines the number of rows in each column set when snaking is done. See example below."
Tag	Ruler	num	"Output a horizontal rule every " Param:num " rows."
Tag	Scale	num	"The scale to print. 100 represents 100%. Use numbers smaller than 100 to reduce the size, greater than 100 to increase the size."
Tag	Server	url	"The " Param:url " for the [CGI] server."
Tag	Session	text	"The " Param:text " is an id or session code to appear at the bottom of the report."
Tag	Sheet	name	"Creates a new worksheet with the name of " param:name "."
Tag	Skip	npt	"Skips down npt rows in the spreadsheet. A Skip::1 is automatically generated as the last argument of an " IntMod:EchoS "."
Tag	Target	window	"This is an embedded tag within the " TagName:URL " tag. The values for " param:window " are: _blank, _self, _parent _top OR the name of a existing browswer window."
Tag	TMargin	num	"The top margin, in inches, when printing."
Tag	UpdateOK	num	"Sends a message to the spreadsheet interface that the update was successful."
Tagres	UpdateOK	"The same as UpdateOK:1"
Tag	URL	text	"Defines a URL link for the next value. If the length of " Param:text " is 0 then this tag is ignored. \
If the link begins with the '+' character then the " TagName:URLBase " string is prepended. If the link begins with an '&amp;' \
character then the " TagName:URLBase " is also prepended but the hyperlink is associated with the entire next cell, not just \
its value (i.e. the text in the cell is not hyperlinked, the cell itself is). This permits the text within the cell to be \
color coded. If the next value is the result of an " IntMod:SSExp " module call then it is ignored by the xvrestohtml program and the following \
value is displayed and hyperlinked. This allows for hyperlinks and V4/Excel expansions to co-exist within the same V4R file."
Tag	URL	list	"If a list is given then the first element of the list is the URL link (see above). Any additional list elements are optional tagged argument \
for the link. Currently the only supported option is " TagName:Target "::" Param:window " where " Param:window " specifies the target window for the link. Details on valid \
targets can be found above and <a href='http://en.wikipedia.org/wiki/Hyperlink' target=_blank>here</a>."
Tag	URL2	text	"Same as " TagName:URL " except that it works with " TagName:URLBase2 "."
Tag	URL3	text	"see above"
Tag	URL4	text	"see above"
Tag	URL5	text	"see above"
Tag	URLBase	text	"Defines a base URL link for the " Tag:URL " tag. Any " Tag:URL " specification beginning with the \
characters '+' or '&amp;' is prefaced with the base URL string."
Tag	URLBase2	text	"Same as " TagName:URLBase " except that it works in conjunction with " TagName:URL2 "."
Tag	URLBase3	text	"see above"
Tag	URLBase4	text	"see above"
Tag	URLBase5	text	"see above"
Tag	Width	num	"The width of the column. Use 9999 to auto-fit the column."
Tag	Width	list	"A " Param:list " value is used to set the widths of all columns of a spreadsheet. The first element \
of the " Param:list " is the width of the first column, the second is the width of the second column, etc. Use 0 (zero) or \
9999 to auto-fit a column."
Tag	X	num	"Shifts the upper left hand corner of the spreadsheet output by " param:num " columns."
Tag	Y	num	"Shifts the upper left hand corner of the spreadsheet output by " param:num " rows."
Desc
IPar	"The " IntMod:EchoS " module is used to output V4 points to the file or device specified by the Data stream." IntMod:EchoS " outputs \
each point value in an internal form for spreadsheets and Web pages and should only be used in conjunction with a \
spreadsheet supporting a V4 add-in or with the xvrestohtml/xvrestobiff programs."
IPar	"This module processes its arguments from left to right. Tags are processed with all other arguments. Tags such as " TagName:If " should \
be the first arguments to be effective."
Ipar	"If any of the arguments to this module is a list then each of the points in the list is output as if they were separate arguments."
IPar	"Note that formatting of specific cells is determined by the dimension of the value going into the cell and any formatting specified by the " IntMod:SSDim " module."
IPAR	"Special Character Combinations for Excel Headers/Footers"
IPar	"If an argument is UV4:none then it is ignored."
Table	Special Character Sequences within Excel	0	0	#E6E6C0
TE	"text" "Interpretation by Excel"
TE	"&L" "Left align the characters that follow"
TE	"&C" "Center the characters that follow"
TE	"&R" "Right align the characters that follow"
TE	"&B" "Toggle bolding"
TE	"&I" "toggle italics"
TE	"&U" "Toggle underlining"
TE	"&D" "Substitute with the current date"
TE	"&T" "Substitute with the current time"
TE	"&P" "Substitute with the current page number"
TE	"&font" "Print the characters that follow in the specified font"
TE	"&nn" "Print the characters that follow at the specified font size"
TE	"&N" "Substitute with the total number of pages in the document"
TE	"\\l" "Start the following text on a new line"
Examples
EXML	"How to Define a Menu"
ML	"Bind [XLSetup]"
ML	"EchoS(Menu1::"De&mo""
ML	"&RepRank;Sales Rep Ranking by Quarter;[RepRank UQuarter:9601..9604]"
ML	"&SalesByState;Sales by State & Month;[SalesByState UMonth:9601..9612]"
ML	"SalesBy&Mgr;Sales by Manager & Month;[SalesByMgr UMonth:9601..9606]"
ML	"&XSum;Executive Aging Summary;[XSum Today:961015]"
ML	"&DetAge;Detailed Customer Aging;[AgeReport Periods:30,60,90,120 UDate:961015]")
IPar	"This next example demonstrates the use of the " IntMod:SSDim " module with the " IntMod:EchoS " to format a spreadsheet ranking sales reps by manager and quarter, i.e. for each manager and quarter the top three reps are displayed. Additionally, the sales rep with the highest sales in each quarter is displayed in red (Color:3)."
EXML	"SalesRep Ranking - Formatting a Spreadsheet"
ML	"Dim TopEmp Dict
ML	"Bind [Qtr OSI..] DTInfo(OSI.InvoiceDate UQuarter?)"
ML	"Bind [Rank UQuarter.. Mgr.. Int..] List(Sort([Emps] Reverse::[SalesBQ],0) Nth::Int*)"
ML	"Bind [TopQuarter UQuarter..] List(Sort(Emp.. Reverse::[SalesBQ],0) Nth::1)"
ML	"Bind [RankedRep UQuarter.. Mgr..] EQ([Rank Int:1] [TopQuarter] TopEmp:=[[Rank Int:1] Id] [[Rank Int:1] Id])"
ML	"Bind [RepRank UQuarter..]"
ML	"Do(Tally(Emp.. (ListOf::Emp* By::Emp.Mgr Bind::[Emps]))"
ML	"Tally(OSI.. If::In(OSI.Qtr UQuarter*) (Sum::OSI.OrderAmt By::(OSI.Emp OSI.Qtr) Bind::[SalesBQ]))"
ML	"SSDim(Dim:Int Format::"#,##0") SSDim(Dim:TopEmp Style::"COLOR:3,ITALIC")"
ML	"EchoS(" " " " EnumCL(UQuarter* (Plus(UQuarter* " ") Plus(UQuarter* "-$"))))"
ML	"Sort(Mgr.. By::Mgr.Id"
ML	"Do::(EchoS(Mgr.Id Mgr.Name EnumCL(UQuarter* ([RankedRep] [[Rank Int:1] SalesBQ],0)))"
ML	"Enum(Int:2..3 If::Def([Rank Int*]) @EchoS(" " " " EnumCL(UQuarter* ([[Rank Int*] Id] [[Rank Int*] SalesBQ],0))))"
ML	"" IntMod:EchoS " ))"
ML	"EchoS(Width::9999 " " Width::9999 " " EnumCL(UQuarter* (Width::9999 " " Width::9999 " ")))   )"
IPar	"This next example demonstrates the use of the snaking capabilities. With snaking you can have the output go down for a certain number of rows (determined by Rows::num) and then snake back up and repeat. The effect is the same as a document with multiple columns. It is very useful when many rows and few columns need to be displayed."
EXML	"Customers Making Up 80% of Sales - Snaking Example"
ML	[Top80 UMonth..]
ML	&nbsp;Do(Tally(Sales.. If::{Sales.InvoiceDate == UMonth*}
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Sum::Sales.OrderAmt By::Sales.BillTo Bind::[CSales] ByList::[CusList])
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Sum::Sales.OrderAmt Bind::[TSales]))
ML	&nbsp;&nbsp;&nbsp;&nbsp;SSDim(Dim:Int Format::"#,##0" Dim:Num Format::"0.0" Dim:Title Font::Palatino Style::"BOLD,ITALIC")
ML	&nbsp;&nbsp;&nbsp;&nbsp;EchoS(Rows::51 RowGap::1 Columns::2 ColGap::1 ColCap::1)
ML	&nbsp;&nbsp;&nbsp;&nbsp;EchoS(Title:"Num" :"Id" :"$ Sales" :"%Cum" Echo::0)
ML	&nbsp;&nbsp;&nbsp;&nbsp;Enum(Sort([CusList] Reverse::[CSales])
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sum::ttl:=[CSales] Index::Dim:Int AWhile::LT(Percent(ttl* [TSales]) 80)
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@EchoS(Int* Cus.Id .CSales Percent(ttl* [TSales])))
ML	&nbsp;&nbsp;&nbsp;&nbsp;EchoS(End::Str("&B&CTop Customers (80% of Sales) for Period " UMonth*
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"\lOut of Pool of " ListSize(Cus..) " Customers"))
ML	&nbsp;&nbsp;&nbsp;)
Mod	EchoT	Outputs Tab (or other string) Delimited Arguments to Standard Ouput	OSRel
Usage	result	"point point tag..."
Params	result 	"The result is always Logical:True"
Params	point	"One or more points to be output."
Params	tag	"One or more of the tagged arguments below."
Tag	Column	delim	"Use the string " Param:delim " as the argument (column) delimiter instead of the tab character."
Tag	If	logical	"Output only if " Param:logical " evaluates to true. If " Param:logical " is false \
then " IntMod:EchoT " does not output anything (see Discussion below). Note however that any totaling for recapping (" IntMod:RCV ") is still performed. This option can be used to control the level of output detail for reporting."
Tag	Out	id	"Direct the output to the file specified by " Param:id ". (See the " IntMod:Output " module for details.)"
Tag	RCV	logical	"If false then the all following arguments are NOT included in row-column totaling. If true then following arguments are included. Normally arguments are included."
Desc
Ipar	"The " IntMod:EchoT " module echos each of its points to the output console followed by a newline character. Each point is separated from the others with a tab character. Output from this module can be imported into many spreadsheets and databases."
IPar	"This module processes its arguments from left to right. Tags are processed with all other arguments. Tags such as " TagName:If " should \
be the first arguments to be effective."
IPar	"If an argument is UV4:none then it is ignored."
Examples
EXWD	EchoT(Student.Name Student.Advisor Student.GPA Student.Course)	Output four columns, one for each argument
EXWD	EchoT(Column::"," Now is the time)	Outputs "Now,is,the,time"
Mod	EchoW	Output warning message to Standard Ouput	OSRel
Usage	"undef"	"point point... tagarg"
Params	point	"One or more points to be output."
Params	tagarg	"One or more of the optional tagged arguments below."
Tag	Exit	status	"The V4 process exits with the specified " Param:status " integer number."
Tag	URL	url	"Defines a URL to be invoked after the warning is handled by the client web page. This option is only \
effective when output is directed through the xvrestohtml process. If this tagged " Param:url " is not specified then \
the xvrestohtml process will return to the prior page after the error pop-up window is acknowledged by the client user."
Desc
Ipar	"The " IntMod:EchoW " module concatenates its argument points and generates a warning using the result. \
It does not return a value. The " IntMod:Error " module can be used to see the warning count and last warning message."
IPar	"If stdout has been redirected to a file and this module is called then the error message is also sent to the output file. \
The format of this output is such that all backend processors (Excel addin, converters to HTML, converts to BIFF) will \
properly interpret and handle the warning."
Examples
EX	EchoW("Nothing was selected for the report")
Mod	Enum	Enumerate Points and Execute	List V4Int
Usage	respnt	"list eval tagval"
UsageX	value	EnumX	"arguments same as Enum"
Params	respnt	"This module normally returns the last point evaluated (except with the Then tag)"
Params	list	"A list to be enumerated."
Params	eval	"A point to be evaluated for each point in " Param:list ". This may be a quoted intersection or a list, in which case \
each point in the list is evaluated. The " TagName:Do " tag may also be used to denote the " Param:eval " point."
Params	tagval	"Optional tagged arguments described below."
Tag	After	(pt action)	"V4 evaluates " param:pt " for every point in the " IntMod:Enum " " param:list ". If the evaluation of pt changes from one point to the next, then V4 evaluates action after the list point has changed but before the " IntMod:Enum " " param:eval " is evaluated. The After argument is primarily used to set up headers for the next group of points."
Tag	AWhile	isct	"The isct is evaluated after each point in the list (as opposed to If::isct). If the result of the evaluation is Logical:False then " IntMod:Enum " terminates."
Tag	Begin	(pt action)	"Before the first point in list is processed, the action associated with this Before argument is evaluated if pt is or evaluates to Logical:True. This can be used to set up titles."
Tag	Before	(pt action)	"This is similar to the After argument except that the action is evaluated before the context has changed to the new point. The Before argument is used primarily to output recapping for the prior point."
Tag	By	pt	"If this tag is given then this module is treated as if it were a " IntMod:Sort " module call."
Tag	Calc	int	"If the argument is an integer then this specifies the maximum number of " TagName:Calc " values allowed. The default is 4, the maximum is 100."
Tag	Calc	isct	"The isct is evaluated for each point in the " IntMod:Enum " list and the result is added into the first calc value used by " IntMod:RCV "."
Tag	Calc	list	"Each value of list is evaluated for each point in the " IntMod:Enum " list and the results are added into the calc values used by " IntMod:RCV "."
Tag	Context	point	"For each enumeration point, V4 evaluates and inserts the " Param:point " into the current context. \
If the point is UV4:none then nothing is done (i.e. UV4:none is not placed into the context). This point can be inserted into the context by quoting it: Context::@UV4:none. If " Param:point " is UV4:Skip the current point is ignored entirely."
Tag	ContextP	point	"This is identical to the " TagName:Context " tag except that if " Param:point " evaluates to a list then each point in the list is inserted into the context."
Tag	Columns	int	"Defines tha maximum number of columns allowed with nested " IntMod:RCV " calls. The default is 100, the maximum is 2048."
Tag	Do	eval	"An alternative way to specify the point to be evaluated."
Tag	End	(pt action)	"The " param:action " associated with this After argument is evaluated after the last point in the " IntMod:Enum " " param:list " if " param:pt " is or evaluates to Logical:True. This can be used to output grand totals in conjunction with the " IntMod:RCV " module."
Tag	Enum	sublist	"Nests another level of enumeration within the " Intmod:Enum " (i.e. every element in " Param:sublist " is \
enumerated for each element in the major " Param:list " of the " Intmod:Enum) ". Multiple " TagName:Enum " sublists may be \
specified. Note that all " IntMod:Enum " processing occurs for every combination of points."
Tag	Every	num	"Groups points in the " IntMod:Enum " " param:list " in sub lists of " param:num " points. This sub list is then added to the context and processing proceeds normally. See below for an example."
Tag	First	isct	"If specified then " Param:isct " is evaluated for the first point instead of " Param:eval "."
Tag	Id	string	"The " Param:string " value is used as an identifier for trace/debugging output. It may also be used \
with the processing of " TagName:Continue " and " TagName:End " tag points. (see below)"
Tag	If	isct	Param:isct " is evaluated for each point in the " param:list ". If the result is true, then " IntMod:Enum " continues processing the point. If false then " IntMod:Enum " immediately goes to the next point in the " param:list "."
Tag	IfOnce	isct	Param:isct " is evaluated for each point in the " param:list ". If the result is true, then " IntMod:Enum " processes the point and then immediately terminates."
Tag	Index	dim	"The dimension is inserted into the context with each selected point with an integer value representing the ordinal \
number of the point (i.e. the first selected point is reflected as " Param:dim ":1, the second as 2, etc.)"
Tag	Index	point	"The " Param:point " is inserted into the context and incremented by one after each point. This allows one to specify a starting value for an index."
Tag	Last	isct	"If specified then " Param:isct " is evaluated for the last point instead of " Param:eval "."
Tag	NestRCV	logical	"Normally each " IntMod:Enum " creates a new set of totals for the " IntMod:RCV " module. If this tag is specified as TRUE then this " IntMod:Enum " will not create a new set of totals but use the same set as the parent " IntMod:Enum "."
Tag	None	isct	"If no points of the list are selected, because of If's or the list is empty then the " param:isct " is evaluated."
Tag	Num	num	"Iterate through the " IntMod:Enum " num times. No " param:list " is required if this argument is given. If a " param:list " is specified then this tag can be used to limit process to the first " param:num " elements of the " param:list"."
Tag	Parent	isct	"The " param:isct " is evaluated for each point in the " IntMod:Enum " list and placed into the current context. The point is saved internally for use with the " tag:PIf " argument below. If subsequent points in the " IntMod:Enum " result in the same evaluation of " param:isct " then the last result of the " tag:PIf " is used to accept or reject the point."
TagRes	Pop	"When this tag is specified, V4 will pop off the context frame after processing each point in the enumeration. This option should be considered if points of differing dimensions are being enumerated. In this case, a point may unknowingly remain in the context and the " TagResName:Pop " option is the only way to ensure that a single enumeration point resides in the context at a time."
Tag	PIf	test	"The " param:test " intersection is tested each time the " param:isct " in the Parent argument changes. If the result is true then the " IntMod:Enum " continues with its current point. If the result is false then the " IntMod:Enum " point is rejected and the next point is obtained. The results are saved for use with the " tag:Parent " argument above."
Tag	Recap	int	"Specifies the maximum number of nested " IntMod:RCV " recap levels allowed. The default is 4, the maximum is 32."
Tag	Reverse	pt	"If this tag is given then this module is treated as if it were a " IntMod:Sort " module call."
Tag	Shell	dim	"Each point in the list is added to the current context under dimension " Param:dim ". Note \
that this dimension should be a shell dimension and should be specified as Dim:" Param:dim ". When this argument is given \
the enumerating point is NOT added to the context under its own dimension. See discussion below for more on this option."
Tag	Skip	num	"Skip the first " Param:num " elements of the list. This can be usefull when debugging."
Tag	Sum	pt	"The point " param:pt " is evaluated for each point in the " param:list ". For the first point in the " IntMod:Enum " " param:list ", the result of evaluating " param:pt " is added to the context. For each subsequent point in the " IntMod:Enum " " param:list ", the result of evaluating " param:pt " is added to the value currently in the context. If " param:pt " is a list then this process occurs for each point in it. This option can be used to keep running sums of values."
Tag	Then	point	"If this tag is specified, then the first valid point (considering " Tag:If ", " Tag:While ", etc. points) does not continue with normal processing but the " Param:point " is evaluated and returned as the result."
Tag	Try	isct	"Evaluation of " param:isct " is attempted for each point in list. Processing stops with the first \
successful evaluation of " param:isct " and the result is returned as the value of the " IntMod:Enum ". Note that the evaluation \
of [UV4:IsctFail] does not occur if the " Param:isct " does not evaluate."
Index	IsctFail	UV4	Str("v4refmod_e.htm#IntMod:Enum")	Enum	IntMod
Tag	Until	isct	Param:isct " is evaluated for each point in the " param:list ". If the result is false, then " IntMod:Enum " continues. If it is true, " IntMod:Enum " immediately stops processing the point and all subsequent points."
Tag	While	isct	Param:isct " is evaluated for each point in the " param:list ". If the result is true, then " IntMod:Enum " continues. If it is false, " IntMod:Enum " immediately stops processing the point and all subsequent points."
Tag	XML	value	"Specifies the " tag:XML " tag to  enclose all iterations of the " IntMod:Enum ". If " Param:value " is\
a 0-length string then no begin/end tags are output. If the value is UV4:none then it is ignored."
Desc
IPar	"" IntMod:Enum " enumerates through the " param:list " of points defined by the first argument. \
Each point in the " param:list " is added to the context and then the intersection eval is evaluated. " IntMod:Enum " \
simply evaluates the second argument and in effect discards the resulting points."
IPar	"The order of the tagged arguments is important as they are processed from left to right for each point in the \
source list. For example, if the " TagName:Index " tag is specified before an " TagName:If " tag then the index dimension \
is incremented regardless of the results of the " TagName:If ". If the " TagName:Index " is after the " TagName:If " then \
it is only incremented when the results of the " TagName:If " are true. A tag may be specified more than once. An " TagName:Index " \
tag may given both before and after an " TagName:If " tag (with different dimensions)."
IPar	"Normally each numerated point is evaluated if it is an intersection (or module). However when a " TagName:Shell " dimension is given then no evaluation is performed. \
The points are inserted into the context as-is."
Index	Continue	Tag	Str("v4refmod_e.htm#IntMod:Enum")	Enum	IntMod
Index	End	Tag	Str("v4refmod_e.htm#IntMod:Enum")	Enum	IntMod
IPar	"This module alters its normal processing flow whenever a " TagName:Continue " or " TagName:End " point is evaluated. \
If a " TagName:Continue " point is detected then the " IntMod:Enum " processing terminates immediately and the value of the \
module becomes the " TagName:Continue " point. If an " TagResName:End " point is detected then the module immediately terminates \
and returns the list entry index last processed. If an " TagName:End "::" Param:name " point is detected <b>and</b> this " Param:name " \
matches the module's " TagName:Id " name then again, the module terminates returning the last index processed. If the " Param:name " \
does <b>not</b> match then the module terminates and returns the " TagName:End "::" Param:name " point as its result."
Examples
EXWD	Enum([DeptList] @[DeptReport Dept*])	Enumerates through all points in [DeptList] and evaluates [DeptReport Dept*] for each one
EXWD	Enum(Student.. If::{Student.Id = Id*} Then::Student*)	Enumerates through the Student dimension until a point is found where Student.Id equals the current id. The Student point is then returned as the value.
EXWD	Enum(Cus.. If::{Cus.YearlySales >= 150000} @EchoT(Cus.Id .Name .YearlySales))	Echos all customers with YearlySales of at least 150000.
EXWD	Enum(Int:1..5 Enum::(a b c) @EchoT(Int* NId*))	Outputs "1  a", "1  b" ... "5  c"
EXWD	Enum(Num::10 Index::Dim:Int @Echo(Int*)	outputs 1, 2, ... 10
EXWD	Enum(Num::10 Index::101 @Echo(Int*)	outputs 101, 102, ... 110
EX	"Enum(SalesDetail.. If::{SalesDetail.Sales.ShipTo.State = State:PA}"
EXWD	@Do( ... ))	Enumerates through all sales detail (line item detail) selecting those shipped to State:PA (via link to Sales to ShipTo customer to State)
IPar	"If the SalesDetail points are grouped by Sales group then a much more efficient method would be to use the Parent/PIf arguments-"
EX	"Enum(SalesDetail.. Parent::SalesDetail.Sales PIf::{Sales.ShipTo.State = State:PA}"
EX	"@Do( ... ))"
IPar	"The example below demonstrates the use of the Every tagged option. The dimension UMonth is typically set to a large number of months. The Every::6 option in the " IntMod:Enum " breaks off the months into chunks of 6, creates a temporary point on the List dimension and adds it to the current context. Each of the following " IntMod:EchoS " calls then reference the List* to generate values for six columns, one for each month in the grouping."
EXML	"Example of the " TagName:Every " Tag"
ML	[RevExp UMonth..]
ML	&nbsp;Do(Enum(UMonth* Every::6
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(EchoS("" (UMonth* UMonth*)/List*)
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EchoS("Plane" ("Hours" "Rate")/List*)
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enum(PlId* @EchoS(PlId* ([Hours],[EHExpHours] [HourlyRate],"")/List*))
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EchoS("Revenue" EnumCL(List* (Sum({[Hours],[ExpHours],0 * [HourlyRate],0}/PlId*) "")))
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EchoS()))
ML	&nbsp;&nbsp;&nbsp;)
Mod	EnumCL	Enumerate Points, Execute & Return List	List
Usage	reslist	"" param:list " " param:eval ""
Usage	reslist	"" param:eval " / " param:list ""
Params	reslist	"The resulting " Param:list " of points from evaluating " param:eval " for each point in " param:list "."
Params	list	"A " param:list " to be enumerated."
Params	eval	"An intersection (quoted) to be evaluated for each point in " param:list "."
Tag	Agg	area	"Include the specified aggregate " Param:area " as part of the processing of this module call and \
remove the " Param:area " from the runtime context when the processing has completed. " Param:area " may be a single file \
specification or a list of file specifications."
TagRes	Collapse	"If any of the elements of " Param:list " are also lists then force each point within the " param:list " into the context rather than the " param:list " point itself."
Tag	Column	num	"Set the default column to " param:num ". This is used primarily with the " IntMod:RCV " module to initialize to a starting column."
Tag	Context	point	"For each enumeration point, V4 evaluates and inserts the " Param:point " into the current context. \
If the point is UV4:none then nothing is done (i.e. UV4:none is not placed into the context). This point can be inserted into the context by quoting it: Context::@UV4:none. If " Param:point " is UV4:Skip the current point is ignored entirely."
Tag	ContextP	point	"This is identical to the " TagName:Context " tag except that if " Param:point " evaluates to a list then each point in the list is inserted into the context."
Tag	Dim	dim	"Specifies the dimension of the resulting list. The default is Dim:List. Obviously " Param:dim " must \
be of point type " PntType:List "."
Tag	Do	eval	"An alternative way to specify the point to be evaluated."
Tag	Enum	list	"Multiple sets of input " Param:lists " may be incorporated into a single " IntMod:EnumCL " call. \
This tag is used to end the prior list and begin a new list. Note that all selection, index, context, etc. tags are reset \
and must be respecified after this tag."
Tagres	Evaluate	"Normally the " param:eval " point is evaluated once for each point in " param:list ". If the result is an intersection or special point (e.g. dim*) then it is appended, as is, into the resulting " param:list ". The " TagResName:Evaluate " tag can be used to override this default and force an additional evaluation."
Tag	First	isct	"If specified then " Param:isct " is evaluated for the first point instead of " Param:eval "."
Tag	If	isct	"The intersection is evaluated for each point in the " param:list ". If the result is true, then " IntMod:EnumCL " continues processing the point. If false then Enum immediately goes to the next point in the " param:list "."
Tag	IfOnce	isct	"The " Param:isct " is evaluated and if the result is True then no further processing is performed \
on the current " Param:list " point and processing for the next point is immediately obtained and processed."
Tag	Ignore	point	"If the current value is equal to " Param:point " then ignore it, i.e. do not include it in the resulting list. \
This option is useful for eliminating bad or failed values from the result."
Tag	Index	dim	"The dimension dim is added to the context of the " IntMod:EnumCL " and set to the current count as the points in list are enumerated, i.e. dim* references 1 through the number of points in " param:list "."
Tag	Index	point	"The " Param:point " is inserted into the context and incremented by one after each point. This allows one to specify a starting value for an index."
Tag	Last	isct	"If specified then " Param:isct " is evaluated for the last point instead of " Param:eval "."
TagRes	Lazy	"Normally " IntMod:EnumCL " performs the necessary calculations when invoked and returns the resultant list. \
When " TagResName:Lazy " is specified, the module immediately returns with a lazy-list internal structure. Points on this \
<i>lazy-list</i> are then obtained and returned point-by-point on an as-needed basis. See below for more discussion."
Tag	None	isct	"Evaluate " Param:isct " if no points are selected for output. Multiple " TagName:None " tags may be given, \
and each one within an " TagName:Enum " group is evaluated. If multiple " TagName:Enum " segments are present then any " TagName:None " tags \
specified are within the scope of that " TagName:Enum ". In other words, each segment is processed separately, and <b>not</b> cumulative across segments."
Tag	Num	num	"Evaluate " param:eval " " param:num " times. A source " param:list " is optional with this parameter."
Tag	Num	max	"Limit the number of points to " Param:max ". The effect of this depends on the placement of the argument. If it is placed before \
any conditional arguments then the effect is to limit the number of points from the source list. If it is after any conditionals and immediately before \
the output specification then the effect is to limit the number of resulting points. The " TagName:Num " option may be used more than once."
Tag	Parent	isct	"The " param:isct " is evaluated for each point in the " IntMod:Enum " " param:list " and placed into the current context. The point is saved internally for use with the " tag:PIf " argument below. If subsequent points in the " IntMod:Enum " result in the same evaluation of " param:isct " then the last result of the " tag:PIf " is used to accept or reject the point."
Tag	PIf	test	"The test intersection is tested each time the " param:isct " in the " tag:Parent " argument changes. If the result is true then the " IntMod:Enum " continues with its current point. If the result is false then the " IntMod:Enum " point is rejected and the next point is obtained. The results are saved for use with the " param:Parent " argument above."
TagRes	Pop	"When this tag is specified, V4 will pop off the context frame after processing each point in the enumeration. This option should be considered if points of differing dimensions are being enumerated. In this case, a point may unknowingly remain in the context and the " TagResName:Pop " option is the only way to ensure that a single enumeration point resides in the context at a time."
Tagres	SetOf	"If this argument is given then " IntMod:EnumCL " returns a set of points, not a " param:list ". A set contains no duplicate points."
Tag	Shell	dim	"Each point in the list is added to the current context under dimension " Param:dim ". Note \
that this dimension should be a shell dimension and should be specified as Dim:" Param:dim ". When this argument is given \
the enumerating point is NOT added to the context under its own dimension."
Tag	Sum	pt	"The point " param:pt " is evaluated for each point in the " param:list ". For the first point in the " IntMod:EnumCL " " param:list ", the result of evaluating " param:pt " is added to the context. For each subsequent point in the " IntMod:EnumCL " " param:list ", the result of evaluating " param:pt " is added to the value currently in the context. If " param:pt " is a " param:list " then this process occurs for each point in it. This option can be used to keep running sums of values."
Tag	While	isct	"The intersection is evaluated for each point in the " param:list ". If the result is true, then Enum continues. If it is false, Enum immediately stops processing the point and all subsequent points."
Tag	Until	isct	"The intersection is evaluated fo reach point in the " Param:list ". Processing continues until the \
result evaluates to True (this is the converse of the " TagName:While " tag)."
Desc
IPar	IntMod:EnumCL " enumerates through the " param:list " of points defined by the first argument. Each point in \
the " param:list " is added to the context and then the intersection eval is evaluated. " IntMod:EnumCL " creates \
a " param:list " of the points resulting from the repetitive evaluation and returns that " param:list " as its result."
IPar	"The order of the tagged arguments is important as they are processed from left to right for each point in the \
source list. For example, if the " TagName:Index " tag is specified before an " TagName:If " tag then the index dimension \
is incremented regardless of the results of the " TagName:If ". If the " TagName:Index " is after the " TagName:If " then \
it is only incremented when the results of the " TagName:If " are true. A tag may be specified more than once. An " TagName:Index " \
tag may given both before and after an " TagName:If " tag (with different dimensions)."
IPar	"A one-to-many mapping from source point to resulting point is possible by specifying multiple resulting points \
and/or " TagName:Do " arguments-"
EXWD	EnumCL(Int:1..5 @{int* + 100} @{int* * int*})	returns (101 1 102 4 103 9 104 16 105 25)
IPar	"The " TagName:Enum " may be used to process one or more additional sets of source points. Additional " TagName:Enum " \
points may be different dimensions. For example if current sales are 'stored' in the Dim:Sales dimension and historical \
sales are store by customer in the Dim:CusHist dimension, then a list of all sales for a particular customer could be \
obtained with-"
EX	EnumCL(Sales.. If::{Sales.Customer = Customer*} @Sales.Amount Enum::CusHist.. If::{CusHist.Customer = Customer*} CusHis.Amount)
IPar	"Use of the " TagResName:Lazy " option is recommended when the module is to be used in conjunction with the \
DotDotToList dimension attribute. Consider the example below-"
EXWD	Dim Sales AggRef DotDotToList	declare a dimension
EXWD	[Dim:Sales UV4:DotDotToList] EnumCL(MakeP(Dim:Sales) If::{some test})	define 'all' points on the dimension
EXWD	Tally(Sales.. If::{some other test} ...)	perform a tally on Sales.. with further testing
IPar	"In the above example, V4 makes a complete pass through the Sales dimension, selects a subset and creates a temporary \
list when [Dim:Sales UV4:DotDotToList] is evaluated. The Tally module then enumerates through that list and does its own \
sub-selection. This example makes two passes through the Sales aggregate information and creates an extra list."
IPar	"The example below is similar except that the EnumCL uses the " TagResName:Lazy " attribute. In this case, the \
evaluation of [Dim:Sales UV4:DotDotToList] does not make a pass through the Sales aggregates. It just creates a structure \
that can be later referenced. The Tally module uses this internal structure to scan through the aggregate information. \
In this example, only one pass is performed and no temporary lists are required."
EXWD	Dim Sales AggRef DotDotToList	declare a dimension
EXWD	[Dim:Sales UV4:DotDotToList] EnumCL(MakeP(Dim:Sales) If::{some test} Lazy?)	define 'all' points on the dimension
EXWD	Tally(Sales.. If::{some other test} ...)	perform a tally on Sales.. with further testing
Ipar	"Note that the slash (/) can be used instead of the module name. The form is " param:eval "/" param:list ". See below for examples."
Examples
ExWD	Sum(EnumCL(Cus.. @[YearlySales Cus* Year*]))	returns the sum of yearly sales for all customers for the current year
ExWD	EnumCL(Int:1..10 @Month.Format)	results in a list of Month.Format evaluations for the integer 1 to 10
ExWD	Month.Format/Int:1..10	is identical to the above example
EXWD	EnumCL(Int:1..100 Num::50 If::{Int* > 48} Num::5)	(49 50)
EXWD	EnumCL(Int:1..100 If::{Int* > 48} Num::5)	(49 50 51 52 53)
Mod	EQ	Equality Test	RelLog
Usage	logical	"pt1 pt2"
UsageX	logical	EQk	"tp1 pt2"
Usage	res	"pt1 pt2 trueval falseval"
Params	logical	"Logical:TRUE or FALSE depending on the result of the comparison."
Params	pt1	"Any point."
Params	pt2	"Any point."
Params	res	"The value of trueval if " Param:pt1 " equals " Param:pt2 ", otherwise the value of falseval."
Params	trueval	"The value returned if the two points are equal."
Params	falseval	"The value returned if the two points are not equal."
Desc
IPar	IntMod:EQ " compares two points and returns true only if the points are identical - both dimension and value. " IntMod:EQk ", or EQual-Kindof, returns true if two points have the same value, but not necessarily the same dimension."
IPar	"See " PntType:Real " for details on comparing floating point numbers."
Examples
EXWD	EQ(Int:100 Real:100	Logical:FALSE
EXWD	EQk(Int:100 Real:100	Logical:TRUE
EXWD	EQ(Int:3 Int:4 Yes No)	Alpha:No
Mod	Error	Manipulates and Accesses the V4 Global Error Code	V4Int
Usage	respnt	"tag..."
Params	respnt	"The result is determined by the tagged arguments."
Params	tag	"One or more of the tagged arguments below."
Tag	Count	num	"Sets the V4 error count to " Param:num "."
TagRes	Count	"Returns the current V4 error counter."
Tag	Drawer	dpoint	"Inserts the last recorded error message into the " IntMod:Drawer " specified by " Param:dpoint "."
TagRes	Error	"Returns, as a point on Dim:Alpha, the last recorded error message. If no error has been recorded then an \
empty (zero-length) string is returned. The last recorded error is also returned when this module is called with no arguments."
TagRes	Intersection	"Returns, as a point on Dim:Alpha, an image of the intersection that generated the last recorded \
error message. If no error has been recorded then an empty string is returned."
Tag	ListOf	option	"Returns a list of error information. If " Param:option " is <b>CONTEXT</b> then the saved context at the time of the error is returned. If " Param:option " is <b>STACK</b> then \
the execution frame stack at the time of the error is returned. Each frame consists of a list of three elements: the error message, the source file and the line number within the source file of the error. \
Note that this option is only valid after an error dump is output (see discussion below)."
Tag	Message	text	"Sets the last recorded error to " Param:text "."
TagRes	Module	"Returns, as a point on Dim:IntMod, the module generating the last recorded error."
TagRes	Reset	"Resets (clears) the last recorded error. It also resets the global process error counter to 0. The " Command:If " <b>Errors</b> command references this error count."
TagRes	Warning	"Returns list: (<i>number-of-warning</i> <i>last warning message</i>)."
Tag	Warning	num	"Sets the warning count to " Param:num "."
Desc
IPar	"An error within V4 often results in a cascade of subsequent errors as the error failure propagates upward through \
the nested call frame stack. A high-level error handler written in V4 has the problem of determining what the error actually \
is and what triggered it. To help in this determination, the V4 runtime keeps a single error message string which it updates \
whenever an error occurs <b>and</b> the message string is empty. This module allows the user to reference the message string, \
reset it and explicitly set it."
IPar	"The 'last recorded error' is automatically cleared under two conditions. In each of the following two conditions \
the 'last recorded error' must not already be set. The first condition is when an intersection fails \
but the continued point (i.e. [<i>failed intersection</i>],<i>continuedpoint</i>) succeeds. The second is when the first argument \
of the " IntMod:Def " (or " IntMod:DefQ ") module fails. The " TagResName:Reset " tag is used to explicitly clear the error."
IPar	"This module may also be called with no arguments. " IntMod:Error "() is identical to " IntMod:Error "(" TagResName:Error ")."
IPar	"Untrapped errors result in an error <i>dump</i>. This consists of a list of all nested stack frames and the context at the time of the error. The information generated by this dump is saved and may be later \
retrieved with the " IntMod:Error "(" TagName:ListOf "::" Param:option ") call. An error dump may also be triggered with the use of '?' after a module name."
Examples
EXWD	Error()	returns the last recorded global error as a point on Dim:Alpha.
EXWD	[doThis],Do(? [recoverFromError])	If [doThis] fails then an error dump is generated (?) and [recoverFromError] is evaluated
Mod	Eval	Evaluates Intersection and Returns One or More Results	V4Int List
Usage	value	isct tag
Params	value	"The value is determined by the tagged arguments."
Params	isct	"An intersection (quoted) to be evaluated."
Params	tag	"One or more of the tagged arguments below."
TagRes	All	"Return a list of all possible values resulting from the evaluation of the " Param:isct " in the current context."
TagRes	ListOf	"Identical to the " TagResName:All " tag."
Tagres	MatchUndef	"Tells the V4 evaluator to allow matching if a point is not in the current context (i.e. is a dimension is not in the context then 'dim..' is assumed to be in the context)."
Tag	Nest	logical	"If true (default) then nest (or chain) all evaluations (i.e. if the " Param:isct " results in another \
intersection or V4 module then evaluate it). If false then return the first value without chaining."
Tag	Nth	num	"Return the " Param:num "<sup>th</sup> value resulting from the evaluation of " Param:isct ". \
A value of 1 returns the <i>best</i> value and is identical to evaluating " Param:isct " outside of this module. A value \
of 2 returns the <i>second best</i> value, etc."
Desc
IPar	"This module permits the user to choose which of the possible values to use from the evaluation of an intersection."
Examples
EXWD	Dim A,B,C,D Int	declare 4 new dimensions
EXWD	[Foo A:1] Now	Create bindings for each of them
EXWD	[Foo B:2] Is	&nbsp;
EXWD	[Foo C:3] The	&nbsp;
EXWD	[Foo D:4] Time	&nbsp;
EXWD	[Foo A:1 B:2 C:3] "for all good men"	Define a binding using combination of dimensions
EXWD	Eval Context(A:1 B:2 C:3 D:4)	Add four points to the current context
EXWD	= [Foo]	returns "for all good men"
EXWD	= Eval(@[Foo] All?)	returns ("for all good men" NId:Time NId:The NId:Is NId:Now)
EXWD	= Eval(@[Foo] Nth::3)	NId:The
EXWD	[BestPrice Cus.. IM..] Minimum(Eval(@[Price Item* Cus*] All?))	Calculates the best price of an item for a customer by taking the minimum of all possible prices of that item for that customer
EXWD	[Square Int..] {Int* * Int*}	Define a binding to calculate squares
EXWD	Eval(@[Squares Int:{sample}] Nest:Logical:False)	returns {Int* * Int*} - i.e. the NON-chained-evaluation value of the binding
Mod	EvalAE	Evaluate Arithmetic Expression	Math V4Int
Usage	nvalue	"string tag"
Params	nvalue	"The resulting number calculated by the module."
Params	string	"A string containing an arithmetic expression to be evaluated."
Tag	Dim	dim	"An optional dimension name, the result is returned as a point on this dimension. If a dimension is not specified then Dim:Int is assumed."
Tag	Point	point	"An optional point to be used in evaluating expression values. If not given then UV4:EvalAE is assumed."
Tag	Problem	logical	"If " Param:logical " is TRUE then the module does not evaluate an expression but checks or validates \
each component of the expression. It does this by evaluating [UV4:EvalAEVal " Param:component "] for each " Param:component ". \
If the value of the intersection is a string then it is assumed to be an error string and that string is returned as the \
result of the " IntMod:EvalAE " module. If no problems are detected then " IntMod:EvalAE " fails (see example below)."
TagRes	Problem	"Identical to " TagName:Problem ":Logical:True."
Params	value	"A value returned if the first argument is not a string."
Params	pt	"A non-string point."
Desc
IPar	"This module parses the components of string as a mathematical expression, evaluates each component and then performs the specified operations. The allowed components are:"
EXWD	integers	integer numbers such as 100, -123
EXWD	real	real numbers such as 100.00, 0.9876, 12e10
EXWD	intersections	any valid intersection enclosed in brackets
EXWD	points	any valid V4 point. The value of a point is taken by inserting the point into an intersection of the form [UV4:EvalAE point] (or whatever Point was specified). If the point specifies multiple points then the sum of each evaluated intersection is taken (see example below).
EXWD	points in context	any valid V4 point followed by '||' and then a context point (or list)
EXWD	operators	the arithmetic operators: + - / // % * ( )
IPar	"If the first argument is not a string then " IntMod:EvalAE " becomes " IntMod:MakeP " and simply converts its first argument to the dimension specified by the second argument according to the semantics of " IntMod:MakeP "."
Examples
EX	EvalAE("[UsageFactor] * (GL:5000..5005 + SchAE:Total)" Dim:Int )
IPar	"The above expression would be calculated as {[UsageFactor] * Sum([UV4:EvalAE GL*]/GL:5000..5005) + [UV4:EvalAE SchAE:Total]}"
EXWD	EchoE("Problems in expression: " EvalAE(Alpha* Problem?)),ok	Checks the expression in Alpha* for problems and generates error message if any found
Mod	EvalBL	Return Binding Points as List	V4Int
Usage	binding	"isct tagargs"
Params	binding	"A list of points corresponding to the binding matched in the evaluation of isct."
Params	isct	"An intersection (quoted) to be evaluated."
Tagres	MatchUndef	"Tells the V4 evaluator to allow matching if a point is not in the current context (i.e. is a dimension is not in the context then 'dim..' is assumed to be in the context)."
Tag	Nth	num	"Return the list of points associated with the " Param:num "<sup>th</sup> best match. If num is 1 (default) then the best match is used."
Tag	Number	num	"Returns the list of points associated with the first thru " Param:num "<sup>th</sup> matches. Points appearing in more than one intersection are NOT duplicated."
Desc
IPar	"The " IntMod:EvalBL " module evaluates its argument which must be a quoted intersection. If the evaluation fails then " IntMod:EvalBL " also fails. If the evaluation succeeds, " IntMod:EvalBL " returns, as a " param:list ", all of the points that were matched during the evaluation. This can be used to determine exactly what points were involved in an evaluation even when context points are used."
Examples
EX	"Bind [Square Int:2] Int:4"
EX	"Context Add Int:2"
EXWD	EvalBL(@[Square])	returns (NId:Square Int:2)
EXWD	EvalBL(@[Cube])	fails because evaluation of [Cube] is undefined
EXWD	EvalBL(@[xxx] MatchUndef? Number::5)	returns a list of points of the first 5 intersections containing xxx (assuming the context is empty)
EXWD	EvalBL(@[xxx] MatchUndef? Nth::5)	returns a list of points in the 5th intersection
EXWD	EnumCL(Int:1..99 While::{ListSize(Context(EvalBL(@[xxx] MatchUndef? Nth::Int*),())) > 0} @List*)	returns a list of lists, each sub list being the points in an intersection
Mod	EvalCmd	Execute V4 Interpreter Command	V4Int
Usage	true	"command tag"
Params	true	"returns Logical:True if the execution of the command succeeds. The module fails an error occurs while executing the command."
Params	command	"An alpha string to be executed as a V4 command. Multiple arguments are concatenated into a single string."
TagRes	Echo	"The V4 command is output to the status stream before it is evaluated by the V4 interpreter."
Desc
IPar	"The " IntMod:EvalCmd " module passes its string argument to the V4 interpreter for execution as a V4 command."
Examples
EXWD	EvalCmd("Area Read DataAgg Aggregate")	Open DataAgg.v4a as read-only aggregate
EXWD	[DataFileName] "DataAgg"	Bind value to intersection
EXWD	EvalCmd("Area Read " [DataFileName] " Aggregate")	Same as above
Mod	EvalLE	Evaluate a BitMap Expression	List
Usage	reslist	"string"
Usage	reslist	"dimpt string"
Params	reslist	"returns a list (bitmap) based on the string argument."
Params	dimpt	"A point on the Dim dimension."
Params	string	"A string expression."
Tag	Problem	logical	"If " Param:logical " is TRUE then the module does not evaluate an expression but checks or validates \
each component of the expression. It does this by evaluating [UV4:EvalLEVal " Param:component "] for each " Param:component ". \
If the value of the intersection is a string then it is assumed to be an error string and that string is returned as the \
result of the " IntMod:EvalLE " module. If no problems are detected then " IntMod:EvalLE " fails (see example below)."
TagRes	Problem	"Identical to " TagName:Problem ":Logical:True."
Desc
IPar	"" IntMod:EvalLE " is similar to " IntMod:EvalAE " in that it parses and evaluates a string expression. \
Instead of returning a numeric result, EvalLE returns a list of points. Identifiers in the string expression are \
evaluated with the point UV4:EvalLE. The supported operators are & for logical and, | for logical or, ~ to complement (not), and - for logical/set subtraction. The logical and operator is implied between two consecutive identifiers."
IPar	"If an identifier appears with the '*' suffix then it is evaluated with UV4:EvalLEStar. This allows the routine to treat star-ed entries as a range of maps to be logically or'ed together."
IPar	"If the first argument to this module is a point on the Dim dimension then that dimension will be assumed for all points not \
explicitly assigned to a dimension. Points normally assumed to be on the NId dimension will be assigned to the given dimension."
Examples
EXWD	EchoE("Problems in expression: " EvalLE(Alpha* Problem?)),ok	Checks the expression in Alpha* for problems and generates error message if any found
EXWD	EvalLE("State:PA Available:Yes (Type:Med | Method:1)")	identical to..."
EX	List([UV4:EvalLE State:PA] Intersect::[UV4:EvalLE Available:Yes]
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Intersect::List([UV4:EvalLE Type:Med Union::[UV4:EvalLE Method:1]))"
EXWD	EvalLE("Author:King* & Title:Day")	with the proper handlers (see below) would return a list of all authors starting with "King" and containing "Day" in the title
EXWD	EvalLE(Dim:Title "Author:King* & Day")	identical to the prior example (i.e. Day is taken to be Title:Day, not NId:Day)
EX	Dim Author Alpha
EX	[UV4:EvalLE Avail..] Do(V4ISOp(V* KeyNum::1 Key::Str("AUT" Author* UC?)) V4ISVal(V* Dim:BM 2))
EX	[UV4:EvalLEStar Author..]
EX	&nbsp;List(`EnumCL(List(V* KeyNum::1 First::V4ISOp(V* KeyNum::1 Get::KeyedPartial Key::Str("AUT" Author* UC?)) While::Str(V4ISVal(V* Dim:Alpha 1) Head::Str("AUT" Author*)))
EX	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;First::V4ISVal(V* Dim:BM 2) @MakeP(Tag:Union V4ISVal(V* Dim:BM 2))))
EX	Dim Title Alpha
EX	[UV4:EvalLE Title..] Do(V4ISOp(V* KeyNum::1 Key::Str("   " Title* UC?)) V4ISVal(V* Dim:BM 2))
EX	[UV4:EvalLEStar Title..]
EX	&nbsp;List(`EnumCL(List(V* KeyNum::1 First::V4ISOp(V* KeyNum::1 Get::KeyedPartial Key::Str("   " Title* UC?)) While::Str(V4ISVal(V* Dim:Alpha 1) Head::Str("   " Title*)))
EX	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;First::V4ISVal(V* Dim:BM 2) @MakeP(Tag:Union V4ISVal(V* Dim:BM 2))))
Mod	EvalPt	Concatenates Arguments, Parses, and Evaluates as V4 Point	V4Int
Usage	res	"arg1 arg2 ..."
Params	res	"The point resulting from the evaluation of the argument point."
Params	arg1	"One of any number of points to be concatenated into a single point specification."
TagRes	Optimize?	"After parsing the point, V4 optimizes in the same way that the " IntMod:Do " " TagResName:Optimize " option does."
Tag	Token	str	"Treats the " Param:str " as if it were a single token (see examples below)."
Desc
IPar	"This module takes all of its arguments, concatenates them into a single string, parses the string as a V4 point, \
and then evaluates that point. The result of the evaluation is returned as the value of the module."
IPar	"<span style='color:red; font-weight:bold;'>Note - be very careful using this module with input from an untrusted source. If the resulting string is a V4 module then that module \
will be invoked. The use of this module with input from a web source is not recommended.</span>"
Examples
EXWD	EvalPt("UDate" "*")	returns the current value of Dim:UDate (i.e. UDate*)
EXWD	Context Add "Salary"	Adds Alpha:"Salary" to context
EXWD	EvalPt(Alpha* "*")	Creates string "Salary*" and evaluates as V4 point
EXWD	EvalPt("[Emp." Alpha* "]")	Creates string "Emp.Salary" and evaluates
EXWD	EvalPt("Alpha:" "now is the time")	creates the point Alpha:"now" (characters after first space are ignored)
EXWD	EvalPt("Alpha:" Token::"now is the time")	creates the point Alpha:"now is the time"
Mod	Fail	Generate a V4 failure	V4Int
Usage	result	""
Usage	result	"errorMsg"
Usage	result	"tagarg"
Params	result	"This module does not return a result."
Params	errorMsg	"The failure error message."
Params	tagarg	"One of the tagged arguments below."
TagRes	Message	"Returns the last " Param:errorMsg ". If there is no prior message then the module fails."
TagRes	Reset	"Clears out any prior " Param:errorMsg "."
Desc
IPar	"This module simply fails. If an " Param:error " is given then that text becomes the failure reason, otherwise a generic reason is provided. \
This module is similar to the " IntMod:NOp " module (with an argument of 0) except that " IntMod:Fail " can specify a failure reason."
Mod	FinCoupon	Calculations for Financial Coupons	Financial
Usage	result	"restag? arg arg ..."
Params	result	"The result of the module- a number or date depending on restag."
Params	restag	"One of the tags listed below indicating the desired result."
Params	arg	"Tagged arguments as described below."
Tagres	DateAS	"Return the next coupon date after settlement"
Tagres	DateBS	"Return then coupon date before settlement"
Tagres	DaysBS	"Return the from the coupon date before settlement to the settlement date."
Tagres	DaysNC	"Calculate the number of days from settlement to the next coupon date."
Tagres	DaysS	"The number of days in the coupon period that contains the settlement date."
Tagres	NumSM	"Number of coupon periods between settlement and maturity."
Tag	Settlement	dpt	"The settlement date (mandatory)."
Tag	Maturity	dpt	"The maturity date (mandatory)."
Tag	Frequency	npt	"The frequency of the coupon, 1=annual, 2=semiannual, 4=quarterly (mandatory)."
Tag	Basis	npt	"The type of count to use. The format is days-in-month/days-in-year where 0 (default)=30/360, 1=actual/actual, 2=actual/360, 3=actual/365."
Desc
IPar	"The " IntMod:FinCoupon " module performs the various calculations as called for by the Tagged Results."
Examples
EX	FinCoupon(DaysBS? Settlement::D:960125 Maturity::D:971115 Frequency::2)
EX	FinCoupon(DaysS? Settlement::D:960125 Maturity::D:971115 Frequency::2)
EX	FinCoupon(DateAS? Settlement::D:960125 Maturity::D:971115 Frequency::2)
EX	FinCoupon(NumSM? Settlement::D:960125 Maturity::D:971115 Frequency::2)
EX	FinCoupon(DateBS? Settlement::D:960125 Maturity::D:971115 Frequency::2)
Mod	FinCvtDec	Converts a Fractional Dollar To Decimal	Financial
Usage	dollars	"fracdol frac"
Params	dollars	"The dollar amount in decimal format"
Params	fracdol	"A dollar amount expressed as a fractional amount."
Params	frac	"The fractional units (denominator), usually 4, 8, or 16."
Desc
Ipar	"Converts a fractional representation of dollars to standard decimal form. In the fractional form, the decimal value reflects, typically, an eighth or sixteenth. For example 1.04 with a base of 16 is really 1 + 4/16 = 1.25."
Examples
EXWD	FinCvtDec( 1.08 16 )	returns 1.50 (8/16 = .5)
EXWD	FinCvtDec( 1.1 4 )	returns 1.25 (1/4 = .25)
Mod	FinCvtFrac	Converts Decimal Dollar to Fractional Equivalent	Financial
Usage	fracdol	"dollars frac"
Params	fracdol	"The dollar amount in fractional format."
Params	dollars	"A dollar amount in decimal (normal) format."
Params	frac	"The fraction denominator, usually 4, 8, or 16."
Desc
IPar	"This module is the inverse of " IntMod:FinCvtDec ". It converts from standard decimal form to a fractional form."
Examples
EXWD	FinCvtFrac( 1.50 16 )	returns 1.08 (.50 = 8/16)
EXWD	FinCvtFrac( 1.125 8 )	returns 1.1 (.125 = 1/8)
Mod	FinDays360	Returns Days Between Two Dates on a 12/30 Calendar	Financial
Usage	days	"date1 date2"
Params	days	"The number of days between the two dates"
Params	date1	"The starting date"
Params	date2	"The ending date."
Desc
IPar	"This module calculates the number of days, on a 12 month/30 day calendar, between two dates. In this calendar format each month has exactly 30 days and there are exactly 360 days in each year."
Examples
EXWD	FinDays360(Date:960101 Date:970101)	returns 360
EXWD	FinDays360(Date:970201 Date:970301)	returns 30
EXWD	FinDays360(Date:960201 Date:960101)	returns 0 (second is less than first)
Mod	FinDep	Calculates Various Depreciation Schedules	Financial
Usage	depamt	"arg arg ..."
Params	depamt	"The calculated depreciation amount."
Params	arg	"Tagged arguments listed below."
Tag	Cost	npt	"The initial cost."
Tag	Factor	npt	"The depreciation factor (if not specified then 2)."
Tag	Life	npt	"The number of periods in the life of the asset."
Tag	Partial	npt	"The number of months in the partial starting year (if not specified then 12)."
Tag	Period	npt	"The period to calculate the depreciation."
Tag	Salvalge	npt	"The salvage value (if not specified then 0)."
Tagres	DDB	"Use Double-Declining-Balance method."
Tagres	FDB	"Use the Fixed-Declining-Balance method."
Tagres	SLN	"Use Straight-LiNe method."
Tagres	SYD	"Use the Sum-of-Years-Depreciation method."
Desc
IPar	"This module is used to calculate depreciation amounts or schedules in a variety of ways as determined by its tagged arguments. The following sections describe the various depreciation methods."
IPar	"Double Declining Balance"
IPar	"This method calculates depreciation at an accelerated rate meaning that more is depreciated at the beginning of the life than at the end. The formula used to calculate is " ImgGif:FinDep1 ". For the last period the depreciation equals the remaining value (Cost-Salvage-Sum of prior years depreciation)."
IPar	"Fixed Declining Balance"
IPar	"Straight Line Depreciation"
IPar	"This is the simple straight-line depreciation method where the depreciation amount is constant throughout the life of the asset. The formula for calculating, assuming a full first year is " ImgGif:FinDep2 ". When there is a partial first year then the formula for that year is " ImgGif:FinDep3 ". The formula for the remaining periods is " ImgGif:FinDep4 ". and the final period is " ImgGif:FinDep5 "."
IPar	"Sum of Years Depreciation"
IPar	"This method calculates depreciation via the sum-of-years method given by the formula-" ImgGif:FinDep6 
Examples
EXWD	FinDep(SLN? Cost::100 Life::10)	Num:10
EXWD	FinDep(DDB? Cost::100 Life::10 Period::2)	Num:16
EXWD	FinDep(DDB? Cost::100 Life::10 Period::1)	Num:20
Mod	FinFVSched	Calculates Future Value Based on List of Varying Rates	Financial
Usage	fv	"principal " param:list ""
Params	fv	"The calculated future value."
Params	principal	"Initial starting principal"
Params	list	"A list of periodic interest rates. It is assumed that the periods are the same for each rate."
Desc
IPar	IntMod:FinFVSched " calculates the future value of the initial principal after applying a list of compounded interest rates."
Examples
EXWD	FinFVSched(1 (.09 .11 .1))	Num:1.331
Mod	FinIntRate	Calculates Interest Rates	Financial
Usage	rate	"arg arg ..."
Params	rate	"The calculated interest rate as determined by Tagged Result."
Params	arg	"A tagged argument, see below."
Tag	Compounds	npt	"The number of compounds. If none specified then continuous compounding is assumed."
Tag	Effective	npt	"The effective interest rate."
Tag	Inflation	npt	"The inflation rate (default is 0.0)"
Tag	Nominal	npt	"The nominal interest rate."
Tag	TaxRate	npt	"The effective tax rate (default is 0.00)"
Tagres	Effective	"Returns the effective interest rate. Required tags are Nominal. Optional tags are Compounds, Inflation, and TaxRate."
Tagres	Nominal	"Returns the nominal interest rate. Required tags are Effective and Compounds."
Desc
IPar	"This module determines various interest rates based on the tagged result and tagged arguments. The examples below show the types of calculations that can be performed with this module."
Examples
EXWD	FinIntRate(Effective? Nominal::.08 Compounds::12)	Num:0.0829995
Mod	FinIRR	Internal Rate of Return on List of Cash Flows	Financial
Usage	rate	"list"
Usage	rate	"tagarg"
Params	rate	"Calculated rate of return."
Params	list	"A list of cash flows."
Params	tagarg	"One or more tagged arguments below."
Tag	Enum	list	"A list of points to enumerate through."
Tag	First	num	"The first point to be used in the calculation (typically a negative cash outflow)."
Tag	Values	isct	"An intersection to be evaluated for each point in the " tag:Enum "::" param:list ". The resulting list is used as the numeric " param:list " for the calculation."
Desc
IPar	"This module returns, through an iterative calculation, the internal rate of return for a list of period cash flows. Payments are represented by negative values, income as positive values."
Examples
EXWD	FinIRR( (-100 15 25 10 10 25 22) )	Num:0.0187956
EXWD	FinIRR( (15 25 10 10 25 22) First::-100 )	same as above
Mod	FinNPV	Net Present Value on List of Cash Flows	Financial
Usage	npv	"rate cashflow"
Params	npv	"The calculated net-present-value"
Params	rate	"The discount rate for one period of the investment."
Params	cashflow	"A list of cash flows (payments are negative, income is positive)"
Desc
IPar	IntMod:FinNPV " calculates the net present value of an investment based on a list of cash flows and discount rate. The formula used is " ImgGif:FinNPV
Examples
EXWD	FinNPV( .012 (-40 20 15 -10 5 18) )	Num:6.4856
Mod	FinSecDisc	Discount Rate for a Security	Financial
Usage	value	"tagarg tagarg ..."
Params	value	"The discount rate of the security."
Params	tagarg	"One of the tagged arguments below."
Tag	Settlement	dpt	"The settlement date of the security."
Tag	Maturity	dpt	"The maturity date."
Tag	Price	npt	"The initial purchase price of the security"
Tag	Redemption	npt	"The redemption value of the security."
Tag	Basis	npt	"The calendar basis for the calculations (0 for 30/360, 1 for actual/actual, 2 for actual/360, and 3 for actual/365). The Default is 0."
Desc
IPar	IntMod:FinSecDisc " returns the discount rate of a security."
Examples
Mod	FinSecDur	Duration of a Security	Financial
Usage	value	"tagres tagarg tagarg ..."
Params	value	"The calculated duration as specified by " param:tagres "."
Params	tagres	"One of the tagged results listed below."
Params	tagarg	"One or more of the tagged arguments below depending on " param:tagres "."
Tagres	Macaulay	"Calculates the Macaulay duration for a security."
Tagres	Modified	"Calculates the modified Macaulay duration for a security."
Tag	Basis	npt	"The calendar basis for the calculations (0 for 30/360, 1 for actual/actual, 2 for actual/360, and 3 for actual/365). The Default is 0."
Tag	Coupon	npt	"The annual coupon rate."
Tag	First	dpt	"The date of first coupon payment (defaults to first coupon date after settlement)."
Tag	Frequency	npt	"The number of coupon payments per year: 1, 2, or 4."
Tag	Issue	dpt	"The issue date (defaults to Settlement)."
Tag	Maturity	dpt	"The maturity date."
Tag	Settlement	dpt	"The settlement date of the security."
Tag	Yield	npt	"The annual yield."
Desc
IPar	"This module returns the Macaulay duration (or modified) for a security. It can be used as a measure of a bond price's response to any changes in the yield."
Examples
Mod	FinSecInt	Accrued Interest (or Rate) for a Security	financial
Usage	value	"tagres tagarg tagarg ..."
Params	value	"The calculated interest as specified by " param:tagres "."
Params	tagres	"One of the tagged results listed below."
Params	tagarg	"One or more of the tagged arguments below depending on " param:tagres ""
Tagres	Maturity	"Returns the accrued interest of a security paying interest at maturity. The required tag are Issue, Rate, and Settlement. Optional tags are Basis and Par."
Tagres	Periodic	"Calculates the accrued interest of a security paying periodic interest. Required tags are Basis, Coupon, First, Frequency, Issue, and Settlement. Optional are Par and Basis."
Tagres	Rate	"Returns the interest rate for a fully invested security. Required tags are Investment, Maturity, Redemption, and Settlement."
Tag	Basis	npt	"The calendar basis for the calculations (0 for 30/360, 1 for actual/actual, 2 for actual/360, and 3 for actual/365). The default is 0."
Tag	Coupon	npt	"The annual coupon rate."
Tag	First	dpt	"The date of the first interest."
Tag	Frequency	npt	"The number of coupon payments per year."
Tag	Investment	npt	"The amount invested in the security."
Tag	Issue	dpt	"The security's issue date."
Tag	Maturity	dpt	"The maturity date."
Tag	Par	npt	"The securities par value, default is $100."
Tag	Rate	npt	"The annual coupon rate."
Tag	Redemption	npt	"The redemption value, or amount to be received at maturity."
Tag	Settlement	dpt	"The settlement date of the security."
Desc
IPar	"This module performs various interest calculations for a security."
Examples
Mod	FinSecPrice	Price of a Security	Financial
Usage	value	"tagres tagarg tagarg ..."
Params	value	"The calculated price as specified by " param:tagres "."
Params	tagres	"One of the tagged results listed below."
Params	tagarg	"One or more of the tagged arguments below depending on " param:tagres "."
Tagres	Discount	"Return the price of a discounted security. Required tags are Discount, Maturity, Redemption, and Settlement. Basis is optional."
Tagres	Maturity	"Return the price of a security paying interest at maturity. Required tags are Issue, Maturity, Rate, Settlement, and Yield. Basis is optional."
Tagres	OddFirst	"Calculate the price of a security with an odd first period. Required tags are First, Frequency, Issue, Maturity, Rate, Settlement, and Yield. Basis is optional."
Tagres	OddLast	"Calculate the price of a security with an odd last period. Required tags are Frequency, Issue, Last, Maturity, Rate, Redemption, Settlement, and Yield. Basis is optional."
Tagres	Periodic	"Returns the price of a security paying periodic interest. Required tags are Frequency, Maturity, Rate, Redemption, Settlement, and Yield. Basis is optional."
Tag	Basis	npt	"The calendar basis for the calculations (0 for 30/360, 1 for actual/actual, 2 for actual/360, and 3 for actual/365). The default is 0."
Tag	First	dpt	"The date of the first interest."
Tag	Frequency	npt	"The number of coupon payments per year."
Tag	Issue	dpt	"The security's issue date."
Tag	Last	dpt	"The security's last coupon date."
Tag	Maturity	dpt	"The maturity date."
Tag	Rate	npt	"The annual coupon rate."
Tag	Redemption	npt	"The redemption value, or amount to be received at maturity."
Tag	Settlement	dpt	"The settlement date of the security."
Tag	Yield	npt	"The annual yield."
Desc
Examples
Mod	FinSecRcvd	Amount Received for a Security	Financial
Usage	value	"tagarg tagarg ..."
Params	value	"The amount received at maturity for a fully invested security."
Params	tagarg	"One of the tagged arguments below. Note that all of the tags below must be given with the exception of Basis."
Tag	Basis	npt	"The calendar basis for the calculations (0 for 30/360, 1 for actual/actual, 2 for actual/360, and 3 for actual/365). The default is 0."
Tag	Discount	npt	"The discount rate"
Tag	Investment	npt	"The amount invested in the security."
Tag	Maturity	dpt	"The maturity date."
Tag	Settlement	dpt	"The settlement date of the security."
Desc
Examples
Mod	FinSecYield	Calculates the Yield of a Security	Financial
Usage	value	"tagres tagarg tagarg ..."
Params	value	"The calculated yield as specified by " param:tagres "."
Params	tagres	"One of the tagged results listed below."
Params	tagarg	"One or more of the tagged arguments below depending on " param:tagres ""
Tagres	Discount	"Return the annual yield of a discounted security. Required tags are Maturity, Price, Redemption, and Settlement. Basis is optional."
Tagres	Maturity	"Return the annual yield of a security paying interest at maturity. Required tags are Issue, Maturity, Price, Rate, and Settlement. Basis is optional"
Tagres	OddFirst	"Calculate the annual yield of a security with an odd first period. Required tags are First, Frequency, Issue, Maturity, Price, Rate, Redemption, and Settlement. Basis is optional."
Tagres	OddLast	"Calculate the annual yield of a security with an odd last period. Required tags are Frequency, Issue, Last, Maturity, Price, Rate, Redemption, and Settlement. Basis is optional."
Tagres	Periodic	"Returns the yield of a security paying periodic interest. Required tags are Frequency, Maturity, Price, Rate, Redemption, and Settlement. Basis is optional."
Tag	Basis	npt	"The calendar basis for the calculations (0 for 30/360, 1 for actual/actual, 2 for actual/360, and 3 for actual/365). The default is 0."
Tag	First	dpt	"The date of the first interest."
Tag	Frequency	npt	"The number of coupon payments per year."
Tag	Issue	dpt	"The security's issue date."
Tag	Last	dpt	"The security's last coupon date."
Tag	Maturity	dpt	"he maturity date."
Tag	Price	npt	"The price paid for the security."
Tag	Rate	npt	"The annual coupon rate."
Tag	Redemption	npt	"The redemption value, or amount to be received at maturity."
Tag	Settlement	dpt	"The settlement date of the security."
Desc
Examples
Mod	FinTBill	T bill Calculations	Financial	
Usage	result	"tagres arg arg ..."
Params	result	"Result of calculation as determined by " param:tagres"."
Params	tagres	"One of the tagged results points listed below indicating type of calculation."
Params	arg	"One or more of the tagged arguments described below."
Tagres	BondEqYield	"Calculate the bond-equivalent yield."
Tagres	Price	"Calculate the price per $100 face value."
Tagres	Yield	"Calculate the yield."
Tag	Discount	npt	"The discount rate."
Tag	Maturity	dpt	"The maturity date."
Tag	Price	npt	"The price per $100."
Tag	Settlement	dpt	"The settlement date."
Desc
IPar	"The " IntMod:FinTBill " module performs various calculations commonly used with treasury bills"
Examples
EXWD	FinTBill(BondEqYield? Settlement::D:960115 Maturity::D:961230 Discount::.093)	Num:0.103518
EXWD	FinTBill(Price? Settlement::D:960115 Maturity::D:961230 Discount::.093)	Num:91.0875
Mod	FinTVM	Performs Various Time Value of Money Calculations	Financial
Usage	result	"restag arg arg ..."
Params	result	"The result of the module- a number or date depending on " param:restag "."
Params	restag	"One of the tags listed below indicating the desired result."
Params	arg	"Tagged arguments as described below."
Tagres	FV	"Calculate the future value."
Tagres	IPmt	"Calculate the interest portion of a payment."
Tagres	Periods	"Calculate the number of periods."
Tagres	Pmt	"Calculate the periodic payment."
Tagres	PPmt	"Calculate the principal portion of a payment."
Tagres	PV	"Calculate the present value."
Tagres	Rate	"Calculate the periodic interest rate."
Tag	EPeriod	dpt	"The ending period for cumulative calculations (for IPmt? and PPmt? calculations)."
Tag	FV	npt	"The future value, default is 0."
Tag	Nth	npt	"The particular period (for IPmt? and PPmt? calculations)"
Tag	Periods	npt	"The number of periods."
Tag	Pmt	npt	"The periodic payment."
Tag	PV	npt	"The present value."
Tag	Rate	npt	"The periodic interest rate."
Tag	SPeriod	dpt	"The start period for cumulative calculations (for " TagResName:IPmt " and " TagResName:PPmt ")."
Desc
IPar	"The " IntMod:FinTVM " module, in its basic form, takes four of the five tagged arguments: FV, Periods, Pmt, PV, and Rate and calculates the fifth. When calculating IPmt and PPmt, either the Nth argument or both the EPeriod and SPeriod arguments must be specified. The equations used in these calculations are-" ImgGif:FinTVM
Examples
IPar	"The first example below returns the present value (" TagResName:PV "). The second returns the future value (" TagResName:FV "). The third example returns the sum of all principal payments which should equal the present value of 1400. The next two examples return the cumulative interest payments for periods 13 through 24 and for just period 1. The last two return cumulative principal payments for the same periods."
EX	"FinTVM( Rate::.01 Pmt::-100 FV::0 Periods::12 PV? )"
EX	"FinTVM( FV? Rate::.01 Pmt::-100 PV::1000 Periods::12 )"
EX	"Sum(EnumCL(Int:1..12 @FinTVM(PPmt? Rate::.01 PV::1400 Periods::12 Nth::Int*)))"
EX	"FinTVM(IPMT? Rate::.0075 PV::125000 Periods::360 SPeriod::13 EPeriod::24 )"
EX	"FinTVM(IPMT? Rate::.0075 PV::125000 Periods::360 SPeriod::1 EPeriod::1 )"
EX	"FinTVM(PPmt? Rate::.0075 PV::125000 Periods::360 SPeriod::13 EPeriod::24 )"
EX	"FinTVM(PPmt? Rate::.0075 PV::125000 Periods::360 SPeriod::1 EPeriod::360 )"
Mod	Flatten	Flattens Multiple Points into a Single Point	V4Int
Usage	truept	"tag dim<sub>1</sub> dim<sub>2</sub> ..."
Usage	flatpt	"point<sub>1</sub> point<sub>2</sub> ..."
Params	truept	"Logical:True is returned when this module is used to define a flatten pattern."
Params	flatpt	"The resulting flattened point derived from the argument points."
Params	point<sub>n</sub>	"The points to be flattened."
Tag	Target	dim	"This argument defines the target dimension when defining a flatten pattern. If given then all \
other arguments must be dimension points."
Desc
IPar	"This module is used to combine multiple points into a single (flattened) point. It is to be used in conjunction \
with the " IntMod:Tally " module when grouping with multiple " TagName:By " points results in slow performance or errors."
IPar	IntMod:Flatten " is normally called once to define a flatten pattern. This is done by calling the module with \
two or more dimension points. An optional " TagName:Target " dimension may be specified. If no target is given then the \
target dimension becomes Dim:UBlob."
IPar	"Once a flatten pattern is defined then any subsequent bindings are checked for points within the pattern. If a \
match is found (all points in the pattern occur within the binding), the points are removed from the binding and the flattened \
point is inserted. This occurs with all bindings including those at the end of a " IntMod:Tally " operation."
IPar	"When bindings of the form [<i>nidpoint point<sub>1</sub> point<sub>2</sub></i>]=<i>value</i> are constructed \
V4 will automatically construct another binding of the form [<i>nidpoint dim<sub>1</sub>.. dim<sub>2</sub>..</i>=[<i>nidpoint</i> \
Flatten(<i>dim<sub>1</sub>* dim<sub>2</sub>*</i>)]."
IPar	"The net-net of all this is that the " IntMod:Flatten " module can be called once to define a pattern and that \
no other actions or code changes need be done to a V4 analysis."
Examples
IPar	"Suppose a " IntMod:Tally " such as the one below fails because there are too many combinations of dim.attr2 and dim.attr3 \
values (and that dim.attr2 results in points on Dim:Dim2 and dim.attr3 results in points on Dim:Dim3)."
EX	"Tally(dim.. (Sum:dim.attr1 By::(dim.attr2 dim.attr3) Bind::sum23))
IPar	"The addition of the " IntMod:Flatten " below creates a pattern that is detected when new bindings are made. Additionally, \
a binding is created (shown below) that automatically links the Tally results to the new Flatten module."
EX	"Flatten(Dim:Dim2 Dim:Dim3)"
EX	"[sum23 Dim2.. Dim3..] = [sum23 Flatten(Dim2* Dim3*)]"
Mod	Format	Format a Point for Display	Math String DateTime
Usage	respt	"argument tagarg ..."
Params	respt	"The formatted/altered number, may be alpha or numeric depending on " param:tagargs "."
Params	argument	"A point to be formatted or any V4 point to be converted to a string (or other V4 point)."
Params	tagarg	"One or more of the tagged arguments below."
Tagres	Point	"Returns a string corresponding to the dimension & point value of the first argument."
Index	CSV	Module	Str("v4refmod_f.htm#IntMod:Format")	Format	CSV
Tagres	CSV	"Format the point as a valid CSV value."
Tag	Round	npt	"Round number to specified precision."
Tag	Left	width	"Left justifies result in string " Param:width " spaces."
Tag	Right	width	"Right justifies result in string " Param:width " spaces."
Tag	Center	width	"Centers result in string " Param:width " spaces."
Tag	Dim	dimension	"Format the subsequent arguments according to the parameters for " Param:dimension " as \
declared in the last " IntMod:SSDim " module call. Multiple dimensions may be included in a single " IntMod:Format " call \
to specify any manner of embedded formating. See example below."
Tag	Value	string	"Return the " Param:string " as the formatted result."
Tag	LT	num	"Skip the next formatting if current numeric " Param:argument " is not less than " Param:num "."
Tag	LE	num	"Skip the next formatting if current numeric " Param:argument " is not less or equal to " Param:num "."
Tag	EQ	num	"Skip the next formatting if current numeric " Param:argument " is not equal to " Param:num "."
Tag	GE	num	"Skip the next formatting if current numeric " Param:argument " is not greater than or equal to " Param:num "."
Tag	GT	num	"Skip the next formatting if current numeric " Param:argument " is not greater than " Param:num "."
Tag	NE	num	"Skip the next formatting if current numeric " Param:argument " is not equal to " Param:num "."
Tag	Num	repeat	"Repeat the current string " Param:repeat " times (for example to create any number of spaces for indenting, or a list of dashes \
for a table of contents."
TagRes	Range	"Converts the point specification to a text range (see examples below). The specific wording for this option \
is found in the V4 error message file (V4ErrorMsgTable.v4i) under the entries- FormatRng<i>xxx</i>. For example the wording for \
greater-equal would be under then entry FormatRngGE, for equal it is FormatRngEQ, etc."
Tag	Mask	mask	"Converts the " Param:argument " according to the specifications of the " Param:mask ". \
V4 supports masks for telephone numbers, numerics, dates, date-times, and months. See the table below for more details. \
A mask may be given in three parts for numeric formating. The parts are delimited with a semicolon. The first part \
is for formatting positive numbers. The second is for negative numbers and the third for zero. If only two formats are \
specified then zero is formatted as a positive number. A mask may be given in two parts for dates. The first part is for \
real dates, the second for 'no date'. When a format is given for a zero or 'no date' then the actual format string is \
returned (i.e. it is not considered a format mask but a string to use)."
Tag	Mask	cmask	"If a mask string begins with the percent symbol ('%') then it is assumed to be a <a href='http://www.die.net/doc/linux/man/man3/printf.3.html' target=_blank>C-language format expression</a>."
Tag	RDB	rdbtype	"Formats the first argument to be a valid SQL value for the specified " Param:rdbtype ". The supported \
database types are <b>MIDAS</b>, <b>MSAccess</b>, <b><MYSQL></b>, <b><iSeries></b> and <b>Oracle</b>. See the " Command:Dimension " attribute <b>RDBNumeric</b> to force formatting \
of internal values. If the point belongs to an alpha dimension with the <b>CaseSensitive</b> attribute and the " Param:rdbtype " is <b>MYSQL</b> then the keyword 'binary' is inserted to force case-sensitive matching."
Tag	RDBId	rdbtype	"Formats an SQL column identifier according to the syntax required by the " Param:rdbtype " engine. For example, mySQL identifiers are enclosed within back-tics (`<i>xxx</i>)."
Tag	RDBw	rdbtype	"Similar to the " TagName:RDB " tag except that it is intended for formatting values to be included in an SQL WHERE clause. \
The " TagName:RDB " tag is only defined for single points, the " TagName:RDBw " tag is defined for single points, and point references that incorporate \
greater than, less than, not equal, etc. V4 formats only the single value in the point reference."
Index	Access	General	Str("v4refmod_f.htm#IntMod:Format")
Index	MSAccess	General	Str("v4refmod_f.htm#IntMod:Format")
Index	Oracle	General	Str("v4refmod_f.htm#IntMod:Format")
Tag	Round	decimals	"Rounds the numeric " Param:argument " to the specified number of decimal places. " Param:decimals " must be between 0 and 8."
Tag	Round	tens	"Rounds the numeric " Param:argument " to the specified power of ten."
Tag	Table	name	"Creates a string formatted according to the table " Param:name ". The first argument point \
is the <i>owner</i> point of the table."
Tag	Maximum	len	"Truncate the string to " Param:len " characters if necessary. If a " TagName:Fill " string is given then append that string to the end \
of the truncated string such that the resulting string is exactly " Param:len " characters in length."
Tag	Fill	char	"Use the character " Param:char " as the fill character(s) with the " Tag:Left ", " Tag:Right ", & " Tag:Center " tagged arguments. The default is \
to fill with spaces."
Tag	Fill	string	"Use this " Param:string " as a suffix with the " TagName:Maximum " tag when the string exceeds the specified maximum length."
TagRes	UTC	"Formats the first argument, which must be a " PntType:UDate ", " PntType:DateTime ", or " PntType:Calendar ", according \
to the Javascript <a href='http://developer.mozilla.org/en/docs/Core_JavaScript_1.5_Reference:Global_Objects:Date:toUTCString' target=_blank>toUTCstring()</a> function."
TagRes	XML	"Formats the first argument as a valid argument for remote procedure calls."
Desc
IPar	"The " IntMod:Format " module formats V4 points in a variety of ways. The formatting is always applied to the \
first argument. One or more of the tagged arguments is specified to perform the required formatting. \
The arguments " Tag:Left ", " Tag:Right ", and " Tag:Center " are used to position the result within a given width. \
The comparison tags are used for conditional formatting. If the condition is met then the next tagged argument is \
used for formatting. If the condition is not met then the next argument is skipped and the following one is used."
IPar	"A value normally takes as many positions as is necessary to fully represent the value. The tags mentioned above \
may be used to position a value within a fixed column width. If a width (via " Tag:Left ", " Tag:Right ", or " Tag:Center " is \
specified before a " Tag:Mask " argument AND the resulting value will not fit within a given width then the \
module fails. If a width is specified after the mask then the formatted value is truncated to fit."
IPar	"This module operates on various types of points. The " Tag:Left ", " Tag:Right ", and " Tag:Center " tags require \
that the first argument be a string. V4 will convert non-string points to Dim:Alpha if necessary. If this occurs the result \
is returned as a point on Dim:Alpha."
Table	Numeric Formatting Characters	50	0	#E6E6C0
TE	"Pattern" "Meaning"
TE	"#" "Defines a numeric position."
TE	"." "Defines the decimal position or the thousands delimiter as specified by the<br>current country setting (see Locale)."
TE	"0" "Defines leading zero-filled positions before the decimal point and number of<br> places after the decimal point."
TE	"," "Delimits the thousands positions or the decimal point. The meaning depends on<br>\
the current country setting for V4 (see Locale). Some countries use this<br>\
as to separate every three digits, other countries use it for marking the<br>\
decimal point."
TE	"_" "Mark the position of the thousands' delimiter. The default for Country:USA is to<br>then insert commas every three places. \
Other countries may insert spaces or periods."
TE	"!" "Mark the position of the decimal point. The actual character used depends on the<br>\
current country setting. The default for Country:USA<br> is the period character."
TE	"(" "Enclose negative numbers within parentheses (default is to use leading minus sign)."
TE	"x" "Format number as hexadecimal."
TE	"o" "Format number as octal."
TE	"b" "Format number as binary."
TE	"th" "Display the number as an ordinal (e.g. 1st, 2nd, 3rd, 4th, etc.)."
TE	"w" "Display the number as written words (e.g. 123 as One hundred twenty three)."
TE	"[<i>color</i>]" "A color may be enclosed in brackets. This may be used to color positive or negative numbers (see example below)."
IPar	"Date & Time formatting"
Table	Date-Time Formatting Characters	50	0	#E6E6C0
TE	"Pattern" "Meaning"
TE	"mm" "Display the month as a two digit space filled number."
TE	"0m" "Display the month as a two digit zero filled number."
TE	"yy" "Display the year as a two digit zero filled number."
TE	"yyyy" "Display the year as a four digit century and year."
TE	"dd" "Display the day of the month as a two digit space filled number."
TE	"0d" "Display the day as a two digit zero filled number."
TE	"h" "Display the hour (0 - 23)."
TE	"H" "Display the hour (12 - 11)."
TE	"0h" "Display the hour zero filled."
TE	"a" "Display 'am' or 'pm'."
TE	"A" "Display 'AM' or 'PM'."
TE	"mmm" "Display the month as upper/lower case three letter month abbreviation."
TE	"MMM" "Display the month as upper case three letter abbreviation."
TE	"mmmm" "Display the month as upper/lower full month name."
TE	"MMMM" "Display the month as all upper case."
TE	"n" "Display the minutes (m is used for months!)."
TE	"0n" "Dislay the minutes as z zero filled number"
TE	"jjj" "Display the day in the year (1 through 365) as space filled number."
TE	"0jj" "Display the day as a zero filled number."
TE	"s" "Display the seconds."
TE	"f" "Display the fractional seconds."
TE	"0s" "Display the seconds zero filled."
TE	"www" "Display the day of the week as a three letter abbreviation."
TE	"wwww" "Display the day of the week."
TE	"WWW" "Display the day of the week as all upper case."
TE	"z" "Output the time zone as hhmm (hours/minutes) off of GMT."
TE	"p" "Display the period (1-4)."
TE	"q" "Display the quarter (1-4)."
TE	"k" "Displays the week number (1-52)."
TE	"all other" "All other characters are displayed as is allowing for many possible date displays. If a sub-portion of the mask \
is enclosed in double quotes then the characters between those quotes will be taken literally, not as format characters. The backslash \
may be used as an escape character within the nested quoted string. The format mask can be comprised of up to three semi-colon delimited sections. \
The first part corresponds to a fully defined telephone number, the second to a number without an area code, the third for formatting an empty phone number."
IPar	"Phone Number formatting"
Table	"Phone Number Formatting"	50	0	#E6E6C0
TE	"Pattern" "Meaning"
TE	"a" "Displays the area code"
TE	"c" "Displays the country code"
TE	"n" "Displays the number portion. Each digit of the number is represented by a single occurance of the 'n' character. Other characters can be used to delimit groups."
Examples
EXWD	Format(12.456 Round::2)	results in Num:12.46
EXWD	Format(123456 Mask::"#,###")	results in "123,456"
EXWD	Format(1234 Round::100)	results in 12
EXWD	Format(12345 mask::"#,###" center::12 Fill::"*")	results in "***12,345***".
EXWD	Format(-1234.3 Mask::"#,###.00;[RED](#,###.00)")	results in <span style='color:red;'>(1,234.30)</span>
EXWD	Format(UDate:010101 Mask::"mmmm d, yyyy")	results in "January 1, 2001"
EXWD	Format(UDate:#0 Mask::"mmmm d, yyyy")	results in an empty string
EXWD	Format(UDate:#0 Mask::"mmmm d, yyyy;none")	results in "none"
EXWD	Format(UWeek:200522 Mask::"yyyy\\" Week #\\"k")	results in "2005 Week #22"
EXWD	Format(1234 EQ::0 Value::"zip" Mask::"#,###")	results in "1,234" (or "zip" if first argument is 0)
EXWD	Format(Int* Mask::"#,###;#,###;zip")	also returns "zip" if Int* is 0
EXWD	Format(Int:>20 Range?)	results in "more than 20"
EXWD	Format(UMonth* Mask::"mmm")/UMonth:=UYear:{current}	returns the list ("Jan" "Feb" ... "Dec")
EXWD	Format(V4(ConnectTime?) Mask::"0n:0s.ffff")	results in (for example) "23:42.8320"
EXWD	Format("xo" Num::5)	"xoxoxoxoxo"
EXWD	Format(teleNum:6109899905  Mask::"c-aaa-nnn.nnnn")	results in "1-610-989.9905"
EXWD	Format(teleNum:none Mask::"c-aaa-nnn.nnnn;1-610-nnn-nnnn;*no phone*")	results in "*no phone*"
EXML	"Multiple Embedded Formatting Within a String"
ML	Dim Red,IBlue Alpha
ML	SSDim(Dim:Red TextColor::Red Dim:IBlue TextColor::Blue Style::Italic)
ML	EchoS(Format("now is " Dim:Red "the time " "for all " Dim:IBlue "good men"))
ML	results in "now is <font style='color: #ff0000; '>the time </font>for all </font><i><font style='color: #0000ff; '>good men</font></i>"
Mod	FTP	Put / Get Files via FTP	OSRel
Usage	result	"tagarg"
Params	result	"The result of the module which varies according to the arguments"
Params	tagarg	"One or more tagged arguments described below"
Tag	As	file	"The target file name for the get or put."
TagRes	Data	"The data to be sent/received is binary."
Tag	Get	file	"The name of the file to be gotten."
Tag	Get	list	"A list of filenames to be gotten."
Tag	Host	name	"The name or IP address of the host FTP server."
Tag	Local	directory	"The name of the local directory to connect to for the get/put operation."
Tag	Password	string	"The login password for the target FTP server."
Tag	Put	file	"The name of the file to be sent."
Tag	Put	list	"A list of files to be sent."
TagRes	Text	"The data to be sent/received is text."
Tag	Remote	directory	"The name of the remote directory to connect to."
Tag	Result	type	"The format of the returned result. If " Param:type " is <b>Bytes</b> then the total number of bytes sent/received is returned, \
if <b>Files</b> (the default) then the total number of files is returned, if <b>List</b>then a list of files is returned."
Tag	Trace	logical	"If TRUE then turn on tracing, FALSE (default) to disable tracing."
Tag	User	name	"The user name for the target FTP server."
Desc
IPar	"This module send/receives files to/from a remote host using the FTP file transfer protocol."
Examples
EXWD	FTP(Host::"remHost" Remote::"/user/holding" Local::"temp/" Get::"afile.v4" As::"moo.tmp" User::"vic" Password::"secret")	Gets file afile.v4 as moo.tmp
EXWD	FTP(Host::"192.196.222.332" Remote::"/user/holding" Put::(Alpha*)/OSFile("*.ini" ListOf?) User::"vic" Password::Secure(Value::"ftp.password") Result::list))	Sends a list of files
Mod	GE	Greater/Equal Test	RelLog
Usage	logical	"npt1 npt2"
Usage	res	"npt1 npt2 truept falsept"
Params	logical	"Logical:TRUE or FALSE depending on the result of the comparison."
Params	npt1	"A numerical point."
Params	npt2	"A numerical point."
Params	truept	"An optional point to be returned if " Param:npt1 " is greater than or equal to " Param:npt2 "."
Params	truept	"An optional point to be returned if " Param:npt1 " is not greater than or equal to " Param:npt2 "."
Desc
Ipar	"This module returns true if the first argument is greater than or equal to the second and false otherwise. " IntMod:GE " may also be used in a four value mode, see " IntMod:EQ " for a description."
IPar	"See " PntType:Real " for details on comparing floating point numbers."
Examples
EXWD	GE(100 Real:100.2)	results in Logical:FALSE
EXWD	GE(100 Real:100.2 hohoho boohoo)	results in NId:boohoo
EXWD	GE(10 5 @{1 + 2} @{3 + 4})	results in Int:3 (use quote to prevent unneccessary evaluations)
Mod	GT	Greater/Than Test	RelLog	
Usage	logical	"npt1 npt2"
Usage	res	"npt1 npt2 truept falsept"
Params	logical	"Logical:TRUE or FALSE depending on the result of the comparison."
Params	npt1	"A numerical point."
Params	npt2	"A numerical point."
Desc
IPar	"The " intmod:GT " module returns logical true if the first argument is greater than the second."
IPar	"See " PntType:Real " for details on comparing floating point numbers."
Examples
EXWD	GT(100 Real:100.2)	Logical:FALSE
Mod	Geo	Perform Geocoordinate Functions	OSRel DateTime
Usage	value	"geo1 [[geo2] geo3] tag"
Params	geo1	"A geocoordinate"
Params	geo2	"An optional second geocoordinate"
Params	geo3	"An optional third geocoordinate"
Params	tag	"One of the optional tagged arguments"
Tag	Dawn	date	"Returns the approximate time of dawn/sunrise for " Param:date " and the location specified in the first argument."
Tag	Dusk	date	"Similar to " Tag:Dawn " but returns the time of dusk/sunset."
Tag	Grid	num	"Determines the position of " Param:geo1 " within a grid of " Param:num " by " Param:num " cells \
with an upper left corner defined by " Param:geo2 " and a lower right corner defined by " Param:geo3 ". If " Param:num " is \
an " PntType:Int2 " point then the first number is the number of rows in the grid and the second is the number of columns. \
The result is an " PntType:Int2 " point of the form Int2:&lt;<i>row column</i>&gt;."
Tag	LunarAltitude	cal	"Returns the lunar altitude at the location specified by " Param:geo1 " at the \
date-time given by " Param:cal ". The result varies between -180 and +180 degrees. Moon rise and moon set correspond to zero degrees. If the first argument is a " PntType:UDate " \
or " PntType:DateTime " point then it is with respect to GMT, <b>not</b> local time."
TagRes	Direction	"Return the direction (from north) of the second geocoordinate with respect to the first. The result is in degrees."
Tag	Distance	fraction	"Returns the geocoordinate between the two coordinates that is a " Param:fraction " of the distance between the \
two. The " Param:fraction " is a number between 0 and 1 with 0 representing the first coordinate and 1 the second. A " Param:fraction " of 0.5 \
represents halfway between the two."
TagRes	Distance	"Return the distance between the two geocoordinates. The unit-of-measure can be set with the " TagName:UOM " tag option. The default is kilometers."
Tag	UOM	units	"Specifies the unit-of-measure when " TagResName:Distance " is requested. The " Param:units " value is determined by the entries in v4LanguageInfo.v4i \
in the v4_home directory. For English, the default units are M and MTR for meters, KM for kilometers (default), MI and MILES for miles, FT and FEET for feet, YD and YARDS \
for yards, NM and NMILES for nautical miles. Conversion to other units-of-measure can be found <a href='http://en.wikipedia.org/wiki/Conversion_of_units#Length' target='_blank'>here</a>."
Desc
IPar	"This module performs various operations on its arguments."
IPar	"Note that for the " Tag:Dawn " and " Tag:Dusk " options a complete geocoordinate is necessary (i.e. one with latitude, longitude, elevation, \
and time zone). The elevation is defaulted to 0 and the time zone is approximated from the longitude if missing."
EXWD	Geo(G:(40 01.052N 75 15.613W) G:(40 04.476N 75 24.630W) Distance?)	results in Num:14.2798625581959
EXWD	Geo(G:(40.1 -88.2) G:(21 25N 39 49E) Direction?)	results in Num:40 - the direction from Urbana IL to Mecca
EXWD	Geo(G:(40.0209 -76.26 150) Dawn::UDate:030320)	UCal:20-Mar-2003:06:07:03 - the time of dawn in Philadelphia,PA on 20-Mar-2003
EXWD	Geo(G:(40.2723 75.7620) G:(39.8187 74.8838) distance::0.50)	G:(40.0447 75.325 0 -)
Mod	GraphConnect	Connect Two Nodes on a Graph	DBase List
Usage	result	"list tagarg"
Usage	result	"tagarg"
Params	result	"The result varies on the arguments. It may be a list of nodes, or a list of lists when there are multiple connections."
Tag	AWhile	logical	"Evaluate " Param:logical " after each point in the " Tag:Enum " list. If the result of the evaluation is true then continue otherwise terminate. Note that this argument is tested after each point. " tag:While "::" param:isct " is used to test before each point."
Tag	Begin	node	"Defines the starting node for the connection"
Tag	Context	point	"For each enumeration point, V4 evaluates and inserts the " Param:point " into the current context. \
If the point is UV4:none then nothing is done (i.e. UV4:none is not placed into the context). This point can be inserted into the context by quoting it: Context::@UV4:none. If " Param:point " is UV4:Skip the current point is ignored entirely."
Tag	ContextP	point	"This is identical to the " TagName:Context " tag except that if " Param:point " evaluates to a list then each point in the list is inserted into the context."
Tag	Depth	num	"Limits the depth of the connection to a maximum of " Param:num " nodes."
Tag	Distance	dim	"The total path distance is 'returned' as a point in the context on dimension " Param:dim ". This dimension must \
be of type " PntType:Integer " or " PntType:Real ". This option only applies when performing the traveling salesman analysis."
Tag	Edge	node	"Defines the start and end nodes of an edge. The first " Tag:Edge " defines the beginning node and the second occurrence defines the ending node. \
At least two " TagName:Edge " arguments must be given. Any more than two assumes that the next edge is connected to the prior."
Tag	End	node	"The ending or target " Param:node " in the connection."
Tag	Enum	list	"The edges of the graph are to be determined by iterating through the " Param:list " and evaluating the " Tag:Edge " points for each element of the list."
Tag	If	logical	"Used in conjunction with the " Tag:Enum " argument to restrict points to those in which " Param:logical " evaluates to TRUE."
Tag	Maximum	weight	"Specifies the " Param:weight " of an edge and that the best connection between the start and end nodes is one that maximizes this " Param:weight "."
Tag	Metric	logical	"If TRUE (default) then distances on traveling salesman analysis with geocoordinates are in kilometers, if FALSE then in miles."
Tag	Minimum	weight	"Similar to " Tag:Maximum " except that the best connection is the one minimizing the edge weights."
Tag	OneWay	logical	"If this tag is given then it is evaluated for each edge in the graph. If the evaluation of " Param:logical " is TRUE then the edge is considered to be one-way. If it is FALSE or the " Tag:OneWay " tag is not given then the edge is assumed to be two-way."
Tag	Parent	pt	"Specifies the parent point. See " IntMod:Enum " for a complete description."
Tag	PIf	isct	"Specifies a test based on the parent. See " IntMod:Enum " for a complete description."
Tag	Result	num	"Return up to a maximum of " Param:num " resultant connections."
Tag	Route	num	"The number of iterations to optimize on traveling salesman route through all nodes."
Tag	Until	isct	Param:isct " is evaluated for each point in the " param:list ". If the result is false, then " IntMod:Enum " continues. If it is true, " IntMod:Enum " immediately stops processing the point and all subsequent points."
Tag	While	isct	Param:isct " is evaluated for each point in the " param:list ". If the result is true, then " IntMod:Enum " continues. If it is false, " IntMod:Enum " immediately stops processing the point and all subsequent points."
Tag	X	isct	Param:isct " is evaluated for each point in the " param:list " to obtain the X coordinate of a node (Traveling Salesman Analysis only)."
Tag	Y	isct	Param:isct " is evaluated for each point in the " param:list " to obtain the Y coordinate of a node (Traveling Salesman Analysis only)."
Desc
IPar	"This module performs two basic analyses. The first is determining a path from one point on a graph to another. The second type of analysis is \
know as the <i>Traveling Salesman Problem</i>. This analysis returns the shortest path to take to visit all nodes in a graph. Note that the algorithm used \
is not guarenteed to return the theoretical shortest path as this becomes prohibitively expensive as the number of nodes increases (on the order of N! where \
N is the number of nodes!). See the <a href='http://en.wikipedia.org/wiki/Traveling_salesman_problem' target=_blank>Wikipedia article</a> or <a href='http://www.tsp.gatech.edu/' target=_blank>here</a> \
for more information on the general problem."
IPar	"This first use of this module is as a generalized function for finding one or more connections in a graph. The edges of a graph may be weighted \
with the search returning connections with minimal and/or maximal weights. The module can search for several min/max solutions at once. Typical uses \
include finding the shortest (in time or distance) path between two points in a geocoordinate database."
IPar	"The traveling salesman analysis is triggered when the " TagName:Route " option is given. This specifies the number of iterations to take to find \
the shortest path. The greater the number of iterations, the better the chances of getting the optimal solution. The handling of nodes is slightly different \
in this mode of the function. The iterating list can take on three different forms. If the elements are " PntType:Int2 " points then they are assumed \
to be points on an X-Y plane. If the elements are " PntType:Geocoordinate "s then those are the assumed positions of the <i>nodes</i>. Any other type of point is \
injected into the context and the " TagName:X " and " TagName:Y " arguments are evaluated to obtain the X and Y coordinates for that node."
Index	traveling salesman	General	Str("v4refmod_g.htm#IntMod:GraphConnect")	GraphConnect	IntMod
EXWD	[Nodes] ( Int2:<3 4> :<1 1> :<6 6> :<3 2> :<5 5> :<0 5> :<1 3> :<6 2> :<3 6> :<4 3>)	Define a set of points on an X-Y plane
EXWD	GraphConnect([Nodes] Route::10 Distance::Num)	Calculate shortest path and return as a list, Num* updated with total path length
EXWD	List([Nodes] Nth::Int*)/GraphConnect([Nodes] Route::10)	Same as above but list the X-Y positions
Mod	GuiAlert	Display an alert box with message	OSRel
Usage	value	"message"
Params	value	"This module always returns Logical:True."
Params	message	"The message to be displayed."
Desc
IPar	"This module opens up an alert window displaying the specified " Param:message ". The user must click the OK button in the window to close the window and resume the V4 process. \
If multiple arguments are given then they are concatenated into a single message string."
IPar	"Currently this module is supported only on Windows-based operating systems."
Examples
EX	GuiAlert(Str("The value of Student* is " Student*))
EXWD	GuiAlert("The value of Student* is " Student*)	same as above
Mod	GuiMsgBox	Display a popup message window	OSRel
Usage	button	"tag"
Params	button	"A point on Dim:UV4 indicating which button was clicked to close the window. The value will be one of the \
following: ABORT, CANCEL, IGNORE, NO, OK, RETRY, or YES."
Params	tag	"One or more of the following tagged arguments."
Tag	Filter	list	"A list of lists used with the FileOpen and FileSave message box types. Each element of " Param:list " must itself be a list \
containing two components: the first being a text description and the second being a file extension. These extensions and corresponding descriptions \
appear in the file open box as possible selection filters."
Tag	Icon	type	"Defines the type of icon to be displayed in the window. " Param:type " must be one of: Exclamation, Hand, Information, Question, or Stop."
Tag	Message	text	"The message to be displayed in the window. A non-tagged text string is also assumed to be the message."
Tag	Title	text	"The window title, the default value is <i>V4 Message</i>."
Tag	Type	type	"Determines the type of message box and buttons available to close the window. The " Param:type " \
must be one of: AbortRetryIgnore, OK, FileOpen, FileSave, RetryCancel, YesNo, or YesNoCancel."
Index	AbortRetryIgnore	General	Str("v4refmod_g.htm#IntMod:GuiMsgBox")	GuiMsgBox	IntMod
Index	OK	General	Str("v4refmod_g.htm#IntMod:GuiMsgBox")	GuiMsgBox	IntMod
Index	FileOpen	General	Str("v4refmod_g.htm#IntMod:GuiMsgBox")	GuiMsgBox	IntMod
Index	FileSave	General	Str("v4refmod_g.htm#IntMod:GuiMsgBox")	GuiMsgBox	IntMod
Index	RetryCancel	General	Str("v4refmod_g.htm#IntMod:GuiMsgBox")	GuiMsgBox	IntMod
Index	YesNo	General	Str("v4refmod_g.htm#IntMod:GuiMsgBox")	GuiMsgBox	IntMod
Index	YesNoCancel	General	Str("v4refmod_g.htm#IntMod:GuiMsgBox")	GuiMsgBox	IntMod
Desc
IPar	"The " IntMod:GuiMsgBox " module pops up a message box and suspends V4 processing until the user acknowledges and closes the window. \
The value returned is determined by the button clicked by the user to close the window."
IPar	"Currently this module is supported only on Windows-based operating systems."
Examples
EXWD	GuiMsgBox("Do you want to continue?" Type::YesNo)	Returns UV4:Yes or UV4:No depending on the user's response. Note that a non-tagged text string is assumed to be the message.
Mod	HTTP	Send/Receive via HTTP Protocol	OSRel
Usage	value	"tagarg..."
Params	value	"The result depends on the tagged argument, usually the result of the HTTP call."
Params	tagarg	"One or more of the tagged argument described below."
Tag	Append	filename	"Append the returned results to the specified " Param:filename "."
Tag	Arg	string	"The arguments to be passed in this HTTP call."
Tag	ArgFile	filename	"The contents of " Param:filename " are passed as the arguments to the HTTP call."
Tag	ArgFile	name	"If the value to this tag is not a string but a dictionary point then it is taken as the name of a V4 stream that is to be used."
Tag	Bearer	string	"Adds an Authorization Bearer header to the HTTP request."
Tag	Certificate	list	"The " Param:list " is a three element list consisting of (<i>certificate-file</i> <i>cerficate-password</i> <i>ssl-cypher-list</i>). These are passed via the CURL \
<a href='http://curl.haxx.se/libcurl/c/CURLOPT_SSLCERT.html' target='_blank'>CURLOPT_SSLCERT</a>, <a href='http://curl.haxx.se/libcurl/c/CURLOPT_SSLCERT.html' target='_blank'>CURLOPT_KEYPASSWD</a> \
and <a href='http://curl.haxx.se/libcurl/c/CURLOPT_SSL_CIPHER_LIST.html' target='_blank'>CURLOPT_SSL_CIPHER_LIST</a> options."
Tag	Certificate	filename	"Pass the " Param:filename " via the CURL <a href='http://curl.haxx.se/libcurl/c/CURLOPT_SSLCERT.html' target='_blank'>CURLOPT_SSLCERT</a> option."
Tag	Cookie	namevalue	"The " Param:namevalue " must be formatted as <i>name</i>=<i>value</i>. Multiple instances of this tag can be used for multiple cookies."
Tag	Create	filename	"The results of the HTTP call are saved in this " Param:filename "."
TagRes	Data	"Indicates that the returned results are to be binary data. See also the " Tagname:Text " tagged option."
Tag	DateTime	datetime	"Sets the HTTP Date header to " Param:datetime "."
TagRes	Delete	"The HTTP call is to be a DELETE."
Tag	File	filename	"The contents of this " Param:filname " are passed in the call. This must be preceded with a " TagName:Name " tagged argument."
TagRes	Get	"The HTTP call is to be a GET (instead of a POST)."
Tag	Header	list	"Define an HTTP header to be passed. The format of " Param:list " must be (\"<i>header-name</i>\" \"<i>header-value</i>\"). Multiple " TagName:Header " tags can be declared."
Tag	Header	dimlist	"This defines a dimension to receive the returned HTTP headers. The " Param:dimlist " value must be a dimension of type " PntType:List ". The returned headers will be \
returned as a list of points on the Alpha dimension."
Tag	Include	filename	"Takes the contents of " Param:filename " as the value of the prior " TagName:Name "."
Tag	Object	string	"The name of the target object, usually a file name or executable. If this is specified then it is appended to the end of the " TagName:URL " value."
Tag	Out	id	"Write the returned results of the HTTP call to the V4 stream identified by " Param:id ". (See the " IntMod:Output " module for more information.)"
Tag	Name	string	"Defines a named argument for the call. The following argument is taken as the value."
Tag	Password	string	"The password to be used by this HTTP call."
TagRes	Post	"The HTTP call is to be a POST (instead of a GET). This is the default."
TagRes	Put	"The HTTP call is to be a PUT."
TagRes	Text	"Indicates that the returned results are to be text data. See also the " Tagname:Data " tagged option."
Tag	Trace	logical	"If " Param:logical " is TRUE then output tracing information on the call. If FALSE (default) then do not output any trace debugging information."
Tag	Trace	filename	"Output tracing information into the file " Param:filename "."
Tag	Type	string	"The <a href='http://en.wikipedia.org/wiki/List_of_HTTP_header_fields' target='_blank'>content-type</a> of the HTTP call."
Tag	URL	string	"The URL to be invoked."
Tag	User	string	"The user name associated with this HTTP call. The " TagName:User " argument and " TagName:Password " argument are concatenated into a semi-colon delimited security token"
Tag	UserAgent	string	"The " Param:string " is passed as the CURL option <a href='http://curl.haxx.se/libcurl/c/CURLOPT_USERAGENT.html' target='_blank'>CURLOPT_USERAGENT</a>."
Tag	Wait	seconds	"Normally this module will wait 'forever' for a response back from the server. This can be limited to a maximum wait time of " Param:seconds ". The module fails if no response is received within this time period."
Desc
IPar	"This module invokes an HTTP call using the <a href='http://curl.haxx.se/' target='_blank'>CURL</a> library of routines. It can be used to make HTTP and HTTPS calls to any other sites on the web."
EXWD	HTTP(URL::Str([urlBase] "scripts/style.js") Create::Str([dirWebJS] "style.js"))	Pulls the javascript file from the target website and saves it locally as style.js
EXWD	HTTP(URL::[urlWebServices] Post? Type::"application/soap+xml" Arg::$soap)	Sends a SOAP+XML request
EXWD	HTTP(Trace::TRUE URL::[authNetGatewayXML] Post? Type::'text/xml' Arg::[anXML])	Sends an XML message to a credit card gateway with full debugging/tracing
EXML	"Using Buffers & JSON with the HTTP Module"
ML	Output(Buffer? Id::xmlRequest)	/* Create a new buffer stream */
ML	Do(Out::xmlRequest [generateTaxRequestXML])	/* Generate an XML request and output to this stream */
ML	Output(Buffer? Id::xmlResponse)	/* Create another empty stream for the HTTP results */
ML	HTTP(URL::"http://xxx.xxx.com" Post? Type::"application/soap+xml" ArgFile::xmlRequest Out::xmlResponse)	/* Call HTTP with the input and output buffers*/
ML	JSON(Parse? Ignore::(soap) Array::(message tax line) XML::xmlResponse)	/* Parse/convert the resulting XML to JSON for processing */
Mod	If	Conditional Test and Evaluation	RelLog
Index	Ifnot	Module	Str("v4refmod_d.htm#IntMod:If")
Usage	value	"logical truevalue falsevalue"
Usage	value	"logical tagval"
UsageX	value	Ifnot	"arguments same as If"
Params	value	"The point returned as the result."
Params	logical	"A point to be evaluated and tested as true or false."
Params	truevalue	"The point to be returned if logical is true."
Params	falsevalue	"The point to be returned if logical is false."
Params	tagval	"One or more of the tagged values below."
Tag	Then	truevalue	"Return the value of " Param:truevalue " if " Param:logical " is TRUE."
Tag	Else	falsevalue	"Return the value of " Param:falsevalue " if " Param:logical " is FALSE."
Tag	ElseIf	newlogical	"If the value of " Param:logical " is FALSE then evaluate " Param:newlogical " and continue with the following arguments."
Desc
IPar	"If no tags are present then if the first argument is true then the second argument is returned otherwise the third argument \
is returned. If the first argument is false and no third argument is given then UV4:none is returned. Note that all arguments \
are evaluated when tags are not present. The quote prefix (@) may be used such that only the selected argument is evaluated."
IPar	"If tags are present then only the selected tag is evaluated. If the selected tag is not given then UV4:none is returned."
IPar	"The " IntMod:Ifnot " module is the same as the " IntMod:If " module except that it logically negates its first argument."
Index	UV4:none	general	Str("v4refmod_i.htm#IntMod:If")	If	IntMod
Examples
EX	"If(Cus.IsValid @Cus.BalanceDue "not valid")"
EXWD	If(Cus.IsValid Then::Cus.BalanceDue Else::"not valid")	identical to prior example
EX	"If({Money* < Money:0.00} Then::"Credit Due" ElseIf::{Money* = Money:0.00} Then::"no balance" Else::Str("Balance is " Money*))"
EXWD	If(FALSE Then::xxx)	returns UV4:none
EXWD	Ifnot(TRUE Then::res1 Else::res2)	returns res2
Mod	In	Test Point in Range of Points	RelLog
Usage	logical	"npt1 npt2"
Usage	result	"npt1 npt2 truept falsept"
Params	logical	"Logical:TRUE or FALSE depending on the result of the comparison."
Params	npt1	"A point."
Params	npt2	"A point."
Params	result	"The evaluation of truept or falsept depending on whether or not " param:npt1 " in " param:npt2 "."
Params	truept	"A point."
Params	falsept	"A point."
Desc
IPar	"The " IntMod:In " module tests to see if " Param:npt1 " is equal to or in the range of points specified \
by " Param:npt2 ". If " Param:npt2 " references a single point then " IntMod:In " is the same as the " IntMod:EQk " module. \
If " Param:npt2 " is a range of points or a list then " IntMod:In " returns true if " Param:npt1 " is in the range or \
false otherwise."
IPar	IntMod:In " recognizes the various date/time point types supported by V4. It is possible to test to see if a \
month or date is in a year, a date is in a month, etc. without any " IntMod:DTInfo " conversions."
IPar	"The " IntMod:In " module may also be referenced with the infix operator \"==\". The operator \"~=\" may be used \
for \"not in\"."
IPar	"See " PntType:Real " for details on comparing floating point numbers."
IPar	"When comparing two telephone points only the area code and number are considered. The type and extension (if given) are ignored."
IPar	"Two strings are tested for an exact match, not a partial match. Use the " IntMod:Str " " TagName:Has " option to test for partial string matches."
IPar	"If the second argument to this module is a list then the elements of the list are tested until a match is found. If no match is found then FALSE is returned."
Examples
EXWD	In(20 Int:1..50)	Logical:True
EXWD	In(13 Int:1..10,20..30,50)	Logical:False
EXWD	In(State:PA State:NJ,NY,PA,DE)	Logical:True
EXWD	In(Had (Mary had a little lamb))	Logical:True
EXWD	In(UDate:970304 UYear:1997)	Logical:True
EXWD	In("is" "Now is the time")	Logical:Yes
EX	Context(Sales:>10000)
EXWD	In(Money:11000 Sales*)	Logical:True
EXWD	In(UDT:1/30/98:10:03 UTime:9:50..10:30)	Logical:True
EXWD	In("he" ("Now" "is" "the" "time"))	Logical:True
Mod	Is1	Tests to See If Point Refers to a Single Value	Draft	RelLog V4Int
Usage	value	"pt"
Usage	value	"pt svalue mvalue"
Usage	value	point tagargs
Params	value	"The point returned as the result."
Params	logical	"A point to be evaluated and tested for a single value"
Params	svalue	"The point to be returned if the point refers to a single value."
Params	mvalue	"The point to be returned if the point refers to multiple values."
Tag	Then	value	"The " param:value " to be returned if the first argument references a single point."
Tag	Else	value	"The " param:value " to be returned if the first argument does not reference a single point."
Tag	ElseIf	logical	"If the first argument is not a single point then " Param:logical " is evaluated. If the result is Logical:True \
then the following " TagName:Then " argument is evaluated. If it is Logical:False then the following " TagName:Else " argument \
is evaluated. Multiple " TagName:ElseIf " tags may be chained."
Desc
IPar	"In the single argument mode, " IntMod:Is1 " returns true if its argument point refers to a single value. \
In the three argument mode the second argument is returned if the first argument is a single value, otherwise \
the third argument is returned."
IPar	"The " TagName:Then ", " TagName:ElseIf ", and " TagName:Else " tags may be used to explicitly define results or \
chain multiple conditionals."
Examples
EXWD	Is1(Int:234)	Logical:True
EXWD	Is1(Branch:East,West Int:23 Int:44)	Int:44
Mod	IsAll	Tests to See If Point Refers to All Points on Dimension	Draft	RelLog V4Int
Usage	value	"pt"
Usage	value	"pt avalue navalue"
Usage	value	point tagargs
Params	value	"The point returned as the result."
Params	logical	"A point to be evaluated and tested for a single value"
Params	avalue	"The point to be returned if the point refers to all points on a dimension."
Params	navalue	"The point to be returned if the point does not refer to all points."
Tag	Then	value	"The " param:value " to be returned if the first argument references all points on a dimension."
Tag	Else	value	"The " param:value " to be returned if the first argument does not reference all points."
Tag	ElseIf	logical	"If the first argument is not a single point then " Param:logical " is evaluated. If the result is Logical:True \
then the following " TagName:Then " argument is evaluated. If it is Logical:False then the following " TagName:Else " argument \
is evaluated. Multiple " TagName:ElseIf " tags may be chained."
Desc
IPar	"In the single argument mode, " IntMod:IsAll " returns true if its argument point refers to all points on a dimension. \
In the three argument mode the second argument is returned if the first argument refers to all points, otherwise \
the third argument is returned."
IPar	"The " TagName:Then ", " TagName:ElseIf ", and " TagName:Else " tags may be used to explicitly define results or \
chain multiple conditionals."
Examples
EXWD	IsAll(Int:3,4,5)	Logical:False
EXWD	IsAll(Branch:East,West Int:23 Int:44)	Int:44
EXWD	IsAll(cusType..)	Logical:False (because cusType.. evaluated into list of values)
EXWD	IsAll(@cusType..)	Logical:True
EXWD	Context Add MakeP(Dim:cus Special::All)	(put cus.. into context)
EXWD	IsAll(cus*)	Logical:True
Mod	JSON	Format Points into Javascript - JSON Format	Database Related	DBase OSRel
Usage	str	"opttag pt1 (name pt2) (pt3) ..."
Params	str	"The resulting string in one of various JSON formats."
Params	opttag	"Zero or more optional tags below."
Params	pt1	"One or more points to be formatted with the dimension name as the JSON tag name."
Params	name	"An explicit name to be used as the JSON tag name."
Params	pt2	"A value to be used with the prior tag name."
Params	pt3	"A single point within a list is taken as a literal value (i.e. no tag name is used). This is for embedding fully formatted JSON strings within \
another JSON entry."
Tag	Array	tagname	"The following arguments are elements of the named JSON array."
Tag	Array	list	"The " Param:list " is a list of XML tag names that are to be treated as JSON arrays, not objects. Multiple consecutive instances of any XML tags matched in the list \
are consolidated into a single named JSON array, not multiple JSON objects of the same name."
Tag	Attributes	logical	"If TRUE (default) then return XML attributes in the JSON expressions. If FALSE then ignore XML attributes. See below for more discussion."
Tag	Delete	name	"Delete the top-level JSON object with the given " Param:name "."
Tag	Function	val	"Same as the " TagName:Name " except that " Param:val " is considered a JavaScript function and is not enclosed in quotes."
Tag	Ignore	list	"The " Param:list " is a list of XML tag names that are to be ignored. This option can be used to simplify the resulting JSON object when parsing an XML string."
Tag	JSON	str	"Append the " Param:str " unchanged (it is assumed to be in valid JSON format)."
Tag	Parse	str	"Parse the " Param:str " as a JSON string and store the resulting object for future reference."
Tag	Parse	id	"Parses the contents of " IntMod:Output " buffer " Param:id " as a JSON string.")
Tag	Parse	list	"Parse the contents of the V4 " Param:list " as a JSON string."
TagRes	Parse	"Parse the non-JSON string as a JSON string. This argument is currently used with the " TagName:XML " tag."
Tag	Name	name	"Specifies the name of the JSON field. The next argument <b>must</b> be a " TagName:Value " or untagged argument and is treated as the \
value of the JSON " Param:name " variable/element."
Tag	Object	tagname	"The following arguments are elements of the named JSON object."
Tag	Quoted	logical	"This is a global option that determines whether or not each <i>name</i> in a <i>name</i>:<i>value</i> pair is quoted or note. If TRUE then the <i>name</i> is always quoted, \
if FALSE then it is only quoted if it is not a valid Javascript identifier. Once this option is set it remains in effect until explicitly changed."
Tag	Suffix	str	"Append " Param:str " to each of the following argument tag names. If " Param:str " is empty then no suffix is appended. The \
case of the suffix is <b>not</b> affected by any of the case tags (" TagResName:Dim ", " TagResName:LC ", " TagResName:UC "). If the argument is UV4:none then there is no suffix."
Tag	Top	name	"Specifies the " Param:name " of the top-level JSON object when converting/parsing JSON or XML. The default " Param:name " is <b>xml</b> when converting XML to JSON. \
Setting " Param:name " to UV4:none will eliminate the top-level object for XML to JSON parsing."
Tag	Value	val	"The value for the current JSON element (see " TagName:Name " tag)."
Tag	XML	str	"Convert the XML " Param:str " to the equivalent JSON format. If this is used in conjunction with the " TagResName:Parse " tag then the JSON string will be parsed and the \
resulting object stored within the V4 runtime. The top-level object name is <b>xml</b>"
Tag	XML	list	"Convert the XML described within the elements of " Param:list " to JSON."
Tag	XML	stream	"Convert the XML contained in the named (buffered) " Param:stream " to JSON."
TagRes	Array	"Enclose the following arguments within brackets ('[ ... ]') but without a tag name."
TagRes	Dim	"If the element name has a corresponding dimension then use the exact dimension name (case). If no corresponding dimension exists then the \
element name is not changed."
TagRes	LC	"Convert all following element names to lower case."
TagRes	Object	"Enclose the following arguments within braces ('{ ... }') but without a tag name."
Tag	Style	option	"Various parsing options can be controlled with this tagged argument. If " Param:option " is <b>Comma</b> then a JSON string with extra commas is allowed. \
If the " Param:option " is <b>LeadingZero</b> then numeric values with leading zeros are treated as strings, not numbers. Options set with this apply only to the current " IntMod:JSON " call."
Tag	Style	list	"Multiple style options may be specified as a list."
TagRes	UC	"Convert all following element names to upper case."
Desc
IPar	"This module formats V4 points into a valid <a href='http://www.json.org' target=_blank>JSON</a> string. This module may be nested allowing for nested JSON strings of varying \
complexity."
IPar	"Note that javascript is case sensitive. The upper and lower case tags can be used to force all upper or lower case. The " TagResName:Dim " option \
will normalize element names to those of the parent dimension (if the dimension exists)."
IPar	"If an argument is UV4:none then it is ignored."
IPar	"The " IntMod:JSON " module is limited to the length of a V4 string for the value. There are two methods for outputting extremely long JSON values. \
The first is with the " Tag:JSON " option in the " IntMod:Echo " module. This allows you use the contents of a file as a json value. The other method is with the " IntMod:EchoP " module. \
The V4 web interface treats newlines as value delimiters when dealing with json values. The " IntMod:EchoP " module does not output a newline. Therefore you can construct json values of virtually unlimited size. \
See below for an example."
IPar	"The " TagName:Attributes " tagged argument is used to control whether or not XML attributes are included in the resulting JSON expression. Including attributes presents somewhat of a representational problem. XML \
tags that do <b>not</b> have values will have their attributes given as a sub-element to 'attr'. Tags that have values will have attributes given as a separate JSON object named <i>tag</i>_attr. For instance \
&lt;tag1 a=\"b\" c=\"d\">&lt;tag2 e=\"f\">g&lt;/tag2>&lt;/tag1> converts to the JSON expression {TAG1:{ATTR:{A:'b',C:'d'},TAG2_ATTR:{E:'f'},TAG2:'g'}}."
EXWD	JSON(Object::ob1 123 hoho "moo")	ob1':{'Int':123,'NId':"hoho",'Alpha':"moo"}
EXWD	JSON(Object::ob1 Suffix::"_x" 123 hoho "moo")	'ob1':{'Int_x':123,'NId_x':"hoho",'Alpha_x':"moo"}
EXWD	JSON(Object? JSON(Object::ob1 123 hoho "moo") (nid 456) (Logical:yes)))	{'ob1':{'Int':123,'NId':"hoho",'Alpha':"moo"},'nid':456,true}
EXWD	JSON(Dim? Object? JSON(Object::ob1 123 hoho "moo") (nid 456) (Logical:yes)))	{'ob1':{'Int':123,'NId':"hoho",'Alpha':"moo"},'NId':456,true}
EXWD	JSON(UC? Object::ob1 123 hoho "moo")	'ob1':{'INT':123,'NID':"hoho",'ALPHA':"moo"}
EXWD	JSON(Name::var1 Value::(1 2 3 4))	'var1':[1,2,3,4]
EXWD	JSON(Name::var1 (1 2 3 4))	'var1':[1,2,3,4]
EXWD	JSON(Style:LeadingZero Parse::"... zipcode:02139 ...")	zipcode will be represented as the string "02139", not numeric 2139
EXWD	JSON(XML::"&lt;cus&gt;&lt;name&gt;John Doe&lt;/name&gt;&lt;address&gt;1234 Anywhere&lt;/address&gt;&lt;/cus&gt;")	xml:{cus:{name:"John Doe",address:"1234 Anywhere"}}
EXWD	JSON(Ignore::(cus) XML::"&lt;cus&gt;&lt;name&gt;John Doe&lt;/name&gt;&lt;address&gt;1234 Anywhere&lt;/address&gt;&lt;/cus&gt;")	xml:{name:"John Doe",address:"1234 Anywhere"}
EXWD	JSON(Top::UV4:none XML::"&lt;cus&gt;&lt;name&gt;John Doe&lt;/name&gt;&lt;address&gt;1234 Anywhere&lt;/address&gt;&lt;/cus&gt;")	cus:{name:"John Doe",address:"1234 Anywhere"}
EXWD	JSON(XML::"&lt;toDelete&gt;&lt;item&gt;123&lt;/item&gt;&lt;item&gt;443&lt;/item&gt;&lt;item&gt;545&lt;/item&gt;&lt;item&gt;444&lt;/item&gt;&lt;item&gt;998&lt;/item&gt;&lt;/toDelete&gt;")	xml:{toDelete:{item:123,item:443,item:545,item:444,item:998}}
EXWD	JSON(Array::(item) XML::"&lt;toDelete&gt;&lt;item&gt;123&lt;/item&gt;&lt;item&gt;443&lt;/item&gt;&lt;item&gt;545&lt;/item&gt;&lt;item&gt;444&lt;/item&gt;&lt;item&gt;998&lt;/item&gt;&lt;/toDelete&gt;")	xml:{toDelete:{item:[123,443,545,444,998]}}
EXWD	JSON(Top::"foo" Parse::"{x1:1, x2:2, x3:3}")	Parses JSON string with top level name of 'foo' (ex: $(foo.x1))
EXML	"Returning Large JSON Value"
ML	[returnOrderAsJSON ordId..]
ML	 Do(Context::ordHeader[ordId*],EchoW("Order does not exist: " ordId*)
ML	    EchoP("order:{")
ML	    EchoP("header:{" List(JSON(EvalPt("ordHeader." NId*))/(ordId ordStatus entryDate ...) Column::",") "}")
ML	    EchoP(",detail:[")
ML	    Enum(ordDetail:(ordHeader*) Index::Dim:Int
ML	     @EchoP(If({Int* > 1} Then::",") "{" List(JSON(EvalPt("ordDetail." NId*))/(item desc qty price extendAmt ...) Column::",") "}"))
ML	    EchoP("]") /* Close off ordDetail array */
ML	    Echo("}") /* Close off main bracket and end with newline */
ML	   )
Mod	JSONRef	Return Value of JSON Reference	V4Int
Index	JSONRefDim	Module	Str("v4refmod_j.htm#IntMod:JSONRef")
Index	$	Module	Str("v4refmod_j.htm#IntMod:JSONRef")	JSONRef	IntMod
Index	$$	Module	Str("v4refmod_j.htm#IntMod:JSONRef")	JSONRef	IntMod
Usage	value	"name name ..."
UsageX	value	JSONRefDim	"arguments same as JSONRef"
UsageX	value	$	"name.name..."
UsageX	value	$$	"name.name..."
Params	value	"The resulting referenced JSON element"
Params	name	"A JSON object or array subscript"
Desc
IPar	"This module is used to reference a particular element within a JSON object and return its value. The " IntMod:JSONRef " module returns the value as a point on Dim:Alpha, Dim:Num, Dim:Int or Dim:Logical. \
The " IntMod:JSONRefDim " module returns the value as a point on the dimension name given in the reference. For example, given the JSON object: 'obj:{el1:"a string", el2:234, el3:false}' then JSONRef(obj el2) returns the point Num:234 \
while JSONRefDim(obj el2) returns the point el2:234. If the referenced dimension does not exist then the module fails."
IPar	"The raw usage of these two modules is counter-intuitive to Javascript programming. V4 supports two additional formats that more closely resemble the dot notation dereferencing of JSON objects. The '$()' syntax can be \
used in place of the " IntMod:JSONRef " modules and the '$$()' syntax to replace the " IntMod:JSONRefDim " module. A dot notation is used within these two dollar sign modules. For example $(obj.el1) is equivalent to JSONRef(obj el1) \
and $$(obj.el3) is equivalent to JSONRefDim(obj el3)."
IPar	"JSON arrays and objects may be indexed directly with an integer reference. Given an object such as 'arg:{name:\"John\", relatives:[{name:\"John\",relation:\"father\"},{...},{...}], ...}' then $(arg.relatives.4.name) references the fourth relative. Note that \
indexing is 1-based, not 0-based."
IPar	"JSON arrays and objects may also be enumerated with the " IntMod:Enum " and " IntMod:EnumCL " modules. Use the " TagName:Shell " argument within these two modules to reference the enumerated values."
IPar	"V4 supports several reserved reference names that are described below-"
Table	Reserved JSON Reference Names	0	0	#E6E6C0
TE	"elementNames" "Returns a list of the referenced element names"
TE	"length" "Returns the integer length of the object or array"
TE	"serialize" "Returns a string representation of the referenced object"
TE	"typeOf" "Returns a point on Dim:UV4 describing the referenced object, one of UV4:object,array,integer,undefined"
TE	"nameOf" "Returns the name of the referenced object"
Examples
EXWD	JSON(Parse::"empTime:[{tdT:235,date:'20-Jan-2014',hours:6,desc:'MTS - combine stuff'},{tdT:194,date:'13-Jan-2014',hours:1,desc:'2014S review meeting'}]")	parse a JSON string
EXWD	$(empTime.date)	Alpha:"20-Jan-2014"
EXWD	$(empTime.date)	date:20-Jan-2014
EXWD	EnumCL($(empTime.1) Shell::Dim:s @s*)	(Int:235 Alpha:"20-Jan-2014" Int:6 Alpha:"MTS - combine stuff")
EXWD	EnumCL($$(empTime.1) Shell::Dim:s @s*)	(tdt:235 date:20-Jan-2014 hours:6 desc:"MTS - combine stuff")
EXWD	$(empTime.1.elementNames)	(tdt date hours desc)
EXWD	$(empTime.length)	2
EXWD	$(empTime.typeOf)	UV4:array
EXWD	$(empTime.description.typeOf)	UV4:undefined
Mod	LE	Less/Equal Test	RelLog
Usage	logical	"npt1 npt2"
Usage	result	"npt1 npt2 truevalue falsevalue"
Params	logical	"Logical:TRUE or FALSE depending on the result of the comparison."
Params	npt1	"A numerical point."
Params	npt2	"A numerical point."
Params	result	"Evaluation of truevalue or falsevalue depending on whether or not " param:ntp1 " is less than " param:npt2 ""
Params	truevalue	"A point."
Params	falsevalue	"A point."
Desc
IPar	IntMod:LE " returns true if the first argument is numerically less than or equal to the second argument."
IPar	"See " PntType:Real " for details on comparing floating point numbers."
Examples
EXWD	LE(1 2)	Logical:True
EXWD	LE(5 4 "Yes" "No")	Alpha:No
Mod	LEG	Less/Equal/Greater Test	RelLog
Usage	respt	"npt1 npt2 respt1 respt2 respt3"
Params	respt	"The resulting point, one of respt1, respt2, or respt3."
Params	npt1	"A numerical point."
Params	npt2	"A numerical point."
Desc
IPar	"The " IntMod:LEG " module compares " Param:npt1 " to " Param:npt2 " and returns " Param:respt1 " if " Param:npt1 " is less than " Param:npt2 ". If " Param:npt1 " equals (numerically) " Param:npt2 " then " IntMod:LEG " returns " Param:respt2 ". And if " Param:npt1 " is greater than " Param:npt2 " it returns " Param:respt3 ". Normally all of the resulting points are evaluated before the test occurs. If any of the respt's are quoted intersections then they are evaluated only if necessary."
IPar	"See " PntType:Real " for details on comparing floating point numbers."
Examples
EXWD	LEG(1 2 3 4 5)	returns 3 (1 is less than 2)
EXWD	LEG(Int:100 Real:100.0 1 2 3 )	returns 2 (100 numerically equals 100.0)
Mod	Len	Determine Length/Size of Argument	List v4int
Usage	size	"point"
Params	size	"The size of the argument, varies depending on the argument's point type."
Params	point	"The size/length of this point is determined."
Desc
IPar	"This module determines the length or size of it's first argument. If the " Param:point " is a string then the number of characters is returned. If it is a list or drawer then the number of elements \
is returned. Otherwise the argument is converted to a string and the number of characters in that string is returned."
Examples
EXWD	Len((1 2 3 4))	returns the elements in the list- 4
EXWD	Len(123)	returns Len(Str(123)) - 3
EXWD	Len("")	returns 0
Mod	List	General List Utility	List
Index	ListNE	Module	Str("v4refmod_l.htm#IntMod:Def")
Usage	list	"dimpoint"
Usage	list	"bigtext"
Usage	list	"xdbpoint"
Usage	list	"isct"
Usage	list	"v4ispt tagarg ..."
Usage	list	"Area::file"
Usage	list	"aggrefpoint tagarg"
Usage	list	"settag list ..."
Usage	result	"baselist action"
UsageX	value	ListNE	"arguments same as List"
Params	list	"A resulting list of points."
Params	dimpoint	"A dimension point (i.e. Dim:" Param:xxx "). The resulting " Param:list " is a list of all points \
on that dimension. Note that Dim:Dim may be used to get a list of all dimensions."
Params	bigtext	"A point of type " PntType:BigText ". The result is a list of Dim:Alpha points corresponding to each line \
in the point."
Params	xdbpoint	"A point on an " PntType:XDB " dimension. The result is a list of rows returned by the last " IntMod:dbGet " module call."
Params	isct	"A quoted intersection. The result is a list of values obtained by the repeated evaluation of " Param:isct ". The list \
terminates when the evaluation fails. The points in this list are not pre-generated, but rather determined as each next \
point in the list is requested."
Params	v4ispt	"A V4IS point returned by the " IntMod:V4ISCon " module. The resulting " Param:list " is a list of V4IS records."
Params	Area::file	"If the sole argument to this module is " TagName:Area "::" Param:file " then the specified " Param:file " is \
opened and the list returned consists of Dim:Alpha points corresponding to each line in the file. The results are not \
defined if the file is not a text file."
Params	aggrefpoint	"A point of type " PntType:AggRef ". This must be followed by a the tagged arguments of " TagName:Area " \
and " TagName:Table " to specify a file and V4 Table to parse the lines in the file. The resulting list has a point for each \
line in the specified area that is successfully parsed by the V4 Table specification."	
Params	settag	"One of the following tag results: " TagResName:Union ", " TagResName:Intersect ", " TagResName:Subtract ", \
or " TagResName:XUnion ". The following " Param:list " arguments are unioned, intersected, subtracted, or xunioned."
Params	baselist	"A target list to be operated upon as specified by subsequent tagged arguments"
Params	action	"One or more of the tagged arguments below."
TagRes	Alpha	"Convert the first argument list to an alpha point."
Tag	Column	delim	"Convert the first argument list to an alpha point delimiting each list element (column) with the " Param:delim " string. \
This option can be used to create tab, comma, and pipe delimited strings from a list of points."
Index	CSV	Module	Str("v4refmod_l.htm#IntMod:List")	List	ListOf
Index	Tab	Module	Str("v4refmod_l.htm#IntMod:List")	List	ListOf
Tag	Column	dopt	"If the " TagName:Column " argument is not a string then it must be either <b>Tab</b> for tab-delimited, or <b>CSV</b> for \
comma-separated-values. The difference between ',' and CSV (or '\t' and Tab) is that additional formatting rules apply with the tag names. CSV results \
in true CSV output, while "," simply delimits the values with a single comma."
Tag	Append	lpt	"Append " param:lpt " to the end of the base list."
Tag	Area	file	"A file name specification."
Tag	AWhile	isct	"Evaluate isct after each point in the " param:base " list. If the result of the evaluation is true then continue otherwise terminate. Note that this argument is tested after each point. " tag:While "::" param:isct " is used to test before each point."
Tag	Begin	num	"Sets the beginning number for use with the " tag:Every " option. See description below for more details."
Tag	Bits	mask	"If this tag is the first and only argument to " IntMod:List " then a list of integer numbers is \
returned corresponding to the bits set in the 32-bit integer " Param:mask ". The dimension of the resulting list points is the \
dimension of the " Param:mask " if it is of type " PntType:Integer ", otherwise it is Dim:Int."
Tag	Bits	num	"Returns the elements in " param:base " list corresponding to bits set in " param:num "."
Tag	Break	num	"Segments the source list into " Param:num " sub-segments of approximately equal size. Currently this is only supported if the source list \
is a reference to one or more aggregate areas. This feature is used primarily by the " IntMod:Tally " module when concurrently processing large multi-area data sets."
Tag	Collapse	num	"Collapse " Param:num " levels of lists to a single stream (list) of points. Use " TagResName:Collapse " \
to collapse all levels of nested lists."
Tagres	Collapse	"Collapse any/all nested lists within the result so that a single stream of points is returned."
Tag	Count	fieldindex	"This argument specifies the field index associated with the area record that determines the number of subrecords \
per main record. (This applies only when converting V4IS points to a list)."
Tag	Columns	num	"Converts the points in the " Param:base " list to a list of lists. Each sublist consists of a \
<i>row</i> of " Param:num " points. This option is useful when converting a list to a table of " Param:num " columns." 
Tag	Delete	pt	"Removes the specified point from the list. All instances of the point will be removed. To limit the number of instances, use the " TagName:Num " option. The original list is \
returned if the specified point does not appear in the list."
Tag	Dim	dim	"Returns the first point in the base list with the specified dimension."
Tag	Every	num	"Select points based on a running sum determined by the " tag:Begin " and " tag:Sum " arguments. See the description below for details."
Tag	First	isct	"Evaluate " Param:isct " for the first point in the list. This may be used to position to a \
particular record in the V4IS file and is often used with the " Tag:While " tag."
Tag	Group	num	"Return a list of lists, with each sublist containing the next " Param:num " elements of the source list. (Compare this with \
the " TagName:Columns " option.)"
Tag	Group	isct	"Returns a list of lists. V4 appends points of the source list into a new list. With each point it evaluates " Param:isct ". If \
the result is TRUE then V4 continues with the next point in the source list. If the result is FALSE then the last point added to the new list is removed and \
the new list is appended to the resulting list. The process then repeats for all points in the source list. See the example below."
Tag	Head	npt	"Returns a list of the first " param:npt " points in the " param:base " list."
Tag	If	isct	"Evaluates " param:isct " for each point in the " param:base " list and returns a sublist for all points in " param:base " which evaluated to true."
Tag	If	isct	"Evaluate this isct for each selected V4IS record. If the result is undefined or false then immediately go for the next record."
Tag	If	isct	"A second " tag:If " specifies the test to perform on the sub-records."
Tag	Intersect	lpt	"Returns a list which is the intersect of the points in the " param:base " list and " param:lpt ", i.e. a list of points which appear in both list. If " Param:lpt " is UV4:none then the argument is ignored."
Tag	Key	keyval	"Searches a list of key-value pairs and returns the value for the corresponding " Param:keyval ". The format of the first argument list must be ((<i>key value ...</i>) (<i>key value...</i>) ... ). \
The module fails if the key is not found. Any entries in the first argument list that are not key-value pairs are ignored. If the matching sub-list has two entries then the second list entry is returned otherwise the entire  \
list is returned (including the key value)."
Tag	Key2	keyval	"Similar to the " TagName:Key " tag but compares the second entry in the list and returns the first if a match is found."
Tag	KeyNum	keyval	"Similar to the " TagName:Key " tag but instead of returning the key <i>value</i> it returns the index of the key-value pair within the list. FALSE is returned if the key is not found within the first argument list."
Tag	KeyNum	num	"This argument specifies the field index corresponding to a key within the area. The points \
in the resulting list will be in this key order. (For V4IS lists only)"
TagRes	Length	"Returns the length or number of elements in the list. See also " IntMod:Len "."
Tag	Maximum	pt	"Evaluates " param:pt " for each point in the " param:base " list. The returned value is that point in the " param:base " list giving the smallest evaluation of the " tag:Maximum " " param:pt "."
Tag	Minimum	pt	"Evaluates pt for each point in the base list. The returned value is that point in the base list giving the largest evaluation of the " tag:Minimum " " param:pt "."
Tag	Nth	npt	"Returns the " param:npt "<sup>th</sup> point in the " param:base " list. If " param:npt " is less \
than one then the " param:npt "<sup>th</sup> point from the right hand side of the list is selected. Note that this \
returns a point, not a list (unless the specified point is itself a list). List dimensions declared with the DotIndex attribute \
may also be <i>subscripted</i> with the " Param:list "." Param:point " construct which is converted to " IntMod:List "(" Param:list "* Nth::" Param:point ")."
Tag	Num	maxnum	"The maximum number of points to remove with the " TagName:Remove " option."
Tag	Number	maxnum	"The maximum number of records to select from a V4IS area. This is primarily for testing/debugging."
Tag	Occurs	point	"Returns the number of times " Param:point " occurs in the list. The result is a point on Dim:Int."
Tag	Pairs	mode	"Returns a list of lists where each element list is a pair of points from the original list. The " param:mode " determines \
whether or not pairs are created from a single point. If " Param:mode " is SELF then additional pairs are created by duplicating each point in the list. \
If " Param:mode " is OTHERS then pairs are not created from single points."
TagRes	Pairs	"Same as " Tagname:Pairs "::Others."
Tag	Position	point	"Returns the position of " param:point " in the " param:base " list. Note that this form of " IntMod:List " does not return a list but a point on the Int dimension."
Tag	Product	lpt	"Returns a list corresponding to the product of " param:base " list and " param:lpt ". See below for an example."
TagRes	Reverse	"Returns a list containing the elements of the source list but in reverse order."
Tag	Sample	npt	"Returns a subset of the " param:base " list that randomly approximates every " param:npt "<sup>th</sup> of the base list. This may be used to test large lists in a debugging mode or to randomly sample a large list for statistical purposes."
Tag	Sample	num	"Sample approximately every " Param:num "<sup>th</sup> point/record from a V4IS point. This is primarily for testing/debugging."
Tag	Select	pt	"Selects points from the " param:base " list which are included in " param:pt ". If pt refers to a single point then all points in the " param:base " list equal to " param:pt " are selected. If " param:pt " refers to a numeric range of points then all points in the " param:base " list included in that range are selected. If " param:pt " refers to a range of dictionary points then all points in the list starting with the first point and ending with the last are selected for output."
Tag	Shell	Dim:xxx	"Place each point in the " param:base " list into the context under this shell dimension. This is only valid for use with the " tag:If " and " tag:While " options."
Tag	Subtract	lpt	"Returns a the " param:base " list with all points in " param:lpt " removed. Any point in " param:lpt " but not in the " param:base " list is ignored. Note that this is a \
<i>set</i> operation. The source list is converted to a set meaning that any duplicate elements are removed. If " Param:lpt " is UV4:none then the argument is ignored."
Tag	Sum	num	"The incremental number to be used with the " tag:Every " argument. If not specified then Int:1 is assumed."
Tag	Table	name	"The name of a currently defined V4 table."
Tag	Tail	npt	"Returns the last " param:npt " points in the "param:base " list."
Tag	To	pt	"Returns all points in the " param:base " list up to and including " param:pt ". If the " param:base " list does not include " param:pt " then all points in the list are returned."
Tag	Union	lpt	"Returns a list corresponding to the union of the points in the " param:base " list and " param:lpt ". If " Param:lpt " is UV4:none then the argument is ignored."
Tag	While	isct	"Each point in the base list is entered into the current context and " param:isct " is evaluated. If it is true then the point is appended to the resulting list. If it is false, then all processing of the " IntMod:List " is terminated and the reslist is returned."
Tag	XUnion	lpt	"Returns the exclusive union of the " param:base " list and " param:lpt ", i.e. all points in the " param:base " list and " param:lpt ", but not in both. If " Param:lpt " is UV4:none then the argument is ignored."
TagRes	Union	"Must be the first argument to " IntMod:List ". The following argument lists are unioned. Any arguments equal to UV4:none are ignored."
TagRes	Evaluate	"Enumerates through each element of the list, evaluates each element and returns a list of the evaluated results."
TagRes	Hash64	"Calculates a 64-bit hash value for the list and returns it as a point on Dim:UFix"
TagRes	Intersect	"Must be the first argument to " IntMod:List ". The following argument lists are intersected. Any arguments equal to UV4:none are ignored."
TagRes	Subtract	"Must be the first argument to " IntMod:List ". The following argument lists are sequentially subtracted. Any arguments equal to UV4:none are ignored."
TagRes	XUnion	"Must be the first argument to " IntMod:List ". The following argument lists are exclusive-or-unioned. Any arguments equal to UV4:none are ignored."
Desc
IPar	"The " IntMod:List " module performs various list related functions. If the initial result is a special point (e.g. <i>dim</i>*) or intersection then that point is itself evaluated. If the \
result is a " PntType:List " or " PntType:Alpha " then tags appropriate for that point type (" IntMod:List " or " IntMod:Str ") may be chained."
IPar	"The " IntMod:ListNE " module is identical to the " IntMod:List " module (list-no-evaluate) except that it does not \
auto-evaluate the result if it is a special point or intersection."
IPar	"The " tag:Begin "/" tag:Every "/" tag:Sum " arguments allow the user to select points in a list based on a running total. The total is initialized with the " tag:Begin " value. Then for each point in the list, the " tag:Sum " value is added to the total. The point in the list is selected if the running total exceeds the " tag:Every " value. If it exceeds the " tag:Every " value then the point in the list is appended to the resulting list and the running total is decremented by the " tag:Sum " argument. If the running total still exceeds the " tag:Every " value then the current point is again appended to the output list."
Examples
EXWD	List( (1 2 3) Subtract::(2 3 4))	(1)
EXWD	List(Union? (1 2 3) (3 4 5))	(1 2 3 4 5)
EXWD	List( (1 2 3) Nth::2)	Int:2
EXWD	List( (1 2 3) Head::2)	(1 2)
EXWD	List( (1 2 3) Union::(2 3 4))	(1 2 3 4)
EXWD	List( (1 2 3) Product::(A B))	((1 A) (1 B) (2 A) (2 B) (3 A) (3 B))
EXWD	List( (1 2 3) Pairs?)	((1 2) (1 3) (2 3))
EXWD	List( (1 2 3) Pairs::Self)	((1 1) (1 2) (1 3) (2 2) (2 3) (3 3))
EXWD	List( (5 6 7) Bits::3)	(5 6) (decimal 3 = binary 0011 hence the first two elements of list selected)
EXWD	List(Int:1..10 Columns::3)	((1 5 9) (2 6 10) (3 7) (4 8))
EXWD	List(Bits::10)	(2 4) (decimal 10 = binary 1010)
EXWD	List((123 {3+5}) Nth::2)	Int:8 ({3+5} is itself evaluated)
EXWD	ListNE((123 {3+5}) Nth::2)	{3+5}
EXWD	V4ISCon(Dim:V Area::"v4isfile.dat" FileRef::5904 Open::1 KeyNum::1 Key::1)*	Open file for read access
EXWD	List(V* KeyNum::1 First::V4ISOp(V* KeyNum::1 Key::"A") While::Str(V4ISVal(V* Dim:Alpha 1) Head::"A"))	Returns list of points corresponding to records with keys beginning with "A"
EXWD	List(Dim:Orders)	returns a list of all orders
EXWD	List(Int:1..10)	returns the list (1 2 3 4 5 6 7 8 9 10)
EXWD	List(Int:1..10 Alpha::",")	returns Alpha:"1,2,3,4,5,6,7,8,9,10"
EXWD	List(Int:1..5 Alpha?)	returns Alpha:"12345"
EXWD	List((now is the time) Column::"|" UC?)	returns Alpha:"NOW|IS|THE|TIME"
EXWD	List((1 2 3 4 5 6 7 8 9 10) Group::4)	((1 2 3 4) (5 6 7 8) (9 10))
EXWD	List((1 2 3 4 5 6 7 8 9 10) Group::{Sum(List*) < 10})	((1 2 3) (4 5) (6) (7) (8) (9))
EXWD	List((now is the time for all men to come to the aid) Group::{Str(`List* Length?) < 10})	((now is the) (time for) (all men to) (come to the) (aid))
EXWD	List((now is the time for all men to come to the aid) Group::{Str(List* Length?) < 10})	((now is) (the) (time) (for all) (men to) (come to) (the aid))
EXWD	List((1 2 3 {3+1}) Evaluate?)	returns (1 2 3 4)
EXWD	List(((a value1) (b value2) (22 value3 333 xxx) (1.3 "a string")) Key::1.3)	"a string"
EXWD	List(((a value1) (b value2) (22 value3 333 xxx) (1.3 "a string")) Key::22)	(22 value3 333 xxx)
Ex	Table Demo
Ex	Column Customer Cus
Ex	Column State State
Ex	Column InvoiceAmt Money
Ex	EndTable
Ex	Dim T AggRef
Ex	 
Ex	Tally(List(Dim:T Area::Invoice.txt Table::Demo)
Ex	(Sum::T.InvoiceAmt By::T.State ByList::[StateList] Bind::[TAmt]))
IPar	"The example below shows how a list can be created from the repetitive evaluations of an intersection. In this example, the list never ends- it just keeps on repeating:"
EXML	"Sequences - Musical Pattern"
ML	"Bind [NMLt Sequence:Music] Beat:1"
ML	"Bind [NMLt Sequence:Music Beat:1] Beat:2"
ML	"Bind [NMLt Sequence:Music Beat:2] Beat:3"
ML	"Bind [NMLt Sequence:Music Beat:3] Beat:4"
ML	"Bind [NMLt Sequence:Music Beat:4] Beat:1"
ML	"Bind [NMLt Sequence:Music Beat:3 Form:Waltz] Beat:1"
ML	""
ML	"Context Add Sequence:Music"
ML	"Eval EnumCE( List( @[NMLt] ) @Echo( Beat  Beat* ) )"
ML	"Beat 1"
ML	"Beat 2"
ML	"Beat 3"
ML	"Beat 4"
ML	"Beat 1"
ML	"..."
IPar	"Given the context of Sequence:Music, the list formed by evaluating [Next] evaluates to the endless sequence of Beat:1 through Beat:4. If the point Form:Waltz is added to the context, the sequence changes to Beat:1 through Beat:3."
Mod	ListSize	Determine Size (Number of Elements) in List	List
Usage	num	list
Params	num	"The number of elements in the list."
Params	list	"A list or point that can be coerced to a list."
Desc
IPar	"The " IntMod:ListSize " module returns the number of elements in a list or point that can be coerced to a list. Lists of lists are not expanded, only the top level number of points is returned."
Examples
EXWD	ListSize((1 2 3 4 5))	results in Int:5
EXWD	ListSize(Int:1..100)	results in Int:100 (Int:1.100 is coerced into a list)
EXWD	ListSize(Student..)	results in the number of points on Dim:Student
EXWD	ListSize(ODBCSet..)	fails if the argument cannot be coerced to a list or if the number of points in the list is unknown
Mod	Locale	Obtain or Set Locale Parameters	V4Int OSRel DateTime
Usage	result	"tag"
Params	result	"A resulting point depending on the arguments."
Params	tag	"One or more of the tags show below."
Tag	Calendar	name	"Set the default calendar for the current country. The allowed values of " Param:name " are Gregorian, Julian, ISO, Islamic, and Hebrew."
Tag	Country	uncode	"Sets the current country to " Param:uncode ". The valid countries are determined at startup time \
by the file v4_Home:v4CountryInfo.v4i. The " Param:uncode " may be either the standard UN numeric code or UN three letter abbreviation."
Tag	Language	name	"Sets the language for the current country. The allowed values of " Param:name " are determined \
at startup time by the file v4_Home:v4LanguageInfo.v4i."
Tag	Timezone	val	"Set the timezone for the currently running V4 process to " Param:val " which must be an integer number \
between -12 and +12."
TagRes	Calendar	"Returns the current calendar for the current country as a point on Dim:UV4."
TagRes	Country	"Returns the current country as a point on Dim:UCountry."
TagRes	Language	"Returns the current language for the current country as a point on Dim:UV4."
TagRes	TimeZone	"Returns the current timezone for the current process as a point on Dim:Int."
Desc
IPar	"The " PntType:Country " point type associates a point with a country. The valid country points are determined at \
startup by the entries in v4_Home:V4CountryInfo.v4i. Each country has associated attributes including a calendar, language, \
and timezone. The " IntMod:Locale " module is used to set the current country for the V4 runtime and to alter initial \
settings for that country."
IPar	"There are many parameters associated with each country that determine how various V4 points are to be parsed and \
formatted. See " PntType:Country " for more information. The language associated with a country also determines how V4 \
handles different types of points. See v4_Home:V4LanguageInfo.v4i for more information."
IPar	"All " IntMod:Locale " settings are initialized from v4_Home:V4CountryInfo.v4i each time V4 is started. Any changes \
made via this module are good only for the life of the current V4 process."
Examples
EXWD	Locale(Country?)	returns UCountry:USA as the default
EXWD	Locale(Language?)	returns UV4:English
EXWD	Locale(Country::FRA)	sets the current country to France
EXWD	Locale(Language?)	returns UV4:French
Mod	Lock	Interprocess Locking Function	OSRel
Usage	result	"tagarg ..."
Params	result	"depends on arguments."
Params	tag	"one or more of the tagged arguments below."
Tag	Data	id	"returns data on either a lock or process as specified by the " Param:id ". If a lock then a list of the form \
(" Param:id " " Param:name " " Param:mode " " Param:ownerlist " " Param:waitlist ") is returned where " Param:id " is the requested lock id, " Param:name " \
is the lock name, " Param:mode " is Int:1 for a read-lock and 2 for a write-lock, " Param:ownerlist " is a list process id's of processes currently \
owning the lock, and " Param:waitlist " is a list of processes waiting for the lock. The data returned for a process is a list of the form \
(" Param:id " " Param:pid " " Param:name ") where " Param:id " is the process id, " Param:pid " is the process system-level id, and " Param:name " \
is the name od the process."
Tag	Hold	duration	"Specifies how long (in seconds) the process can hold the requested lock. If the process does not release the lock \
within " Param:duration " seconds then the lock is automatically released. If multiple processes specify this option with a shared read lock then the \
lock is held for the longest time as defined by all of the requests and durations."
Tag	Id	name	"Specifies the name of the process. This must be done with the first call to the " IntMod:Lock " module. If this option is \
not given, the name defaults to 'process-<i>pid</i>'."
Tag	Interval	tryint	"If a lock is not immediately available, V4 will continue to try and grab the lock at " Param:tryint " millisecond \
intervals. The default is 50 milliseconds and is appropriate for most applications."
Tag	Life	option	"Determines how long a lock exists. If " Param:option " is <b>Release</b> then the lock exists until it is explicitly released <i>even if the creating process terminates</i>. \
If the " Param:option " is <b>process</b> then the lock, if not already explicitly released, is automatically released when the creating process terminates. " Tag:Life ":<b>Process</b> is the default."
Tag	ListOf	object	"If " Param:object " is <b>Locks</b> then a list of ids of all active locks is returned. If <b>Processes</b> then a list of \
all registered processes is returned. Information on a specific lock or process can be obtained with the " TagName:Data " argument."
Tag	Name	lockname	"The name of the lock being requested. If no name is given then 'default' is used. Note: lock names are case sensitive. Multiple lock names can be given if \
delimited with commas (see discussion below)."
Tag	Release	lockname	"Releases the currently held lock " Param:lockname ". Only one lock may be released per call to the module."
Tag	Type	locktype	"The type of lock: <b>Read</b> for a sharable read-lock, or <b>Write</b> for an exclusive write-lock. If no " TagName:Type " \
is given, then a write-lock is assumed."
Tag	Wait	option	"Determines whether or not to wait for a lock if it is not immediately available. The " Param:option " may be an number \
seconds to wait, Logical:Yes to wait indefinitely (the default), Logical:No to return with an error, or Dim:<i>dimension</i>. If a dimension is given then the module \
always returns immediately. The dimension is added to the context with an initial value of FALSE. When the lock becomes available, V4 assigns it to \
the current process and sets the context value of the dimension to TRUE."
Desc
IPar	"The " IntMod:Lock " module provides inter-process synchronization amongst multiple V4 processes. Two types of lock requests are supported. Write-locks \
can only be held by one process at a time. Sharable Read-locks can be concurrently held by multiple processes. A lock is identified by a case sensitive \
lock name. A lock can be held for both write and read access (but not at the same time)."
IPar	"Multiple locks can be obtained with a single call to the " IntMod:Lock " module. This is done by specifying multiple locks, delimited by commas, as the " Param:lockname " \
parameter. If a process uses different calls to obtain multiple locks there is the possibility of a deadly-embrace or <a href='http://en.wikipedia.org/wiki/Deadlock' target=_blank>deadlock</a> situation with another process causing both processes to \
hang indefinitely. Obtaining multiple locks with a single " IntMod:Lock " call eliminates this problem as V4 will only grab all the locks if all of them are available."
IPar	"Only one lock at a time can be released with this module."
Examples
EXWD	Lock(Name::resource1 Type::Read Wait::10)	request read access to lock resource1, wait at most 10 seconds for the lock
EXWD	Lock(Release::resource1)	release the lock
EXWD	Enum(Lock(ListOf::Locks) @EchoT(`Lock(Data::Int*)))	list details for all active locks
EXWD	Lock(Name::resource2 Wait::Dim:Logical)	request write access to lock, update Dim:Logical to TRUE when process has lock
EXWD	Enum(While::{~Logical*} @Do(V4(Sleep::1) EchoT("Still don't have it")))	sleeps until lock is available and grabbed by this process
EXWD	Lock(Name::"lock1,lock2,lock3" Wait::FALSE)	try to grab 3 locks, fail immediately if all 3 are not available
Mod	Log	Logarithmic Functions	Math
Usage	result	"number tag"
Params	result	"The resulting number determined by the arguments."
Params	number	"A numeric point"
Params	tag	"One of the tagged values or results below."
Tag	POW	exp	"Raise the " Param:number " to the " Param:exp " power. If " Param:exp " is an integer then the calculation is performed by repeated multiplications. If the " Param:exp " is not an integer then the result is determined via logarithms."
TagRes	Exp	"Return e<sup>" Param:number "</sup>."
TagRes	Exp2	"Return 2<sup>" Param:number "</sup>."
TagRes	Exp10	"Return 10<sup>" Param:number "</sup>."
TagRes	Log	"Return the natural (base e) logarithm of " Param:number "."
TagRes	Log2	"Return the base 2 logarithm of " Param:number "."
TagRes	Log10	"Return the base 10 logarithm of " Param:number "."
Desc
IPar	"This module performs various logarithmic functions as determined by its arguments."
Examples
EXWD	Log(2 POW::10)	results in Num:1024
EXWD	Log(10 Exp2?)	results in Num:1024
EXWD	Log(1024 Log2?)	results in Num:10 (or very close to that number)
Mod	LT	Less Than Test	RelLog
Usage	logical	"npt1 npt2"
Usage	val	"npt1 npt2 [valtrue valfalse]"
Params	logical	"Logical:TRUE or FALSE depending on the result of the comparison."
Params	npt1	"A numerical point."
Params	npt2	"A numerical point."
Params	val	"Either valtrue or valfalse"
Params	valtrue	"Returned if " param:npt1 " is less than " param:npt2 ""
Params	valfalse	"Returned if " param:npt1 " is not less than " param:npt2 "."
Desc
IPar	"" IntMod:LT " returns true if the first argument is less than the second. If four arguments are given then the third argument is returned instead of true and the fourth instead of false."
IPar	"See " PntType:Real " for details on comparing floating point numbers."
Examples
EXWD	LT( 1 2)	Logical:TRUE
EX	LT(1 2 Logical:False Logical:True)	Logical:False
Mod	Macro	Obtain Information on V4 Macros	V4Int
Usage	respnt	"tag ..."
Params	respnt	"The result depends on the arguments."
Params	tag	"One or more of the tagged options below"
Tagres	Count	"Returns a count, on Dim:Int, of the number of times the macro (as specified by the " TagName:Macro " argument) has been referenced."
Tag	Dim	dim	"Normally the " TagResName:ListOf " option returns a list on Dim:List. This may be overridden with this option."
TagRes	ListOf	"Returns a list of all defined macros."
TagRes	ListOf	"If the first argument is a macro name then this option returns the lines of text within the macro."
Tag	Macro	name	"Specifies a macro name name."
Desc
IPar	"This module returns information about the macros currently defined."
Examples
EXWD	Macro(ListOf?)	returns a list of all defined macros
EXWD	Macro("MAC1" ListOf?)	returns a list of all the lines within macro MAC1
EXWD	Macro(Macro::foo Count?)	returns the number of times macro 'foo' has been referenced
Mod	MakeI	Construct a V4 Intersection	V4Int
Usage	isct	"point point ..."
Usage	isct	"tag point point ..."
UsageX	isct	MakeQI	"same as MakeI"
Params	isct	"The intersection made up of the argument points."
Params	tag	"Optional tag"
Params	point	"One or more points."
Tagres	Dot	"Used to indicate that all following points are to be joined in a dot notation as opposed to a standard intersection. See the example below."
TagRes	Force	"Adds the " Param:forceEval " quality to the intersection."
TagRes	Quote	"Adds the " Param:quoted " quality to the intersection. This tag makes the " IntMod:MakeI " module \
identical to the " IntMod:MakeQI " module."
TagRes	Remove	"Set the auto-remove tag ('~') on the next point."
TagRes	Trace	"If given then flag this intersection for tracing."
Tag	Fail	point	"Use the " param:point " as the value to evaluate/return if the intersection fails."
Desc
IPar	"" IntMod:MakeI " returns an intersection consisting of its arguments. If the first argument is a point on the IntMod dimension then " IntMod:MakeI " returns an internal module call."
IPar	"The argument UV4:none is ignored by this module (i.e. UV4:none points are not included in the intersection). To include this point, quote it."
IPar	"The " IntMod:MakeQI " module is identical to the " IntMod:MakeI " module except that it returns a quoted intersection."
Examples
EXWD	MakeI(IntMod:Plus 100 23 )	Plus( Int:100 Int:23 )
EXWD	MakeI(LastOfMonth UMonth:9601)	[LastOfMonth UMonth:9601]
EXWD	MakeI(Dim:Cus Name)	[Dim:Cus Name]
EXWD	MakeQI(Dim:Cus Name)	@[Dim:Cus Name]
EXWD	MakeI(Dim:Cus Name Quote?)	same as above
EXWD	MakeI(Dim:Cus Name Trace?)	[? Dim:Cus Name]
EXWD	MakeI(Dot? Dim:Cus Name)	Cus.Name ([Cus* Name])
EXWD	MakeI(Dot? Dim:Cus Sales Fail::0)	Cus.Sales,0
EXWD	MakeI(IntMod:List Bits::10 Force?)	`List(Bits::10)
Mod	MakeIn	Construct a V4 In() Module	V4Int
Usage	inmod	"dim point"
Usage	inmod	"dim (name rel value)"
Params	inmod	"The resulting In() module call."
Params	dim	"A dimension name or dimension point."
Params	point	"A V4 point"
Params	name	"A (database) element name"
Params	rel	"A relation, one of: LT, LE, EQ, GE, GT, NE"
Params	value	"A V4 point value"
Desc
IPar	"This module constructs an " IntMod:In "() module from its arguments."
Examples
EXWD	MakeIn(emp salary:40000..50000)	In(emp.salary salary:40000..50000)
EXWD	MakeIn(emp (salary LT 100000)	In(emp.salary Int:<100000)
Mod	MakeL	Construct a V4 List	List
Index	MakeQL	Module	Str("v4refmod_d.htm#IntMod:MakeL")
Usage	list	"point point ..."
UsageX	value	MakeQL	"arguments same as MakeL"
Params	point	"One or more points."
Params	list	"The list made up of the argument points."
Desc
IPar	"" IntMod:MakeL " constructs a list of its arguments and returns it as its value. Note that lists of lists can \
be constructed through the nested use of this module."
IPar	"The argument UV4:none is ignored by this module (i.e. UV4:none points are not included in the list). To include this point, quote it."
IPar	"" IntMod:MakeQL " is identical to " IntMod:MakeL " except that a quoted list is returned."
Index	UV4:none	general	Str("v4refmod_l.htm#IntMod:MakeL")	MakeL	IntMod
Examples
EXWD	MakeL( now is the time )	(now is the time)
Mod	MakeLC	Construct a V4 List (Conditionally)	List
Usage	list	"logical point ..."
Params	list	"The list made up of the argument points."
Params	logical	"Any point which results in a logical value."
Params	point	"Any V4 point."
Desc
IPar	"" IntMod:MakeLC " constructs a list based on pairs of arguments. If the first point of a pair is true then the \
second point in the pair is included in the list. If it is not true then the second point in the pair is skipped."
IPar	"This module evaluates each of its arguments on an as-needed basis (i.e. if the first argument of a pair is FALSE then the \
second argument of the pair is NOT evaluated)."
Examples
EXWD	MakeLC(1 now 1 is 0 the 1 time)	(now is time)
EXWD	MakeI(APoint `MakeLC(DefQ(Dim1*) Dim1* DefQ(Dim2*) Dim2*))	constructs intersection of form [APoint ...] where "..." includes the values of Dim1* and/or Dim2* iff they are defined in the current context
Mod	MakeP	Construct a V4 Point	V4Int
Usage	newdim	"dimdim dimpoint"
Usage	dimpoint	"dimdim point"
Usage	newpoint	"dimpoint"
Usage	point	"tagpoint"
Usage	point	"tagpoint tagval"
Usage	point	"dimpoint StdIn?"
Usage	point	"dimpoint StdIn::promptpoint"
Usage	point	"dimpoint Special::specpoint [specval]"
Usage	point	"dimpoint pointval1 pointval2..."
Usage	point	"int2dim intval intval"
Usage	point	"teledim [country] areacity number [extension [type]]"
Usage	point	"teledim [type] alternate"
Usage	point	"xdbdim xdbId recId"
Usage	point	"uomdim num id index [casecount]"
Usage	point	"uomperdim num uom"
Usage	point	"uomperuomdim uom1 uom2"
Usage	point	"complexdim real imaginary"
Usage	point	"geodim latitude longitude [altitude [timezone]]"
Usage	point	"geodim latitude longitude altitude timezone distspd distuom speeduom altuom azimuth elevation datetime"
Usage	point	"caldim udate utime timezone daylightsavings"
Usage	point	"caldim udt timezone [daylightsavings]"
Usage	point	"udtdim cal timezone [daylightsavings]"
Usage	point	"udtdim cal geo [daylightsavings]"
Usage	point	"uddim year month day"
Usage	point	"umondim year month"
Usage	point	"uqtrdim year quarter"
Usage	point	"udtdim year month day [hour [minute [second]]]"
Usage	point	"utimedim hour minute [second]"
Usage	point	"utimedim second"
Usage	point	"uwkdim year week"
Params	newdim	"A newly created dimension with a name of MakeP" Param:num " where " Param:num " is a unique number."
Params	dimdim	"The Dimension dimension, i.e. Dim:Dim."
Params	dimpoint	"A dimension point, i.e. Dim: " Param:dimension "."
Params	newpoint	"A new point on the argument dimension."
Params	tagpoint	"A point on the Dim:Tag dimension such as Tag:If or Tag:While. If no " Param:tagval " is given then \
a tagged result point (<i>tag</i>?) is created."
Params	tagval	"The value to be linked to the tag point."
Params	StdIn?	"V4 prompts the connected user for the point value."
Index	StdIn	Tag	Str("v4refmod_m.htm#IntMod:MakeP")	MakeP	IntMod
Index	input	General	Str("v4refmod_m.htm#IntMod:MakeP")
Index	user input	General	Str("v4refmod_m.htm#IntMod:MakeP")
Params	promptpoint	"A point (usually a character string) to be used as a prompt for connected user input."
Params	specpoint	"One of: Current, PCurrent, Undefined, Now, Sample; or one of All, LE, GE, GT, or NE which must be \
followed by a third value (see discussion below)."
Params	specval	"A value that is required if " Param:specpoint " is one of LE, GE, GT, or NE."
Params	pointval	"A value for the point. Multiple value may usually be given."
Params	int2dim	"A dimension of point type " PntType:Int2 "."
Params	intval	"A integer value."
Params	teledim	"A dimension of point type " PntType:TelephoneNumber "."
Params	country	"A telephone country code (e.g. 1 for the USA)."
Params	areacity	"A area or city code."
Params	number	"A telephone number."
Params	ext	"An extension. A zero indicates no extension."
Params	type	"Type type of phone, one of: HOME, WORK, CELL or FAX."
Params	type	"If the arguments for a telephone point are not numeric then [UV4:AcceptorTele] is evaluated with the \
points. The result must be a list, an integer or an integer2 point."
Params	alternate	"An alternate (e.g. email address) electronic address. See " PntType:TelephoneNumber " for more details \
and examples."
Params	xdbdim	"A dimension of point type " PntType:XDB "."
Params	xdbId	"An external database Id."
Params	recId	"A record Id."
Params	uomdim	"A dimension of point type " PntType:UOM "."
Params	num	"An integer or real number."
Params	id	"An integer UOM id number."
Params	index	"An integer index into a UOM entry."
Params	casecount	"An integer case count."
Params	uomperdim	"A dimension of point type " PntType:UOMPer "."
Params	uom	"A unit-of-measure point."
Params	uomperuomdim	"A dimension of point type " PntType:UOMperUOM "."
Params	uom1	"The top (or numerator) unit-of-measure."
Params	uom2	"The bottom (or denominator) unit-of-measure."
Params	complexdim	"A dimension of point type " PntType:Complex "."
Params	real	"A real number."
Params	complex	"A real number representing the imaginary component of a complex number."
Params	geodim	"A dimension of point type " PntType:GeoCoordinate "."
Params	latitude	"A real number representing decimal latitude."
Params	longitude	"A real number representing decimal longitude."
Params	altitude	"A integer number representing elevation in meters."
Params	timezone	"An integer timezone."
Params	distspd	"The distance or speed."
Params	distuom	"If non-zero then unit-of-measure of distance."
Params	speeduom	"If non-zero then the unit-of-measure of the speed."
Params	altuom	"The unit-of-measure of the altitude."
Params	azimuth	"The azimuth in degrees."
Params	elevation	"The elevation in degrees."
Params	datetime	"The date-time as a " PntType:Calendar " point."
Params	caldim	"A dimension of point type " PntType:Calendar "."
Params	udate	"A universal date point."
Params	utime	"A universal time point."
Params	daylightsavings	"A point equal to Logical:True if daylight savings is in effect, False if not."
Params	udt	"A universal date-time point."
Params	udtdim	"A dimension of point type " PntType:DateTime "."
Params	utimedim	"A dimension of point type " PntType:UTime "."
Params	cal	"A calendar point."
Params	geo	"A geocoordinate point."
Desc
IPar	"The " IntMod:MakeP " module makes V4 points. It has several forms depending on the type of point to be made. \
This module shares some functionality with the " IntMod:Project " module."
IPar	"Note that this module never invokes the Acceptor that may be associated with a dimension. Use the " IntMod:Project " module \
to coerce or project an alpha point value to another dimension through its acceptor function."
IPar	"The " TagName:StdIn " tag may be used to input a point value from the connected user's console. The user is \
prompted with the given " Param:promptpoint " or '? ' if no prompt is specified. The user's input is then converted to \
the appropriate internal value as determined by the first argument dimension point. The module fails if the input is not \
a valid point <b>or a blank line is entered</b>."
IPar	"There are two ways to create dimension points. The first is with projection which converts a point's dimension to a \
dimension point. The second is with this module which attempts to create a dimension point from another point's value. See examples below."
Tag	Special	specval	"Create a special point on the dimension. Allowed values for " Param:specval " are: Current (for current value- <i>dim</i>*), PCurrent (for prior current- <i>dim</i>**), \
Undefined (for undefined value- <i>dim</i>:{undefined}), Now (for current date-time- <i>dim</i>:{now}), Sample (for a sample point- <i>dim</i>:{sample}), All (for all points- <i>dim</i>..), \
AllCnf (for all points/confirmed- <i>dim</i>...), LT/LE/GE/GT/NE (for the relational points) <b>note</b> these forms take an additional third argument."
Index	Current	general	Str("v4refmod_m.htm#IntMod:MakeP")
Index	PCurrent	general	Str("v4refmod_m.htm#IntMod:MakeP")
Index	Undefined	general	Str("v4refmod_m.htm#IntMod:MakeP")
Index	New	general	Str("v4refmod_m.htm#IntMod:MakeP")
Index	Now	general	Str("v4refmod_m.htm#IntMod:MakeP")
Index	All	general	Str("v4refmod_m.htm#IntMod:MakeP")
Index	AllCnf	general	Str("v4refmod_m.htm#IntMod:MakeP")
Index	Sample	general	Str("v4refmod_m.htm#IntMod:MakeP")
Index	LT	general	Str("v4refmod_m.htm#IntMod:MakeP")
Index	LE	general	Str("v4refmod_m.htm#IntMod:MakeP")
Index	GE	general	Str("v4refmod_m.htm#IntMod:MakeP")
Index	GT	general	Str("v4refmod_m.htm#IntMod:MakeP")
Index	NE	general	Str("v4refmod_m.htm#IntMod:MakeP")
Examples
EXWD	MakeP(Dim:Dim Dim:xxx)	makes a new dimension with the same type and characteristics of xxx
EXWD	MakeP(Dim:Dim xyz:abc)	attempts to return the dimension point Dim:abc (if it exists)
EXWD	Dim:=xyz:abc	returns the point Dim:xyz
EXWD	MakeP(Dim:xxx)	returns a new point on dimension xxx. This dimension must have the PointCreate New option.
EXWD	MakeP(pt Special::type)	creates a special point on the dimension associated with pt. The valid types are those supported by the {xxx} special types (e.g. Current, Undefined, Sample, All ...)
EXWD	MakeP(pt Special::rel value)	creates a relational point based on the dimension of pt and the value. The allowed rel values are LT, LE, EQ, GE, GT, and NE.
EXWD	MakeP(dim value ...)	creates a point reference on dim spanning all values.
EXWD	MakeP(Dim:dict string)	Converts an alpha string point to a dictionary point on dimension dict
EXWD	MakeP(Dim:aggval pt pt ...)	Creates an aggregate point on dimension aggval consisting of all specified points pt.
EXWD	MakeP(Dim:xxx string)	Converts the alpha string to a valid point on dimension xxx. If the conversion cannot be made then an error is generated.
EXWD	MakeP(Dim:xxx,yyy string)	Attempts to convert string to a point on dimension xxx. If successful then the point is returned. Otherwise an attempt is made to convert to a point on dimension yyy.
EXWD	MakeP(Dim:alpha pt)	Converts the point pt to an alpha (readable) format.
EXWD	MakeP(Dim:xxx StdIn?)	Prompts the user for a point on dimension xxx and returns it as the value
EXWD	MakeP(Dim:xxx StdIn::prompt)	Prompts the user with prompt for a point on dimension xxx.
EXWD	MakeP(Dim:Int now )	Int:5432902993
EXWD	MakeP(Dim:InvItem )	InvItem:32234 (creates a new point)
EXWD	MakeP(Int:123 Special::All)	Int..
EXWD	MakeP(Int:123 Special::LT 400)	Int:<400
EXWD	MakeP(Dim:UDate,Alpha 12/31/99)	UDate:991231
EXWD	MakeP(Dim:UDate,Alpha tomorrow)	Alpha:Tomorrow
EXWD	MakeP(Dim:UTime 3600)	UTime:01:00:00 (3600 seconds = 1 hour)
EXWD	MakeP(Dim:UTime 3 8 29)	UTime:03:08:29
EXWD	MakeP(Cus:123 Special::Current)	Cus*
EXWD	MakeP(Tag:UC)	UC?
EXWD	MakeP(Tag:Head "HoHoHo")	Head::"HoHoHo"
IPar	"The next example shows how a PointReference point can be used to create a list on a point-by-point basis-"
EX	Dim PR PointRef
EXWD	= MakeP(Dim:PR ())	makes a new point on the PR dimension with an empty list as the base
EX	PR:0
EX	=List(PR:0 Append::foo)
EX	=PR:0
EX	(FOO)
Mod	MakePm	Make a Point Referencing Multiple Values	V4Int
Usage	result	"dim point point tag..."
Usage	result	"point point tag..."
Params	result	"The resulting point is based on the arguments."
Params	dim	"The dimension of the resulting point."
Params	point	"A value point to be included in the result point."
Desc
IPar	"This module is similar to the " IntMod:MakeP " routine but is used to create point references with multiple values. \
The first argument may be either a dimension or a point on a dimension. \
Each additional argument must be of the identical point-type of the first argument (or point type of the dimension if it is the first argument)."
IPar	"This module shares some functionality with the " IntMod:Num " module."
IPar	"Many dimensions allow multiple values to be referenced as a single point. Such points can be constructed with this \
module by listings the values as arguments 2 through <i>n</i> where <i>n</i>-1 is the number of points (ex: MakePm(Dim:Int 2 4 6 8) \
results in Int:2,4,6,8. It is sometimes useful to have a point reference hundreds or thousands of values. This cannot be done \
by enumerating the values as arguments to " IntMod:MakePm " as there is a limit to the number of arguments within a V4 module. \
It is possible by specifying a list of points as the second argument. For example, MakePm(Dim:Int Num(1 To::2000)), creates the \
point Int:(1 2 ... 2000) which is actually a list value on the Int dimension. Caution must be exercised with \
this option. For example MakePm(Dim:Int (now is the time)) is valid, but if the results are inserted into the context \
and Enum(Int*...) is evaluated, the subsequent Dim:Int points would actually be Dim:NId points!"
IPar	"The value point UV4:none is ignored. If this point is required as a valid argument then use @UV4:none."
Examples
EXWD	MakePm(Dim:Int 1 4 Int:10..14 MakeP(Dim:Int 100 To::125))	Int:1,4,10..14,100..125
EXWD	MakeP(mDim:Int `Num(1 To::1000))	results in an error because module has too many arguments
EXWD	MakePm(Dim:Int Num(1 To::1000))	results in Int:(1..1000)
Mod	MakeT	Make a Test Intersection	V4Int
Usage	isct	"point point tag..."
Params	isct	"The intersection made up of the argument points."
Params	point	"One or more points."
Tag	Fail	point	"The " param:point " is appended as the failure point for the intersection."
Desc
IPar	"The " IntMod:MakeT " module is similar to the " IntMod:MakeI " module in that it constructs an intersection from its arguments. It is intended to create And/Or tests and has the following characteristics. If there are only two arguments then the second argument is returned as the value. If it has three or more arguments then the third through the last are quoted."
IPar	"The argument UV4:none is ignored by this module (i.e. UV4:none points are not included in the intersection). To include this point, quote it."
Examples
EXWD	MakeI(IntMod:And @GE(A* 100))	And(GE(A* 100)) 
EXWD	MakeT(IntMod:And @GE(A* 100))	GE(A* 100)
EXWD	MakeI(IntMod:And @GE(A* 100) @LE(B* 0))	And(GE(A* 100) LE(B* 0)) 
EXWD	MakeI(IntMod:And @GE(A* 100) @LE(B* 0))	And(GE(A* 100) @LE(B* 0)) 
EXWD	MakeI(IntMod:And @GE(A* 100) @LE(B* 0) Fail::Logical:True)	And(GE(A* 100) @LE(B* 0)),Logical:True
EXWD	MakeI(IntMod:And)	results in Logical:True
Mod	Maximum	Return Largest Point	RelLog List Math
Usage	largept	"num num num ... dim"
Usage	largept	"list dim"
Params	largept	"The largest number in the argument list."
Params	num	"A numeric argument."
Params	list	"A list of numbers."
Params	dim	"If specified, the result is returned on that dimension."
Desc
IPar	"The " IntMod:Maximum " module iterates through all arguments and returns the largest point. If the single argument is a " Param:list " then \
the module returns the largest number in the list. See also " IntMod:StatMax " and " IntMod:Optimize "."
Examples
EXWD	Maximum( 1 2 3 4 5)	Returns 5
Mod	Message	Send/Receive Message to/from Other V4 Processes	OSRel V4Int
Usage	result	"tagarg ..."
Params	result	"Depends on the arguments."
Params	tagarg	"One or more of the tagged arguments below."
TagRes	Calendar	"Returns the calendar date-time that the message was sent. Note: " PntType:Calendar " points are \
date-times relative to GMT."
Tag	Close	lstnid	"Shut down the listener process with identifier " Param:lstnid " and free all resources associated with it. \
Any messages remaining in the message queue from the listener will remain until removed with the " TagName:Delete " option."
Tag	Delete	msgid	"Delete the message with identifier " Param:msgid " from the listener message queue."
Tag	Dim	dimension	"If this argument is specified when defining a listener then " Param:dimension " will be \
updated with number of messages in the queue and inserted into the context whenever a message is received or removed."
Tag	Group	ipaddress	"Specifies the IP address to be used with multi-cast messages (sending and receiving)."
Tag	Host	ipaddress	"Specifies the IP address to be used with normal messages (sending and receiving). The format \
can be any valid IP address specification. A port may be optionally given with the standard ':<i>portnumber</i> syntax."
Tag	Id	id	"Defines a text identifier for the current message being sent."
TagRes	Id	"Returns a list with two elements that identify the sender and listener(receiver) of the current message. \
If the message is associated with an error then an empty list is returned."
Tag	Listen	how	"Starts up a new listener process. If " Param:how " is <b>Queue</b> (default) then received messages are queued and available for processing \
in FIFO order. If " Param:how " is <b>Context</b> then all messages are considered as \
V4 points and inserted into the context upon receipt. The value returned is the <i>listener id</i> associated with this message handler. \
This " Param:lstnid " may be used as the argument to the " TagName:Close " option to shut down a message listener."
TagRes	Listen	"Starts up a new listener process (" TagName:Listen ":<b>Queue</b>) as defined by the prior arguments to the module."
Tag	ListOf	lstnid	"Returns a list of all messages in the queue for the defined listener. The module fails if there are \
currently no messages for that listener."
TagRes	ListOf	"Returns a list of all messages in the queue for all listeners. The module fails if there are currently no \
messages in the queue."
TagRes	Message	"Returns the message as defined by the current message identifier."
TagRes	Next	"Returns the unique identifier of the next message in the queue."
TagRes	Peer	"Returns the IP address associated with the sender of the current message."
Tag	Reply	logical	"Used by a message sender to notify listening process that it is (not) expecting a reply. If " param:logical " is TRUE then a reply \
is expected and the listening process <b>must</b> send a reply."
Tag	Reply	msgtext	"The listening process is sending " param:msgtext " back to the client process as the reply to its request."
Tag	Send	msgtext	"Sends " Param:msgtext " to the listener defined through the " TagName:Host " parameter."
Tag	Send	list	"Sends a " Param:list " of points. This is primarily for receivers with the " TagName:Listen ":Context option. The list \
is entered into the receiver's context as a single point."
Tag	Send	`list	"Identical to the above except that all points in the list are evaluated before being sent. Upon receipt, each point in \
the " Param:list " is entered as a separate point into the receiver's context."
Tag	Sequence	msgid	"Specifies the message id when used with the " TagResName:Message ", " TagResName:Id ", etc. options."
Tag	Spawn	cmdline	"This argument may be used when sending a message. If the " Tag:Host " IP address/port is not currently \
listening for a message, V4 will spawn a subprocess and execute " Param:cmdline " within that process. This subprocess \
should be a V4 process defining a listener so that the message may be sent."
Tag	TTL	value	"Defines the time-to-live parameter for multi-cast messages sent over the network. The default is a \
value of 1 (Subnet). The allowed " Param:value "s are: a number from 0 to 255 or one of the following- Continent, Host, \
Region, Site, Site, Unrestricted. See <a href='http://en.wikipedia.org/wiki/IP_multicast' target=_blank>IP multicast</a> for more information on this option."
Tag	Wait	timelim	"Wait a maximum " Param:timelim " seconds for a message. If no message is received within this time \
limit, the module fails. This option may also be used when sending messages. In this case the parameter represents the number \
of seconds to wait before the receiver is <i>allowed</i> to see the message. That is the message is sent immediately and enters \
the receiver's queue but will not be accessable until the specified time limit is up."
Desc
IPar	"This module is used to send and receive messages among cooperating V4 processes. Messages can be sent directly from \
one process to another or a message can be broadcast to an undetermined number of listeners. This module currently uses TCP/IP for \
direct process-to-process messages and IP multicasting for broadcasting. However this is subject to change and applications using \
this feature should not assume or depend on any IP specific features."
IPar	"If errors occur during the receipt of a message then a message is created with the text being a description of the \
error. Errors can be differentiated from normal messages with the " TagResName:Id " argument."
EXML	"Sending an XML message"
ML	[ExampleMsg] "<msg> <field1>value1</field1> <field2>value2</field2> </msg>"
ML	Eval Message(Host::"www.anothersystem.com:4567" Id::"Test" Send::[ExampleMsg])
EXML	"Receiving and Parsing an XML Message"
ML	[ListenerRoutine]
ML	&nbsp;Do(Message(Ack::@Str("Ack # " Counter(Next::Ack)) Id::"Listener1" Host::"www.anothersystem.com:4567" Listen?)
ML	&nbsp;&nbsp;&nbsp;&nbsp;Enum(While::TRUE
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Do(Context::MsgId:=Message(Wait::99999 Next?)
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MsgId.LogMsgReceipt
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Context::Parse(Message(Sequence::MsgId* Message?) Tree::Dim:HTree XML?)
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[HandleMessageRoutine]
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Message(Delete::MsgId*) Tree(HTree* Remove?)
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;))
ML	&nbsp;&nbsp;&nbsp;)
EXML	"A Customer Lookup Example"
ML	Dim msgId Int
ML	/* This example sets up listener (server) waiting for customer lookup pattern string
ML	   It first spins through the customers and creates a temp file with name and address information
ML	   It then waits for a request on port 6000 to come in and compares the request against the customers in the temp file
ML	   All matches are returned as a JSON array cusLookup:[[ref,name,city,state,zip],[...]...]
ML	   A sample request would be sent with: Message(Host::Str(OSInfo(IPAddress?) ":" 6000) Reply::TRUE Send::"WASH PA")
ML	*/
ML	Set Trace +TimeStamp
ML	[messageTest]
ML	&nbsp;Do(
ML	/*  Make a temp file of customer attributes for searching */
ML	&nbsp;&nbsp;&nbsp;&nbsp;Context(fileName:=[xlb:fileName fileType:temp]) Output(Create::fileName* Id::cus)
ML	&nbsp;&nbsp;&nbsp;&nbsp;Enum(cus.. @EchoT(Out::cus cus* Str(cus.name '\t' cus.city UC?) cus.state cus.zip)) Output(Id::cus Close?)
ML	&nbsp;&nbsp;&nbsp;&nbsp;Message(Host::Str(OSInfo(IPAddress?) ":" 6000) Listen?)
ML	&nbsp;&nbsp;&nbsp;&nbsp;Enum(Num::99999
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Do(Context::msgId:=Message(Wait::999999 Next?)
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Context::Str(Message(Sequence::msgId* Message?) UC? Split::" ")
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Context::EnumCL(OSFile(fileName* ListOf?) If::Str(Alpha* All::List*) @Str(Alpha* Split::"\t"))
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EchoD(Str(msgId* " Lookup(" Message(Sequence::msgId* Message?) ") returns " ListSize(List*) " results"))
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Message(Sequence::msgId* Reply::JSON(Name::"cusLookup" List*))
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Message(Delete::msgId*)
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;))
ML	&nbsp;&nbsp;&nbsp;)
ML	Eval [messageTest]
Mod	Minimum	Return Smallest Point	RelLog list Math
Usage	smallpt	"num num num ... dim"
Params	smallpt	"The smallest number in the argument list."
Params	num	"A numeric argument."
Params	dim	"If specified, the result is returned on that dimension."
Desc
IPar	"The " IntMod:Minimum " module iterates through all arguments and returns the smallest point. If the single argument is a " Param:list " then \
the module returns the smallest number in the list. See also " IntMod:StatMin " and " IntMod:Optimize "."
Examples
EXWD	Minimum( 1 2 3 4 5)	Returns 1
Mod	Minus	Negation or Difference of Two Numbers	Math
Usage	negation	"npt1"
Usage	resnum	"npt1 npt2..."
Params	negation	"The negation of the argument. If the argument is a number then 0-number is returned. If the argument is a logical, then the negation of the argument is returned."
Params	resnum	"The resulting numerical point. Note that the dimension of the result is always the dimension of the second argument to the module unless it is of dimension Int. In this case the dimension of the first point is used."
Params	npt1	"A numerical point."
Params	npt2	"A numerical point."
Desc
IPar	"In its unary form, " IntMod:Minus " negates its argument. With more that one argument, " IntMod:Minus " simply subtracts the second  through last argument from the first, returning the result in the dimension of the first argument from the right that is not of the Int dimension. Use dimension projection to force points back to wanted dimensions."
Examples
EXWD	Minus(UDate:961231 UDate:961101)	UDATE:18590116
EXWD	Int:=Minus(UDate:961231 UDate:961101)	INT:60
EXWD	Minus(UMonth:9612 10)	UMonth:9602
EXWD	Minus(Logical:True)	Logical:False
Mod	MT	Determines if a point is Empty	RelLog List Math V4
Usage	logical	"point tag tag.."
UsageX	point	nMt	"point"
Params	point	"The point to be tested for <i>emptiness</i>."
Params	tag	"One or more of the tagged arguments below."
Tag	Then	point	"Evaluate and return " Param:point " if the first argument is (not) empty."
Tag	Else	point	"Evaluate and return " Param:point " if the first argument is (not) empty."
Desc
IPar	"This module tests its argument and returns Logical:True if it is empty, Logical:False otherwise. The " IntMod:nMT " returns the logical compliment (i.e. not empty)."
IPar	"Any point with a value of 'none' is considered empty."
IPar	"A string is considered empty if it is  has no length or consists solely of whitespace. A list is empty if it contains no points. A drawer is empty if it contains no points. \
A number is empty if it is equal to zero."
Examples
EXWD	MT("   ")	returns TRUE
EXWD	nMT(" xxx")	returns TRUE
EXWD	MT(Alpha* Then::empty Else::full)	returns NId:empty if Alpha* is empty, NId:full otherwise
EXWD	MT(@[])	returns TRUE
Mod	MthMod	Calculates Number Modulo n	Math
Usage	resnum	"npt1 npt2"
Params	resnum	"The resulting numerical point."
Params	npt1	"A numerical point."
Params	npt2	"A numerical point."
Desc
IPar	"This module divides the first argument by the second and returns the remainder as the result. If " param:npt2 " is negative then it is converted to a positive. If " param:npt1 " is positive then the result is always between 0 and " param:npt "2-1. If " param:npt1 " is negative then the result is always between -(" param:npt "2-1) and 0."
Examples
EXWD	MthMod(11 10)	Int:1
Mod	Mult	Multiplication of Two Numbers	Math
Usage	resnum	"npt1 npt2 tagarg"
Params	resnum	"The resulting numerical point. Note that the dimension of the result is always the dimension of the second argument to the module."
Params	npt1	"A numerical point."
Params	npt2	"A numerical point."
Tag	Round	n	"Round the results to " param:n " decimal places if " param:n " is positive, or to the nearest power of 10 if " param:n " is negative."
Desc
IPar	"This module multiplies its two arguments."
Examples
EXWD	Mult(Real:5 15)	Int:75
EXWD	Mult(344.44 21.33)	Num:7346.9052
EXWD	Mult(344.44 21.33 Round::3)	Num:7346.905
EXWD	Mult(344.44 21.33 Round::-3)	Num:7000
Mod	Names	Performs various operations on proper names	DBase String
Usage	result	"arg1 arg2 ..."
Params	result	"The returned " Param:result " depends on the arguments. It is usually a point on the Dim:Alpha dimension."
Params	arg<sub>n</sub>	"A string/alpha point or one of the tagged arguments below."
Tag	Append	tagval	"Appends then defined name component to the current name. The " Param:tagval " parameter must be \
itself a tagged value defining the particular name component."
TagRes	Capitalize	"Capitalizes the first letter of each name component and converts remaining letters to lower case."
Tag	GivenName	string	"Defines the given or first name as " Param:string "."
Tag	Has	tagval	"Tests to see if the current name has " Param:tagval " as a component. This must itself be a tagged \
value defining a particular name component. Logical:True or Logical:False are the two possible return values. Multiple " TagName:Has " tags \
may be given. All must match for Logical:True to be returned. If the matching is done on a hyphenated name then Logical:True results \
if the " TagName:Has " argument does not contain a hyphen (or dash) and is contained within the hyphenated name. If the argument \
contains a hyphen then the two names must match exactly."
TagRes	LC	"Convert the name to all lower case."
Tag	Mask	pattern	"Output the name according to the mask pattern. See below for pattern elements."
Tag	MiddleName	string	"Defines the middle name as " Param:string "."
Tag	Name	namestr	"Defines the " Param:namestr " as an internally formatted V4 name."
Tag	NickName	string	"Defines nickname as " Param:string ". More than one nickname may be given."
Tag	Patronymic	string	"Defines the patronymic portion of a name (same as middle name)."
Tag	Replace	tagval	"Replaces the named component as defined by " Param:tagval " with the new value. The " Param:tagval " argument \
must itself be a tagged argument."
Tag	Soundex	tagval	"Tests to see if the current name has a component that matches according to the soundex algorithm. \
The " Param:tagval " argument must be a tagged value."
Tag	Surname	string	"Defines the surname or family name (last) as " Param:string "."
Tag	Suffix	string	"Defines a name suffix as " Param:string ". More than one suffix may be given. Typical suffixes \
include JR, III, MD, etc. V4 strips out punctuation and normalizes capitalization."
Tag	Title	string	"Defines a title as " Param:string ". More than one title may be given."
Tag	Type	typenum	"Defines the type of name. The currently supported types are 0 (Western style), 1 (Hispanic), \
2 (Chinese), 3 (Russian), 4 (Arabic)."
TagRes	Format	"Format the current name according to the defined type style."
TagRes	GivenName	"Returns the given (first) name within the current name."
TagRes	MiddleName	"Returns the middle name within the current name. The module fails if no middle name has been given."
TagRes	Name	"Returns the corresponding internally formatted V4 name."
TagRes	Nickname	"Returns all nicknames associated with the current name. The module fails if no nicknames have been given."
TagRes	Patronymic	"Returns the patronymic (middle) name."
TagRes	Sort	"Returns the name in a format suitable for sorting: '<i>surname</i> <i>givenname</i> <i>middle</i>' in uppercase, no punctuation."
TagRes	SurName	"Returns the surname or family name of the current name."
TagRes	Suffix	"Returns any suffixes associated with the current name. The module fails if no suffixes are defined."
TagRes	Title	"Returns any titles associated with the current name. The module fails if no titles are defined."
TagRes	Type	"Returns the type code associated with the name."
TagRes	UC	"Converts the name to all upper case."
Desc
IPar	"This module is used for manipulating people's names. The first argument is a name which, based on the type, is converted to a common internal format. \
Tagged arguments can then be used to extract or arrange any of the name components."
IPar	"The " TagName:Mask " argument is used to format the name or any selected subset of the name. The table below describes the pattern elements. Any characters in the pattern \
that are not given below are copied as-is to the output string. If the selected element is not within the name then nothing is copied to the output string."
Table	Format Mask Elements	0	0	#E6E6C0
TE	"G" "References the given (first) name"
TE	"g" "References the first character of the given name"
TE	"M" "The middle name"
TE	"m" "The first character of the middle name"
TE	"P" "References the patrynomic component of the name"
TE	"p" "The first character of the patrynomic"
TE	"N" "The nickname"
TE	"S" "Refers to the surname (last name) component"
TE	"s" "The first character of the surname"
TE	"T" "The title"
TE	"X" "The name suffix"
IPar	"v4_home:v4NamesInfo.v4i"
Examples
EXWD	Names(GivenName::"John" Nickname::"OD" NickName::"Snake" MiddleName::"Q" Surname::"Doe" Name?)	Alpha:"John#OD+Snake+Q%Doe!"
EXWD	Names("Doe, John" Format?)	Alpha:"John Doe"
EXWD	Names("Doe, John" Type::2 Format?)	Alpha:Doe John" (Chinese naming has surname first.)
EXWD	Names("John Doe" Soundex::Surname::"doh")	Logical:True ("Doe" sounds like "doh")
EXWD	Names("John Doe" Has::Surname::"doe")	Logical:True (capitalization does not matter)
EXWD	Names("Victor Hyde-Smithers" Has::Surname::"Smithers")	Logical:True
EXWD	Names("Victor Hyde-Smithers" Has::Surname::"Hyde-Smithers")	Logical:True
EXWD	Names("Victor Hyde-Smithers" Has::Surname::"Hyde-Smithee")	Logical:False
EXWD	Names("Victor E. Hansen" Mask::"gms")	Alpha:"VEH"
EXWD	Names("John Doe" Mask::"S, G")	"Doe, John"
Mod	NE	Not Equal Test	RelLog
Usage	logical	"npt1 npt2"
UsageX	logical	NEk	"npt1 npt2"
Params	logical	"Logical:TRUE or FALSE depending on the result of the comparison."
Params	npt1	"A point."
Params	npt2	"A point."
Desc
IPar	IntMod:NE " tests for the inequality of two point. Two points are not equal if they are of different dimensions or value. " IntMod:NEk " differs from " IntMod:NE " much like " IntMod:EQk " differs from " IntMod:EQ ". Two points are not equal only if their point values differ."
Examples
EXWD	NE(1 2)	Logical:True
EXWD	NE(100 Real:100)	Logical:True
EXWD	NEk(100 Real:100)	Logical:False
EXWD	NE(Country:UK Country:UK)	Logical:False
Mod	Nop	NoOperation	V4Int
Usage	true	""
Usage	true	"true"
Usage	undef	"false"
Params	none	"no parameters"
Desc
IPar	"The " IntMod:NOp " module does what is says- nothing. If it is called with no arguments it returns Logical:True. If it is called with an argument that evaluates to logical true it returns Logical:True. If the argument evaluates to false then " IntMod:NOp " fails and does not return a value."
Examples
EXWD	Enum(list @NOp())	Enumerates through the list, but does nothing (unless the enumeration through the list performs some actions).
Mod	Not	Logical Not	RelLog
Usage	logres	"logical"
Params	logres	"Logical True or False- the compliment of its argument."
Params	logical	"An argument evaluating to True or False."
Desc
IPar	"The " IntMod:Not " module returns the logical compliment of its argument."
Examples
EXWD	Not(12)	Logical:False (12 evaluates to Logical:True)
EXWD	Not(Logical:False)	Logical:True
Mod	Num	Performs Various Operations on Numbers and Dates	List Math DateTime
Usage	list	"base tagarg"
Params	result	"The resulting list or number"
Params	base	"The base number or date"
Params	tagarg	"One or more of the tagged arguments below"
Tag	By	amount	"Increment the elements of the list by " Param:amount "."
Tag	Number	num	"The total number of elements in the list."
Tag	Prime	num	"Returns the first prime number that is equal to or greater than " Param:num "."
Tag	To	num	"Generates a list of numbers from the " Param:base " to " Param:num "."
TagRes	Fractional	"Returns the fractional portion of the number."
TagRes	ListOf	"Converts the first argument number into a list of digits and appropriate punctuation characters. The digits are points on Dim:Int \
and the punctuation characters are points on Dim:UV4 (UV4:Plus, UV4:Minus, UV4:Dot, UV4:Exponent)."
TagRes	Number	"The " IntMod:Num " module returns the number of elements that would have been in the list."
Tag	Round	npt	"Round number to specified precision of " Param:npt "."
Tag	Round	Down	"Round number down to nearest integer."
Tag	Round	Up	"Round number up to nearest integer."
TagRes	Sign	"Returns the sign of the " Param:base " number (-1 for negative, 0 for 0, +1 for positive)."
TagRes	Prime	"Returns TRUE if " Param:base " is a prime number, FALSE otherwise."
TagRes	Abs	"Returns the absolute value of the " Param:base "."
TagRes	Negate	"Returns the negative of the " Param:base "."
TagRes	Integral	"Returns the integral portion of the " Param:base "."
Desc
IPar	"This module performs various operations on numbers and dates. Tagged results can be specified to convert or return information about \
the " Param:base ". Combinations of the " Param:To ", " Param:By ", and " Param:Number " tags are used to generate lists of numbers or dates."
IPar	"See also the " IntMod:MakePm " module for creating multiple-value points."
EXWD	Num(1234 Prime?)	returns Logical:No
EXWD	Num(UDate:010101 By::15 Number::10)	returns the list (UDate:01-Jan-01..UDate:16-May-01..15)
EXWD	Num(10 To::1000 By::23 Number?)	returns Int:43 (the number of increments from 10 to 1000 by 23)
EXWD	Num(100 To::10)	returns the list(Int:100..10..-1)
EXWD	Num(3.14159 Fractional?)	returns Num:0.14159
EXWD	Num(123.45 Round::50)	returns 100
EXWD	Num(123.456 Round::0.01)	returns 123.46
Mod	dbInfo	Return Information on Current Connection or Statement	Database Related	DBase OSRel
Usage	result	"tagres tagarg"
Params	result	"The result of the call, based on Tagged Result below"
Params	tagres	"Tagged point indicating wanted result, see list below."
Params	tagarg	"One or more of the tagged arguments below."
Tag	Column	npt	"The column number to return information on. Mandatory unless " TagResName:Columns " specified as tagged result."
Tag	Dim	dim	"Use the statement associated with the connection associated with " Param:dim "."
Tagres	ColCap	"The column caption (field name)."
Tagres	Columns	"The number of columns returned from the last " IntMod:dbGet " processing."
TagRes	Connection	"Returns the full connection string when a connection is made with the " IntMod:dbConnect "(" TagName:Connection ") option."
Tagres	Length	"The length of the column."
Tagres	Precision	"The precision of the column"
Tagres	Scale	""
Tagres	Table	"Returns a list of tables in the specified database. The list entries are points on Dim:Alpha."
Tagres	Type	"The internal type code of the column. See an ODBC manual for the meanings."
Desc
IPar	"The " IntMod:dbInfo " module returns information about the results of the last " IntMod:dbConnect " or " IntMod:dbGet " module processing."
Examples
EXWD	Dim mysql XDB	Creates an external database dimension
EXWD	dbConnect(Dim:mysql DSN::table Access::mySQL User::root Password::"secret" Id::mysql)	Connects to the mySQL database 'table'
EXWD	dbInfo(Connection::mysql Table?)	Returns a list of all the tables in the above database
EXWD	EnumCL(Col:=dbInfo(Columns?) @dbInfo(Column::Col* ColCap?))	returns a list of column names from last dbGet()
Mod	dbConnect	Connect to an external Dataset	DBase OSRel
Usage	odbccon	"tagarg tagarg..."
Params	odbccon	"A point on the odbc dimension representing the connection."
Params	tagarg	"Two or more of the tagged arguments below."
Tag	Access	method	"Determines the access " Param:method " to the database. The supported methods are <b>ODBC</b> (default) for an ODBC connection and <b>mySQL</b> for direct linkage to a \
mySQL database."
Tag	AutoCommit	logical	"Sets the auto-commit-of-transactions mode for the connection. The default is Logical:No for no auto-commit. \
Various interfaces seem to like different settings. Most want no auto-commit (the default). The <a href='http://www.ibm.com/servers/eserver/iseries/' target=_blank>IBM iSeries ODBC interface to the AS400</a> likes to \
have auto-commit enabled."
TagRes	Active	"Returns Logical:true is the connection is currently active (i.e. in process of returning rows from a prior " IntMod:DBGet ") and Logical:false if it is idle."
Tag	Commit	logical	"Commits (if " Param:logical " is TRUE) or rolls back (if " Param:logical " is FALSE) the prior transactions. This option may only be used when " TagName:AutoCommit " is set to FALSE."
Tag	Connection	spt	"An alpha string giving optional connection information. (Same as the " Tagname:Host " tag.)"
Tag	Dim	dpt	"A dimension of type XDB. The module returns a point on this dimension corresponding to the connection. This is a mandatory argument."
Tag	DSN	spt	"An alpha string specifying the dataset to connect to."
Tag	Host	spt	"An alpha string giving optional connection information. (Same as the " Tagname:Connection " tag.)"
Tag	Id	conid	"Assigns the identifier " Param:conid " to the connection. This may be referenced in other " IntMod:dbConnect ", " IntMod:dbXct " and " IntMod:dbGet " modules."
TagRes	Open	"Returns TRUE if the specified connection (see " TagName:Id " option) has already been opened. The module fails otherwise."
Tag	Password	spt	"An optional string argument with the user's password. A zero-length string is ignored."
Tag	Port	number	"Overrides the default TCP/IP port number used for connecting to a database engine (e.g. mySQL)."
TagRes	Reset	"Resets the connection with the database server. This can be used to clear mySQL out-of-synch errors."
Tag	User	spt	"An optional string argument with the user's name.  A zero-length string is ignored."
Desc
IPar	"The " IntMod:dbConnect " module makes a new connection to the specified data set. The User and Password tags are needed only if the data set requires them."
IPar	"If the " TagName:Access " is via ODBC then the " TagName:DSN " option is a 'data source name' that must be predeclared on the host system. Instructions for doing this can \
be found <a href='http://msdn.microsoft.com/en-us/library/ca6axakh(VS.80).aspx' target=_blank>here</a>."
IPar	"If the " TagName:Access " is via mySQL then the " TagName:DSN " option is the name of a mySQL database."
Examples
EX	"dbConnect(DSN::MyData User::Freddy Password::Secret)"
Mod	dbError	Returns Last External Database Error Message as Alpha Point	DBase	OSRel
Usage	errpt	""
Usage	point	"tagarg"
Params	errpt	"The last error message generated by any of the dbXXX modules."
Params	point	"The resulting point"
Params	tagarg	"One or more of the tagged arguments below."
TagRes	Error	"Returns the last error."
Desc
IPar	"This module returns the last error generated by any of the dbXXX modules."
Examples
EXWD	dbError(Error?)	Returns the last error
EXWD	dbError()	Same as the prior example
Mod	dbFree	Free an External Database Connection or Statement	DBase OSRel
Usage	logres	"odbc"
Usage	logres	"tagarg tagarg"
Params	logres	"The module always returns Logical:True."
Params	odbc	"An XDB point such as one returned by the " IntMod:dbConnect " module."
Params	tagarg	"One or more of the tagged arguments below."
Tag	Connection	conid	"Free (close) the connection previously opened with " IntMod:dbConnect "(" TagName:Id ":" Param:stmtid ")."
Tag	Dim	dim	"Use the statement associated with the connection associated with " Param:dim "."
Tag	Statement	stmtid	"Free the statment previously defined with " IntMod:dbGet "(" TagName:Id ":" Param:stmtid ")."
TagRes	All	"Frees all connections and statements currently active."
Desc
IPar	"This module frees up the resources taken by an XDB statement or connection. If the DBC argument is given then the entire connection is dropped."
Examples
EX	"dbFree(Stmt::ODim*)"
Mod	dbGet	Retrieve Statement RowSet from Datasource	DBase OSRel
Usage	odbcstmt	"tagres tagres"
Params	odbcstmt	"An odbc point corresponding to the results of the processing of the SQL statement."
Params	tagarg	"One or more of the tagged arguments below."
Tag	Begin	isct	"Evaluate the " Param:isct " after the data has been retrieved but before any of the data is returned. For example, this can be used to \
initialize based on the number and names of the returned columns."
Tag	Cache	log	"This option is used to override the automatic caching of retrieved records. If " Param:log " is TRUE then the current row \
is saved. If FALSE then then current row is not saved."
Tag	Close	log	"If " Param:log " is TRUE then both the statement and connection associated with this XDB request are closed \
after the last row is returned. If FALSE (default) then only the statement is released, the connection is kept open."
Tag	Connection	id	"Perform the access via the connection defined by " Param:id ". This identifier must have been set with the " TagName:Id " option in the " IntMod:dbConnect " call that opened the connection."
Tag	Dim	dim	"Use this dimension to find the associated connection. The " Param:dim " must have been used in a prior call to " IntMod:dbConnect "."
Tag	Do	qisct	"Evalute the quoted intersection after each row is obtained. Normally this module returns a list of XDB points which reference \
the rows of the selected table. With this option, the result of evaluating " Param:qisct " is the returned unless the result is UV4:none."
Tag	End	qisct	"An optional quoted intersection point. If given then this point is evaluated after the last row is returned."
Tag	Id	stmtid	"Identifies this selection as " Param:stmdid ". This statement may be then referenced within a subsequent " IntMod:dbGet " or " IntMod:dbInfo " call via the " TagName:Statement " tag."
Tag	ListOf	option	"Returns various lists depending on " Param:option ". If " Param:option " is <b>Ids</b> then a list of prior " IntMod:dbGet " statements associated with the current dimension \
are returned (i.e. the " TagName:Id " values). If " Param:option " is <b>Rows</b> then a list of the rows associated with this selection are returned. If " Param:option " is <b>Save</b> \
then all of the rows to be selected are automatically saved within V4 and may be accessed at any later time with in the current V4 process."
TagRes	ListOf	"This is the same as specifying a " TagName:ListOf ":<b>Save</b> option."
Tag	ListOf	log	"Specifies whether or not V4 is to keep a list of the rows returned. If " Param:log " is FALSE (default) then no list is maintained. If TRUE \
then a list is saved and may be referenced with the " TagResName:ListOf " opttion."
TagRes	ListOf	"When used with dimension, returns a list of statement identifiers associated with a dimension (see examples below). When used with a statement id, \
it returns a list of all points selected in that statement."
TagRes	Num	"Returns the number of rows in the rowset. Note that most ODBC drivers do not implement this capability. If the feature is not \
supported then -1 is returned."
Tag	SQL	spt	"An alpha string to be processed as an SQL statement against the dataset. If no DBC tag is given then the first connection made is defaulted. This is a mandatory argument."
Tag	Statement	stmtid	"This call is referencing a prior " IntMod:dbGet " identified with the " TagName:Id " option, not creating a new set of rows."
Tag	Table	name	"Returns a rowset of all the columns within the table " Param:name ". For mySQL databases this consists of the following information: <i>fieldName dataType isNULLOK isKey defaultValue otherParams</i>."
TagRes	Table	"Returns a rowset of all tables within the datasource."
Tag	Target	dim	"Specifies a target dimension for the resulting row points. If this option is not given then V4 uses an internal value to represent each point. If \
a " Param:dim " is given, then this " IntMod:dbGet " call returns points on that dimension. See also the " TagName:Value " option."
Tag	Type	tabletype	"Instead of returning a rowset from a table, this option returns a rowset of tables that \
are of type " Param:tabletype ". This option may be used in conjunction with the " TagName:Table " tag."
TagRes	Unique	"Not yet implemented."
Tag	Value	colnum	"Specifies the column number (" Param:colnum ") to be used as the value for each row. A " TagName:Target " must also be given to use this option. \
The results of this call will be a list of points on the target dimension corresponding to the value in the " Param:colnum " column of each row. If this option is not specified then the values of the points in the list \
will start with 1 and increment by one for each subsequent point. With this option, the values correspond to the value of " Param:colnum " for the row being returned."
Desc
IPar	"This module passes the specified SQL command to the handler associated with the specified data set (connection). \
The resulting point represents the results of the command. In most cases the point must be coerced to a list to access \
the individual rows of the resulting table."
IPar	"If the result of this module is used as a list to another module then the statement and connection are automatically freed \
when then end-of-list is reached."
IPar	"The " TagName:Table " and " TagName:Type " arguments may be specified instead of the " TagName:SQL " argument to \
return a rowset of tables within the current dataset. The columns returned are TABLE_QUALIFIER (usually the actual file \
containing the dataset), TABLE_OWNER (the owner of the table), TABLE_NAME (the name of the table), TABLE_TYPE (the type \
of table), and REMARKS (a description of the table). Any column value that does not apply is returned as a NULL value."
Examples
EXWD	[CusList] dbGet(SQL::"Select Name,ID,State From Customers")	binding to select the name, id, and state from the Customers table
EXWD	dbConnect(Dim:ODBCX DSN::TestDatabase)	connect to database
EXWD	Enum([CusList] @EchoT(dbVal(ODBCX* Dim:Alpha 1) dbVal(ODBCX* Dim:State 3))	echos the name and state for all rows selected
EXWD	Enum(dbGet(ODBCX Table?) @EchoT(dbVal(O* Dim:Alpha Int*),"x"/Int:1..5))	lists all tables, views, etc. in the datasource
EXWD	Enum(dbGet(Dim:O Table::"%info%" Type::Table) @EchoT(dbVal(O* Dim:Alpha Int*),"x"/Int:1..5))	lists just tables matching the pattern "*INFO*"
EXML	"Show all tables and columns in mySQL database"
ML	[showMYSQLTables]
ML	 Do(dbConnect(DSN:<i>dataSetName</i> Id::mySQL Access::mySQL User::<i>userName</i> Password::<i>userPassword</i>)
ML	&nbsp;&nbsp;&nbsp;&nbsp;EchoT("Field" "Type" "NULL OK" "Key" "Default" "Other")
ML	&nbsp;&nbsp;&nbsp;&nbsp;Enum(dbInfo(Connection::mySQL Table?)
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Do(Echo("Table " Alpha*)
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enum(dbGet(Connection::mySQL Table::Alpha*)
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Do(EchoT(dbVal(mySQL Dim:Alpha 1) dbVal(mySQL Dim:Alpha 2) dbVal(mySQL Dim:Logical 3) dbVal(mySQL Dim:Alpha 4) dbVal(mySQL Dim:Alpha 5),"(null)" dbVal(mySQL Dim:Alpha 6))
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;))
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;))
ML	&nbsp;&nbsp;&nbsp;)
Mod	dbVal	Retrieve Column Value from Current Row	DBase OSRel
Usage	value	"xdb Dim:dim column"
Usage	value	"xdb dfltval column"
Usage	value	"xdb column"
Params	value	"The value of the specified column"
Params	xdb	"An XDB point corresponding to a row in a processed statement. This may be the current value of an XDB dimension, a reference \
to the dimension itself, or a statement " TagName:Id " declared in the " IntMod:dbGet "() call."
Params	Dim:dim	"An optional dimension for the result. If no Dimension is given then the dimension is automatically determined from the internal XDB column type."
Params	column	"The column number to retrieve."
Params	dfltval	"If the second argument is a point <b>not</b> on Dim:Dim then the returned point is coerced to a point on the dimension of " Param:dfltval ". \
Additionally, " Param:dflt " is returned as the value of the module if the XDB driver returns a null value for this row/column."
Desc
IPar	"The " IntMod:dbVal " module returns a column value for the current row of the last SQL processing vial " IntMod:dbGet "."
IPar	"V4 attempts to coerce the XDB value into the destination dimension if the data types do not directly match. If \
the dimension has an acceptor (UV4:Acceptor) then it is invoked for the XDB value. Any ODBC value going into an Alpha point \
is converted to its corresponding character value. Dictionary and External dictionary points are converted. If an invalid value \
is presented then '#0' is returned. For logical points, V4 converts numbers greater than 0 to true, all others to false. \
A string beginning with the any of the characters (0nNfF) results in false, (1yYtT) results in true, all others with an error. \
For numeric points, V4 attempts to convert strings to the corresponding number."
IPar	"Null values in the XDB driver result in module failure unless the second argument is a default value."
Examples
EXWD	dbVal(dXDB* Dim:Year 3)	returns the value in column 3 under the Year dimension
EXWD	dbVal(Dim:dXDB Dim:Year 3)	same as above, automatically determines dXDB*
Mod	dbXct	"Executes an SQL Statement"	DBase OSRel
Usage	result	"odbc tagarg"
Params	result	"The result of the module. See the " Tag:Rows " tag below."
Params	xdb	"An XDB point corresponding to a relational database (see " IntMod:dbConnect ")."
Params	tagarg	"One or more of the tagged arguments below."
TagRes	Close	"To automatically close the XDB connection & free up all resources. This option can be used instead of a \
separate call to " IntMod:dbFree "."
Tag	Connection	id	"Executes the SQL through the connection previously opened with " IntMod:dbConnect "(" TagName:Id ":" Param:id ")."
Tag	Dim	dim	"An XDB dimension previously connected to a database with a " IntMod:dbConnect " module call."
TagRes	Key	"Returns the primary key of the inserted record. This option is currently supported only with inserts to tables with <a href='http://dev.mysql.com/doc/refman/5.0/en/example-auto-increment.html' target=_blank>auto-increment primary keys within mySQL</a>."
TagRes	Rows	"If given then this module returns the number of rows selected/updated. Otherwise Logical:True is returned."
Tag	SQL	spt	"An alpha string to be processed as an SQL statement against the dataset. If no DBC tag is given then the first connection made is defaulted. This is a mandatory argument."
Desc
IPar	"This module is used to execute any valid SQL statement. The statement is automatically released (freed) upon completion, the connection is not."
Examples
EXWD	Dim dXDB XDB	Declare generic XDB dimension
EXWD	[SQLXct Alpha.. DSN..]	Executes ODBC/SQL Command on dataset DSN* */
EXWD	  Do(Context(dbConnect(Dim:ODBCX DSN::DSN*)) Value::dbXct(SQL::Alpha*) dbFree(ODBCX*))	Connect, execute, free dataset
EXWD	Context(dbConnect(Dim:ODBCX DSN::DSN*))	When executing multiple statements on a dataset
EXWD	Enum(xxx.. @dbXct(SQL::Alpha*))	&nbsp;it is more efficient to connect once, execute multiple
EXWD	dbFree(ODBCX*)	&nbsp;and then release the connection
Mod	Optimize	Perform Multidimensional Optimization	Math
Usage	optimum	"tag ..."
Params	optimum	"The optimum result."
Params	tag	"Any of the tagged arguments below."
Tag	Enum	list	"A list of points on a dimension. More than one " Tag:Enum " argument may be specified."
Tag	Maximum	point	"A point (usually an intersection or module) to be maximized."
Tag	Minimum	point	"A point (usually an intersection or module) to be minimized."
Desc
IPar	"This module enumerates through all combinations of the given " Tag:Enum " points and returns either the maximum \
or minimum value that can be calculated from the points. The result of the module is the min/max number. The context \
is also updated with the " Tag:Enum " points corresponding to that min/max result."
Examples
EXWD	Optimize(Enum::Inventory.. Enum::UDate:1/1/02..12/31/02 Maximum::[Sales])	determines the item having the greatest sale on a given day. The sale amount is returned while Item* and UDate* reflect the item and date for the largest sale
IPar	"The next example determines the nine digit number with some special properties. None of the digits may be zero. \
The first digit of the number must be divisible by one, the first two digits must be divisible by two, the first three by three \
all the way up to the entire 9 digit number which must be divisible by 9. Finally, each digit from 1 to 9 must be used, none may repeat."
EXML	"Using Optimize Module to Determine Magic 9 Digit Number"
ML	Dim A,B,C,D,E,F,G,H,I Int Range Multiple
ML	[Test Alpha..]
ML	&nbsp;Enum(Int:2..9 If::{MthMod(Int:=Str(Alpha* Head::Int*) Int*) <> 0} Then::Logical:False),
ML	&nbsp;&nbsp;Enum(Int:1..8 If::Str(Str(Alpha* Tail::{9 - Int*}) Has::Str(Alpha* Begin::Int* Length::1)) Then::Logical:False),
ML	&nbsp;&nbsp;&nbsp;&nbsp;Logical:True
ML	Context Add E:5 /*the 5th digit must be 5 to be divisible by 5 */
ML	Eval Optimize(Enum::A:1,3,7,9 Enum::B:2,4,6,8 Enum::C:1,3,7,9 Enum::D:2,4,6,8 Enum::F:2,4,6,8
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enum::G:1,3,7,9 Enum::H:2,4,6,8 Enum::I:1,3,7,9
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Maximum::[Test Str(A* B* C* D* E* F* G* H* I*)])
ML	= Str(A* B* C* D* E* F* G* H* I*)
Mod	Or	Logical Or	RelLog
Usage	logres	"arg arg ..."
Params	logres	"The logical Or'ing of its arguments."
Params	arg	"One or more points evaluated as logicals."
Desc
IPar	"The " IntMod:Or " module returns the logical or of its arguments. If any of the arguments are lists then the points of that list are logically or'd. Normally all arguments are evaluated before testing. If there is a higher probability of one argument being true then place that argument before the others and quote the remaining arguments. V4 will then evaluate arguments until it finds one that evaluates to true. The " IntMod:Or " module will immediately return true without evaluating the remaining arguments. If the module is called with no arguments it returns Logical:False."
Examples
EXWD	Or(Logical:True Logical:False)	Logical:True
EXWD	Or(1 @[ExpensiveToCalc])	Logical:True without evaluating the second argument.
Mod	OSExt	Link/Call an External Operating System Module	OSRel
Usage	ospt	"Dim:osdim  targarg ... Dim:result Dim:arg1 Dim:arg2 ..."
Usage	modres	"OSExt( ospt  arg1 arg2 ..."
Params	ospt	"A point describing an external module."
Params	osdim	"A dimension of type OSHandle"
Params	tagarg	"Optional tagged arguments."
Params	result	"The dimension to be used for results returned by calls to the external module."
Params	arg	"The dimensions to be used for each of the arguments to the external module."
Tag	Library	name	"A string reference naming the dynamic link library containing the external module."
Tag	Module	name	"The name of the external module."
TagRes	Error	"Generates a memory exception error (used primarily for testing)."
Desc
IPar	"The " IntMod:OSExt " module is used to link to and invoke externally written and compiled modules. This permits the users to customize V4 with modules developed in any of the Windows supported languages. Usage of this module requires two steps. The first is to create a point on an OS dimension which refers to a specific external module. The second step is to call the module with the necessary arguments. V4 handles all data conversions both in calling the external module and with the returned result."
Examples
EX	"Dim Mod OS"
EX	"Context Add OSExt(Dim:OS Library::mylibrary.dll Module::MyModule Dim:Money Dim:Int Dim:Num)"
EXWD	OSExt(Mod* 123 456)	The second argument is converted to a real and the result is Money:4493.98
Mod	OSFile	Information/Action on Operating System File(s)	OSRel
Usage	result	filespec tag
Usage	fullpathname	filespec
Params	result	"The result is based on the " Param:tag " argument."
Params	filespec	"A file specification which may include, depending on the following arguments, wild cards."
Params	fullpathname	"If this module is called with a single argument then it parses that argument as a file name and returns the full system path name to that file."
Params	tag	"One or more of the tagged arguments below."
Tag	Copy	newfile	"Copy the file " Param:filespec " to the destination file " Param:newfile ". If a file already exists \
as " Param:newfile " then it will be overwritten. A string message confirming the copy is returned on success, otherwise the module fails."
TagRes	Delete	"Delete the file referenced by " Param:filespec ". A string message confirming the deletion is returned if the file is actually deleted, otherwise \
the module fails."
Tag	Dim	dim	"Return the result as a point on the " Param:dim " dimension. This is used in conjunction with the " TagResName:ListOf " option."
Tag	Directory	option	"Performs various tests/actions on directories: CREATE to create the specified directory (error if already exists), CREATEIF \
to create the directory (no error if exists), EXISTS to return TRUE if the first argument is an existing directory or FALSE if not a directory or nonexistant, \
REMOVE to remove the empty directory."
TagRes	Exists	"Return Logical:True if the " Param:filespec " refers to an existing file, Logical:False otherwise."
Tag	Filter	isct	"This argument is used in conjunction with the " TagResName:ListOf " option when returning a list \
of lines within a text file. V4 inserts the current line into the context (as a Dim:Alpha point or the dimension specified \
via the " TagName:Dim " argument) and evaluates " Param:isct " for each line within the file. If the result of the evaluation is \
Logical:True then the line is taken as-is. If the result is Logical:False then the line is skipped and V4 continues with \
the next line of the file. If the result is an alpha string then that string is taken as the current line. If the result is \
a list then V4 returns each element of the list as if each element were a line within the file. If the result is UV4:None then \
immediately force an end-of-file for the file (i.e. no more lines are read from the file)."
TagRes	Hidden	"Normally the " TagResName:ListOf " option does <b>not</b> return hidden files. Hidden files may be returned by specifying this option with " TagResName:ListOf "."
Tag	IC	logical	"If the parameter is TRUE (default) then the 'case' of the file name is considered to be entirely lower case. If the parameter is \
FALSE then the case is kept as-is."
Tag	ListOf	listtype	"If " Param:listtype " is FILES then a list of files matching the file specification pattern of the first argument \
is returned. If " Param:listtype " is CONTENTS then a list of the contents of the file specified by the first argument is returned. Note that CONTENTS \
only returns a meaningful list when the file is text. This option may also be used \
with the " TagName:Filter " option. The list elements are normally points on Dim:Alpha but may be overridden with the " TagName:Dim " option."
TagRes	ListOf	"This option either returns a list of all lines within a file or it returns a list of files as specified \
by " Param:filespec ". If " Param:filespec " contains wild characters then a list of files is returned. If no wild characters \
are contained in " Param:filespec " then a list of the lines within the file are returned. See the " TagName:ListOf " tagged argument as this is just \
an automatic version."
Tag	Move	tofile	"Moves the source file to " Param:tofile ". If the " Param:tofile " already exists then the module fails. The three-colon option can be used with this tag to force an overwrite if \
the " Param:toFile " already exists. An Dim:Alpha confirmation message is returned if the move is successful."
TagRes	Nest	"Used in conjunction with " TagResName:ListOf " to include all nested directories. If this tag is not \
specified, directories are return in the list of files. If this tag is specified then the directories are not \
included but all files within the directories are."
TagRes	Update	"Returns the date-time the " Param:filespec " was last updated."
Tag	Update	dtrange	"When used with the " TagResName:ListOf ", restricts the results to only those files updated \
within " Param:dtrange ". If " Param:dtrange " is a specific date-time then only files with that exact date-time are \
selected. If " Param:dtrange " is " Param:none " then no date-time selection is performed. Note that \
subdirectories are not checked for update date-time selection."
TagRes	FileName	"Returns the file name and extension."
TagRes	FullPathName	"Returns the full path name of " Param:filespec "."
TagRes	Name	"Returns only the name portion of " Param:filespec " (no device, directory, or extension)."
TagRes	Path	"Returns the device and directory path of " Param:filespec "."
Tag	Rename	tofile	"Renames " Param:filespec " to " Param:tofile ". The target name (" Param:tofile ") must not already exist. A string message \
confirming the rename is returned on success, otherwise the module fails."
TagRes	Extension	"Returns the extension portion of " Param:filespec "."
TagRes	Access	"Returns the access date and time for " Param:filespec "."
TagRes	Directory	"Returns Logical:True if " Param:filespec " refers to a directory, Logical:False otherwise."
TagRes	Bytes	"Returns the file size in bytes of " Param:filespec " as a point on Dim:Num."
Tag	Bytes	range	"When used with the " TagResName:ListOf ", restricts the results to only those files of size \
within " Param:range ". If " Param:range " is a single number then only files matching that exact size are selected. \
Note that subdirectories are not checked for size."
TagRes	HashMD5	"Returns the <a href='http://userpages.umbc.edu/~mabzug1/cs/md5/md5.html' target=_blank>MD5 checksum</a> for the file. The result is returned as a 32-byte string."
Tag	Table	name	"Attempts to parse the contents of " Param:filespec " according to the columns in the V4 table " Param:name ". \
The value returned is the integer number of errors detected, zero meaning that no errors were detected. (See the " TagName:Num " tag for other options.) \
<b>Note</b> that no macro processing occurs within this module."
Tag	Num	lines	"Specifies the number of lines to verify with the " TagName:Table " option. If " Param:lines " is \
0 (zero) then the modules fails with the first error detected or returns a 0 if no errors are detected. If " Param:lines " is \
greater than 0 then only the first " Param:lines " lines of the file are scanned for errors."
Tag	Width	chars	"Specifies the maximum number of characters in a line when reading files via the " TagName:ListOf " option. \
The default is around 32000 characters so this option is only needed when processing files with extremely long lines."
Desc
IPar	"The " IntMod:OSFile " module performs various functions pertaining to operating system files"
IPar	"V4 will read text files of various shapes and sizes. If a byte-order-mark (<a href='http://en.wikipedia.org/wiki/Byte_Order_Mark' target='_blank'>BOM</a>) \
is present at the beginning of a file then it will determine the format of the remainder of the file. V4 attempts to read \
text files on a line-by-line basis. If a line exceeds the maximum then V4 will read up to the maximum and then read the \
remainder as the 'next line'. This may cause unexpected results so it is advised to use the " TagName:Width " option \
to increase the maximum line width if it may exceed 32000 characters."
IPar	"Each line of a text file is returned as a V4 point. A line within a text file may exceed the maximum number of \
characters allowed in a V4 point. When this occurs, the text file line is broken into multiple sections where each section \
adheres to the V4 point maximum. Text lines are broken on white-spaces."
Examples
EXWD	OSFile("*.v4" ListOf?)	results in a list of all files with a 'v4' extension
EXWD	OSFile("*.v4" ListOf? Bytes::Int:<25000)	results in a list of all 'v4' files less than 25000 bytes
EXWD	Enum(OSFile("*.v4" ListOf? Dim:F)	Lists all 'v4' files giving the filename, size, and update date-time
EX	"&nbsp;&nbsp;@EchoT(OSFile(F* Name?) OSFile(F* Bytes?) OSFile(F* Update?)))
EXWD	Sort(OSFile("*.v4" ListOf? Dim:F) Reverse::OSFile(F* Bytes?)	Same as above except listing is largest to smallest
EX	&nbsp;&nbsp;Do::EchoT(OSFile(F* Name?) OSFile(F* Bytes?) OSFile(F* Update?)
EX	Enum(OSFile("*.tmp" Update::MakeP(Dim:UDT Special::NID:LT {UDT:{now} - (12 * 60 * 60)}) ListOf?)
EXWD	&nbsp;&nbsp;@OSFile(Alpha* Delete?))	Deletes *.tmp files creating before 12 hours ago
IPar	"The example below compares the update date-times of a list of files between two directories and updates the second directory if the file is not as recent or missing."
EXML	"File Synchronization Between Directories"
ML	[FileDTCompare Target.. FileSpec..]
ML	&nbsp;Do(Enum(OSFile(FileSpec* Dim:File ListOf?)
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@If({OSFile(File* Update?) <> OSFile(Str(Target* OSFile(File* Name?) "." OSFile(File* Extension?)) Update?),0}
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Then::Spawn(Str("cmd /C copy " File* " " Str(Target* OSFile(File* Name?) "." OSFile(File* Extension?))))))
ML	&nbsp;&nbsp;&nbsp;)
EXWD	[FileDTCompare FileSpec:"*.v4a" Target:"\\V4Release\\"]	Compares all *.v4a files in current directory with those in the V4Release directory, updating those that are not current
Mod	OSInfo	Return Operating System Information	OSRel
Usage	info	tagarg
Params	info	"The information point returned by the module"
Params	tagarg	"One or more of the tagged arguments described below"
TagRes	Bits	"Returns the number of bits (32/64) of the processor."
TagRes	Bytes	"Returns a list giving total and available space on a specified device (volume). A " TagName:Volume " must precede this tag. The format \
of the returned list is (" Param:size " " Param:free " " Param:available ") where " Param:size " is the total size of the volume, " Param:free " is the \
total free space on the volume, and " Param:available " is the total space available to the calling process (if quotas are enabled). <b>Note</b> that \
<b>all</b> values are specified as points on Dim:Num <b>and reflect megabytes<b>, not bytes. A value of -1 indicates an unknown value."
TagRes	ComFileExt	"Returns the preferred command file extension for th current operating system."
Tag	CommandLine	mode	"If " Param:mode " is ALL then returns all components of the command line used to invoke \
this process as a list."
TagRes	CommandLine	"Returns all components of the command line following the entry specifying the currently running V4 program. \
The module fails if no components were specified after the V4 program name."
TagRes	CPU	"Returns the type of CPU running V4."
Tag	Directory	dirname	"Sets the process working directory to " Param:dirname ". This option returns the old working directory as its value."
TagRes	Directory	"Returns the working directory of the current V4 process."
TagRes	Endian	"Returns either NId:Little or NId:Big depending on the processor."
Tag	Environment	variable	"Returns the value of the process environment " Param:variable "."
TagRes	Environment	"Returns a list of all currently defined process environment variables."
TagRes	Id	"Returns the volume id, if known, of the previously specified " TagName:Volume "."
TagRes	Id	"Returns the process id number of the current running V4 process (if no volume previously given)."
Tag	IPAddress	mode	"Returns all IP addresses of the current machine as a list. The " Param:mode " may be V4 for the IPV4 address or V6 for the IPV6 address."
TagRes	IPAddress	"Returns the primary IPV4 IP address of the current machine (as referenced by gethostname()/gethostbyname(). The \
result is returned as a string point on Dim:Alpha."
Tag	ListOf	item	"Returns a list as specified by " Param:item ". If " Param:item " is VOLUMES then a list of volume names (on Dim:Alpha) is returned. \
If " Param:item " is ENVIRONMENT then a list of environment variables is returned."
TagRes	Name	"Returns the volume name of the previously specified " TagName:Volume "."
TagRes	Name	"Returns the current host system name (if no volume previously specified)."
TagRes	OS	"Returns the name of the current operating system."
TagRes	Processors	"Returns the number of processors available on the current system. Note that <a href='http://www.intel.com/technology/hyperthread/' target=_blank>Intel hyperthreaded CPUs</a> will return 2!"
TagRes	Type	"Returns, as a point on Dim:UV4, the type of volume previously given as a " TagName:Volume " argument. The current possible return values \
are UV4:Removable for removable drives (ex: floppy, memory stick, etc.), UV4:Fixed for fixed drives, UV4:Network for network drives, UV4:CDRom for \
CD/DVD drives, and UV4:RamDisk for solid-state drives. If the drive type is not known then UV4:Unknown(hex:" Param:nnn ") is returned where " Param:nnn " is \
an operating system dependent drive-type code."
TagRes	User	"Returns the login name of the user running the current V4 process."
Tag	Volume	name	"Specifies the name of a disk volume to be referenced with subsequent tagged arguments."
TagRes	Volume	"Returns a list of all volumes/drives on the current system (same as " TagName:ListOf ":Volumes)."
Desc
IPar	"This module returns information regarding the current operating system."
Examples
EXWD	OSInfo(Name?)	returns Alpha:"WINNT" if V4 running under NT
EXWD	Enum(OSInfo(Environment?) @Echo(Alpha* " = " OSInfo(Environment::Alpha*)))	Outputs all environment variables and values
EXWD	OSInfo(IPAddress?)	returns current machine's ip-address as a string
Mod	Output	Redirects Stream Output to Different Files or Devices	OSRel V4Int
Usage	result	"tagarg"
Params	result	"The result of this module is always Logical:True."
Params	tagarg	"One or more of the tagged arguments below."
Tag	Append	file	"Open an existing " Param:file " (or create if it does not exist) and position to the end-of-file."
Tag	Binding	qisct	"Declare an intersection to be bound to the text flowing into the stream. When the stream is closed \
all text associated with the stream is saved as a " PntType:BigText " point and that point is bound as the value of " Param:qisct ". \
The parameter should be quoted if it is a literal binding. Note that the binding occurs when the stream is closed, <b>not</b> with this module call. If the " Param:isct " contains any \
context references (i.e. " Param:dim ":*) then those references are with respect to the stream close context. Note also that \
BigText points can hold approximately 32,000 characters of text. If a stream exceeds the maximum, a module failure will occur."
TagRes	Buffer	"Create a new stream that buffers internally, i.e. all output to the stream will be stored in the V4 process space."
Tag	Close	stream	"Close the file associated with " Param:stream " and reassign " Param:stream " to the process' stdout."
TagRes	Close	"Close the previously specified file " TagName:Id " or " TagName:To " stream. The name of the just closed file is returned as the result."
TagRes	Count	"Returns the number of lines output to the file named by an " TagName:Id " or " TagName:To " stream."
Tag	Create	file	"Create a new " Param:file ". The module returns the name of this " Param:file " as its value."
TagRes	Data	"Return the filename associated with the current data stream as a point on the Dim:Alpha dimension."
Tag	Encode	mode	"Defines the output encoding of the stream. The values are <b>ASCII</b> (default) for ASCII encoding, <b>UTF8</b> for <a href='http://en.wikipedia.org/wiki/UTF-8' target='_blank'>UTF-8</a> encoding, \
<b>UTF8nh</b> for UTF-8/no-header encoding (i.e. no <a href='http://en.wikipedia.org/wiki/Byte_Order_Mark' target='_blank'>byte order mark</a> at the begining of the file), \
<b>UTF16</b> for <a href='http://en.wikipedia.org/wiki/UTF-16' target='_blank'>UTF-16</a> environment dependent encoding, <b>UTF16le</b> for UTF-16/little-endian encoding and <b>UTF16be</b> for UTF-16/big-endian encoding."
TagRes	FileName	"Returns the file name of the file associated with the prior " Tag:Id " or " Tag:To " argument. \
If no prior argument is given then this returns the path name of the current data stream (same as " TagResName:Data "). \
The result is a point on Dim:Alpha. The name returned is the name used to create the file, use " IntMod:OSFile "(" TagResName:FullPathName ") \
to obtain the full path name."
Tag	Get	chars	"Returns a string consisting of the next " Param:chars " characters of the specified stream <b>rounded down to a full line</b>. For instance if the output stream contains 100 lines each 50 characters \
in length then Output(Id::xxx Get::125) will return the first two lines. If " Param:chars " is smaller than the number of characters in the next line then an empty string is returned. The stream must have been initialized as a buffered stream. The returned characters/lines are removed from the output buffer."
Tag	IC	logical	"If " Param:logical " is TRUE (default) then the filename is considered case-insensitive and converted to all lower case. If " Param:logical " is FALSE then the case of the output file is maintained."
Tag	Id	name	"Associate the " Param:name " with the " Param:file " being created or appended-to. This " Param:name " may be used \
in subsequent " IntMod:Output " calls or in any of the echo modules (e.g. " IntMod:Echo " or " IntMod:EchoS ")."
TagRes	Length	"Returns the number of characters output to the stream."
Tag	Length	option	"If " Param:option " is <b>Lines</b> then the number of lines output to the stream is returned. If it is <b>Characters</b> then the number of characters output is returned."
Tag	To	stream	"Associate the previously specified file to the data " Param:stream ". The defined V4 streams are \
Data, Debug, Error, Progress, Prompt, Status, Trace, and Warn."
Desc
IPar	"This module is used to assign files or devices to any of the V4 data streams. Each data stream is initially assigned to \
the process' stdout. Each stream must be assigned to an output at all times. If a stream is assigned to a file and that file is \
closed then V4 automatically reassigns the stream back to the process' stdout."
IPar	"Multiple files may be opened with this module. A file need not be assigned to a stream. It is possible to create multiple files \
and alternate them within a stream."
IPar	"The " TagResName:Close " option may be used to close any stream. A normal V4 exit will automatically close all currently \
open streams."
IPar	"V4 defines seven streams. The Data stream is the output stream for the Echo modules. \
The Debug stream is used for all debugging output from the " IntMod:EchoD " module. \
The Error stream is used to output all V4 errors. The Progress stream is used for all the progress messages that are trigged by the 'Set Trace Progress' command. \
The Prompt stream is used to output all V4 prompts. The Status stream is used for status messages such as the processing recap \
when V4 exits. The Trace stream is for all trace output, again controlled by the 'Set Trace' command, but excluding progress output. \
The Warn stream is for all V4 warnings."
IPar	"V4 defines three " Tag:Id " names. 'StdOut' represents the process' stdout, 'Console' represents the process's console (if distinct from stdout), \
'None' represents the null file or device."
Examples
EXWD	Output(Create::"foo.txt" To::Data)	Directs all Data stream output to the file foo.txt
EXWD	Output(Data?)	returns Alpha:"foo.txt" assuming Output above
EXWD	Output(Append::"v4performance.txt" To::Status)	Directs the final V4 processing summary to the file
EXWD	Output(Create::"otherfile.txt" Id::Other)	Creates a new file and assigns it an id of Other.
EXWD	Echo(Out::Other xxx)	Echo xxx to otherfile.txt (from above example)
EXWD	Output(Id::Other Close?)	Close the file (otherfile.txt) associated with Id::Other
EXWD	Spawn("cmd /C " Output(Id:cmd Close?))	Close the file and execute it as a subprocess
EXWD	Output(Binding::@[SaveStream] Id::SS)	All output via Id SS will be saved as a BigText point bound to [SaveStream]
Mod	Pack1616	Pack Two 16bit Integers into One 32bit Integer	Math
Usage	integer	"lhinteger rhinteger"
Params	integer	"Resulting 32 bit integer point."
Params	lhinteger	"Low order 16 bits becomes high order of resulting number."
Params	rhinteger	"Low order 16 bits becomes low order of resulting number."
Desc
IPar	"This module packs two numbers into a single 32-bit number. The primary use of these modules is in the creation \
of unique binding points for very large models."
IPar	"Also see the BindEval option under the " Command:Dimension " command when declaring dimensions. The " IntMod:Flatten " module is a \
generalized module for flattening multiple points onto a single point."
Examples
EXWD	Pack1616(3 4)	results in Int:196612
EXWD	Pack1616(0 -1)	results in Int:65535 (the second argument is truncated to 16 bits)
Mod	Parse	Generalized Parser / Tokenizer	String V4Int DBase
Usage	result	"source tagarg ..."
Params	result	"The result depends on the arguments."
Params	source	"What is to be parsed. This must be either a string or list."
Tag	As	option	"Parses the first argument according to " Param:option ". The allowed " Param:option " values are- <ul><li><b>Binary</b> to parse as an unsigned binary integer;</li> \
<li><b>CNLiteral</b> to parse as a <a href='http://c.comsci.us/etymology/literals.html' target='_blank'>C numeric integer literal</a>;</li> \
<li><b>Currency</b> parses the first argument as a currency value and returns the result as a point on Dim:Num. This differs from coercing to an integer or real in that it ignores many characters: spaces, commas, currency symbols, etc. \
It also accepts leading and trailing negative signs and negative numbers enclosed in parentheses;</li> \
<li><b>Decimal</b> to parse as a signed decimal integer number;</li><li><b>Email</b> to parse as an <a href='http://en.wikipedia.org/wiki/Email_address' target='_blank'>email address</a>;</li> \
<li><b>Hexadecimal</b> to parse as an unsigned hexadecimal integer number;</li> \
<li><b>JSON</b> to parse as a JSON string (see also " Intmod:JSON ");</li><li><b>Octal</b> to parse as an unsigned octal integer;</li><li><b>Real</b> to parse as a signed floating point number;</li> \
<li><b>Telephone</b> to parse a a telephone number;</li><li><b>Zipcode</b> to parse as a 5 or 5+4 zipcode.</li>"
Tag	ListOf	option	"Returns a list based on " Param:option ". Currently only PUNCTUATION is supported as a option and \
it returns a list of the standard names V4 uses for punctuation charcters and punctuation tokens."
Tag	Exclude	list	"Exclude the " Param:list " of nodes from the XML entry being parsed. All nodes in the list and all \
child nodes beneath those nodes are excluded from the resulting parsed XML tree."
Tag	HTML	options	"Parse the " Param:source " as HTML. The options are identical to those of " TagName:Token "."
TagRes	HTML	"Parse the " Param:source " as HTML."
Tag	Include	option	"The V4 XML parser, by default, ignores or excludes schema and attribute information when parsing an XML message. \
This is information embedded within the opening XML tag. This information may be included by specifying this " Param:option ". If " Param:option " \
is SCHEMA then schema information is included. If it is ATTRIBUTES then attribute information is included. See description below for more information \
on schema and attribute information."
Tag	Maximum	num	"Parse up to a maximum of " Param:num " XML tokens and then quit. This is useful when testing extremely \
large XML files."
Tag	Nodes	num	"Use " Param:num " as a hint to the final number of nodes expected in the XML tree. This option will \
increase the efficiency of parsing very large XML files."
Tag	Trace	num	"Output a trace status line every " Param:num " tokens parsed."
Tag	Token	options	"Parse the " Param:source " according to the " Param:options ". Currently supported options are: \
EndOfLine to return the end-of-line as a token; LowerCase to return keywords in lower case, if not given all keyword \
tokens are passed as seen; Negative to parse constructs of the form '-<i>nnnn</i>' as a single negative number \
token, if not specified then the minus sign is passed as a separate token; Space to return spaces as tokens, Uppercase to convert all keyword tokens to upper case \
otherwise keywords are passed as seen."
TagRes	Token	"Parse the " Param:source " and return as a list of tokens."
Tag	Tree	dim	"Create a tree based on " Param:dim " when performing an XML parse."
Tag	XML	options	"Parse the " Param:source " as XML. The options are identical to those of " TagName:Token "."
TagRes	XML	"Parse the " Param:source " as XML."
Desc
IPar	"This module is used to parse a string or list of strings. It currently will return a list of tokens or in the case of XML parsing \
create a V4 tree (see " IntMod:Tree " module). Integer tokens are returned as points on Dim:Int, real numbers on Dim:Num, strings on Dim:Alpha, \
keywords on Dim:NId, and punctuation on Dim:UV4."
IPar	"Note that a file can be parsed by converting it to a list with the " TagName:ListOf " option in the " IntMod:OSFile " module."
IPar	"Schema and attribute information may also be included in the XML parse tree. This information is handled as child nodes just like other child \
nodes of an element. However the values are not represented as strings but as lists. In this way, schema/attribute information can be separated from other \
child nodes of an element."
IPar	"When the result is a list of tokens, a lazy-list is returned. If an explicit list is required then you must enumerate through the result. See the example below."
EXWD	Parse(OSFile(File* ListOf?) Trace::Int:250000 Tree::Dim:HTree Exclude::[ExcludeList] XML?)	Parse the contents of the file and create an internal XML tree
EXWD	Context::EnumCL(Parse([parseString] Token?) Shell::Dim:S @S*)	Add list of parsed tokens to context
Mod	PCChg1/2	Calculates Percentage Change	Math
Usage	pc	"num1 num2 tagarg"
Usage	pc	"num1 num2 tagarg"
Params	pc	"The resulting percentage change."
Params	num1	"The first argument."
Params	num2	"The second argument."
Params	tagarg	"Optional tagged arguments"
Tag	Error	n	"Return " param:n " if an error occurs (e.g. divide by 0)."
Tag	Round	n	"Round the results to " param:n " decimal places if " param:n " is positive, or to the nearest power of 10 if " param:n " is negative."
Desc
IPar	"These two modules calculate percentage change. " IntMod:PCChg1 " calculates the change based on the first argument ((num2-num1)*100/num1) while " IntMod:PCChg2 " calculates on the second ((num2-num1)*100/num2). If the denominator is zero (" param:num1 " if " intmod:PCChg1 " or " param:num2 " if " intmod:PCChg2 ") then these modules return 0."
Examples
EXWD	PCChg1(30 35)	Num:16.667
EXWD	PCChg2(30 35)	Num:14.2857
EXWD	PCChg2(30 35 Round::2)	Num:14.29
Mod	Percent	Percentage of One Number to Another	Math
Usage	resnum	"npt1 npt2"
Params	resnum	"The resulting numerical point. Note that the dimension of the result is always the dimension of the second argument to the module."
Params	npt1	"A numerical point."
Params	npt2	"A numerical point."
Params	tagarg	"Optional tagged arguments"
Tag	Error	n	"Return n if an error occurs (e.g. divide by 0)."
Tag	Round	n	"Round the results to " param:n " decimal places if " param:n " is positive, or to the nearest power of 10 if " param:n " is negative."
Desc
IPar	"This family of modules implements the basic arithmetical functions. The " IntMod:Percent " module returns the percentage of the first argument to the second. If either argument is 0 then 0 is returned."
Examples
EXWD	Percent( Real:5 15 )	Int:33
EXWD	Percent( 5 Real:15 )	Real:33.3333
EXWD	Percent( 5 Real:15 Round::-1 )	Real:30
Mod	Plus	Add Two or More Numbers	Math
Usage	resnum	"npt1 npt2 ..."
Params	resnum	"The resulting numerical point. Note that the dimension of the result is always the dimension of the second argument to the module unless the second argument is a point on the Int dimension. In this case the result is the dimension of the first argument."
Params	npt1	"A numerical point."
Params	npt2	"A numerical point."
Desc
IPar	IntMod:Plus " returns the sum of its two or more arguments."
Examples
EXWD	Plus( Real:5 15 )	Real:20
EXWD	Plus(UDate:12/31/99 1)	UDate:000101 (where 00 refers to the year 2000!)
EXWD	Plus( 5 Real:15 )	Real:20
Mod	Project	Project Point Onto Different Dimension	V4Int
Usage	value	"resdim" "srcdim" "tagarg"
Usage	value	"resdim" "point"
Usage	value	"respoint" "srcdim.."
Usage	value	"respoint" "srcpoint"
Params	value	"The result of the projection. If the call is to define a projection then the result is undefined."
Params	resdim	"The target dimension (i.e. the resulting dimension of a projection)."
Params	srcdim	"The source dimension (i.e. the dimension of the originating point)."
Params	tagarg	"One or more of the tagged arguments below."
Params	respoint	"The resulting point on target dimension."
Params	srcpoint	"The source point on the source dimension."
Tag	Cache	bytes	"Set the internal cache size to " Param:bytes ". Normally this is not necessary as V4 will automatically adjust the cache size. A slight performance gain may be found by presetting the size."
Tag	Error	string	"Defines a error message string to be output when an undefined projection is attempted."
Tag	Point	point	"Defines a point to be returned on an undefined projection."
Tag	Area	logical	"If " Param:logical " is TRUE then save the projections in an area. If FALSE then maintain the projection information in an in-memory cache. \
This option must be TRUE for one-to-many projections."
Tag	Length	bytes	"The maximum length of a source point. The default is 12 bytes."
Tag	Update	logical	"If TRUE then update the projection with the " Tag:Point " value. If FALSE then do not automatically update the projection on an error."
Tag	Unique	logical	"If TRUE (default) then a one-to-one projection is maintained. If FALSE then a one-to-many projection is allowed. \
Note that the " TagName:Area " option must be set to Logical:True for one-to-many projections."
TagRes	Define	"This argument is used to determine whether or not a projection has been defined between two dimensions. \
Logical:True is returned if the projection is defined. The module fails if no projection is defined."
TagRes	Remove	"Removes or deletes the previously defined projection between " Param:resdim " and " Param:srcdim ". This \
is only valid on locally cached projections (" TagName:Area ":FALSE)."
Desc
IPar	"The " IntMod:Project " module is used to both define and determine the projection of a point on one dimension to \
another. Projections are an efficient way of mapping from one type of value to another. Projections can be implemented \
as a in-memory hashed tables or on a permanent basis as an multi-level index in a V4 area. Projections are not contextual! \
The projections can be expressed in one of two ways. First is explicitly with the " IntMod:Project " module. Second is \
with the " Param:dim ":=" Param:point " construct which is converted to " IntMod:Project "(Dim:<i>dim</i> <i>point</i>)."
IPar	"Many projections are implemented by the V4 runtime system. Projections are defined between most of the major point types. \
Projections are also defined between dimensions associated with time."
IPar	"If the target dimension has an acceptor function associated with it and the source point is a character string, then \
the acceptor function will be invoked. Use the " IntMod:MakeP " module to create points bypassing any acceptor logic."
EXWD	Project(Dim:UMonth UDate:020301)	results in UMonth:0203
EXWD	Project(Dim:Int Num:1.234)	results in Int:1
EXWD	Project(Dim:Int Num:1.567)	results in Int:2 (rounds)
EXWD	Project(Dim:UDate UMonth:0203)	results in UDate:020301..020331 (all the days in the month)
EXWD	UDate:=UMonth:0203	same as above
EXWD	[CalcDim]:=[CellValue]	is the same as Project([CalcDim] [CellCalue])
EXWD	FALSE:=Student..	is the same as Project(Logical:False Student..)
Mod	PRUpd	Update a PointReference Point	V4Int
Usage	value	"pointref valpt"
Params	value	"This module always returns its first argument- " Param:pointref "."
Params	pointref	"The first argument must be a point on a " PntType:PointReference " dimension."
Params	valpt	"Any V4 point."
Desc
IPar	"This module updates the static point references by " Param:pointref " with the point " Param:valpt "."
Examples
EXWD	Dim X PointReference	Declare a PointReference dimension
EXWD	Context Add MakeP(Dim:X 0)	Makes a point reference set to Int:0
EXWD	Enum(Int:1..100 @PRUpd(X* {X* + Int*}))	Adds all the integers from 1 to 100 into X*
EXWD	X*	Is a point reference to Int:5050
Mod	Quote	Quote a Point	v4Int
Usage	qpoint	"point"
UsageX	qpoint	Unquote	"point"
Params	qpoint	"A quoted (or unquoted) point"
Params	point	"The point to be quoted"
Desc
Ipar	"The " IntMod:Quote " module evaluates its first argument and returns the quoted result. The " IntMod:Unquote " module evaluates its first \
argument; if the result is quoted it strips off the [first] quote and returns the result."
IPar	"When you specify a point, Int:123 for example, V4 <i>knows</i> that you mean an integer of 123. If you specify an intersection such as [foo], do you mean the \
point representing that intersection or do you mean the point representing the evaluation of the intersection? In most cases, V4 interprets an intersection as meaning the \
point resulting in the evaluation. V4 treats context references (ex: customer*) and module references (ex: Plus(1 2)) in the same fashion - they are evaluated. But sometimes you \
do not want V4 to evaluate. This can be done by quoting (taken from LISP) the point reference. In V4, quoting is done by prefacing the point with the at sign (@). The evaluation of a \
quoted point simply strips off the quote leaving the remainder unchanged and unevaluated."
IPar	"V4 evaluates the arguments to a module before actually invoking the module. In the case of a module like " IntMod:Enum ", this can become confusing. Compare 'Enum(Int:1..10 Echo(Int*))' \
to 'Enum(Int:1..10 @Echo(Int*))'. The first case will evaluate the " IntMod:Echo " before calling the module. This most likely will result in an error if there is no Dim:Int point in the context. \
In the second case, the evaluation of '@Echo(Int*)' results in 'Echo(Int*)' and the module enumerates as expected."
IPar	"Tagged arguments within a module are handled a little differently. The evaluation of a tagged argument results in itself. That is, the evaluation of <i>tag</i>::<i>point</i> results in <i>tag</i>::<i>point</i> just \
as the evaluation of Int:1 results in Int:1. The evaluation of the <i>point</i> occurs when the tag is used within the module. For example 'Enum([cusList] If::[test] Num::[maxToShow] @Do([whatever]))', the [cusList] is evaluated \
to a list before the module is invoked. The tagged arguments are left unchanged. The evaluations of [test] and [maxToShow] occur as the module executes. Therefore the [test] intersection is evaluated for \
each point in [cusList] while [maxToShow] is only evaluated once."
IPar	"There are a few V4 modules that do not pre-evaluate all of their arguments. " IntMod:DefQ " is the most often used of these exceptions. It does not pre-evaluate its first argument. The evaluation of the \
first argument occurs within the module so it can handle it properly. Assume [undefined] is not a defined intersection, then DefQ([undefined]) returns false while Def([undefined]) fails because the (pre)evaluation of the \
first argument fails. V4 modules ending with a Q or QE auto-quote one or more of their arguments."
IPar	"Internally, V4 handles quoted points via a shell dimension- Dim:UQuote. For example, '@[foo]' is really a point on the UQuote dimension- UQuote:[foo]. The V4 \
interpreter recognizes points on this dimension and evaluates/displays them appropriately."
Mod	RCV	Row/Column Value	SSRel Math
Usage	value	"column tagarg"
UsageX	value	RCVi	"column tagarg"
Params	value	"The numeric value returned as the row-column value"
Params	column	"A non-tagged argument is considered to be a column specification. The result is returned as a point on \
that dimension (see examples below)."
Params	tagarg	"One of the tagged arguments described below. Note that RCV can be called with no arguments."
Tag	Calc	level	"Returns the totals for the specified levels in a calculated column (one that does not display)."
Tag	Column	col	"Return the sum or count for the specified column. If the Column argument is not given then the next column is assumed. Note that delta values can be used to reference relative columns."
Tag	Dim	dim	"The value is returned as a point on the dim dimension. The use of this argument overrides any non-tagged argument \
dimension/point-type determination."
Tag	Count	level	"Return a count rather than the sum for a level. The count corresponds to the number of detail \
rows in the level as opposed to the sum of the column values. All counts are returned as points on Dim:Int. \
The column number is significant for counts in that if an " IntMod:EchoS " does not output a value for a column then its \
count is not incremented."
Tag	Row	num	"Specifies the row number. If not given then a recap is assumed"
Tag	Sum	level	"Return the aggregate sum for the specified level."
Desc
IPar	"The " IntMod:RCV " module can be used within the  " IntMod:Enum " module to access multiple levels of totals. Level 1 is reserved for the grand totals. \
Higher levels can be used for additional levels of recapping. Both column sums and counts are maintained for each level. Referencing a level with " IntMod:RCV " automatically \
clears all recaps at higher levels. If no level is specified, then level 2 is default except at end of processing when level 1 is default. A level need only be specified once, \
it then defaults for subsequent " IntMod:RCV " calls. A call to " IntMod:RCV " with no column specification defaults to the next column."
IPar	"The default number of levels is 4. See the " TagName:Recap " and " TagName:Calc " tags within the " IntMod:Enum " module for to increase this limit."
IPar	"The " IntMod:RCVi " module is equivalent to " IntMod:RCV "(Dim:Int), i.e. it returns the total as a point on dimension Int."
Examples
EXWD	RCV(3)	same as RCV(Sum::2 Column:3 Dim:Int)
EXWD	RCV(Sum::2 4.0)	returns sum for column 4 as Dim:Num (4.0 is same as Num:4.0)
EXWD	RCV(Sum::2 Dim:Num 4)	same as above (Dim:Num overrides use of Int:4)
EXWD	RCV()	following the above, returns sum for column 5 as Dim:Num
Mod	ReAllocate	Reallocates (Redistributes) a List of Values	List Statistical
Usage	true	"srclist targetlist tagarg"
Params	true	"This module returns Logical:True. The results are reflected in the bindings created."
Params	srclist	"A list of points to be used as the driver for the source values."
Params	targetlist	"A list of points to be used as the driver for the target or destination values."
Params	tagarg	"One or more of the tagged arguments below."
Tag	Bind	isct	"An intersection (or single point to be converted to an intersection) defining the resulting reallocation. A binding will be created for each point in the " Param:targetlist "."
Tag	Interval	ipoint	"Specifies the interval value for the source points."
Tag	Method	method	"How the reallocation is to be performed. The allowed methods are Linear, First, and Closest."
Tag	Overflow	opoint	"The " Param:opoint " must be an intersection. Any leftover (overlow) value will be bound to this intersection."
Tag	Target	tpoint	"The target interval"
Tag	Value	vpoint	"Defines the value for each of the points in " Param:srclist "."
Desc
IPar	"The " IntMod:ReAllocate" module redistributes a list of values on one interval to a new list of values over a different interval."
Examples
IPar	"The example below demonstrates how this module can be used to redistribute yearly sales over the months in that year. \
The first list consists of the years, the interval for each year is the number of days, the value is the sales for the year, \
the target list is the months in each year with the target value being the number of days in each month. The result is a \
series of bindings of the form [Alloc UMonth:xx]=dollar corresponding to the ratio of (yearly sales * (days in month)/(months in year))."
EXML	"Redistribution of Yearly Sales Over Months"
ML	[MonthlySales UYear..]
ML	&nbsp;&nbsp;Do(Enum(UYear*
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(ReAllocate(UYear* Interval::ListSize(UDate:=UYear*)
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Value::[YearlySales] UMonth:=UYear* Target::ListSize(UDate:=UMonth*) Bind::[Alloc])
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enum(UMonth:=UYear* @EchoT(UMonth* [Alloc]))
ML	&nbsp;&nbsp;&nbsp;&nbsp;)))
IPar	"The next example allocates predicted expenses based on aircraft flight hours over months of actual flying time. \
The Model gives predicted costs for various intervals of flight hours. Each plane, however, does not necessarily fly the \
exact number of hours per month as predicted by each " Param:interval " in the model. The [MonthList] is a list of months \
that the plane may have flown. The Target is the actual hours flown (which may be 0). The result is the allocation of \
the predicted costs by plane and month flown."
EXML	"Allocation of Model to Actual"
ML	[AllocateModelExpenses]
ML	&nbsp;Enum(Plane..
ML	&nbsp;&nbsp;&nbsp;@Reallocate(Model.. Interval::Model.Hours Value::Model.PredictedCost
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[MonthList] Target::[Plane* Month* Hours] Bind::[ModExpense Plane* Month*]))
Mod	Rpt	Module for Generating Reports	V4Int OSRel
Usage	value	"tagarg ..."
Usage	value	"columnspec"
Params	value	"The resulting value is based on the arguments"
Params	columnspec	"A list of lists describing the next row of column values for the report"
Params	tagarg	"One of the tagged arguments described below."
Tag	Begin	file	"The contents of the specified " Param:file " are prepended to the report. This only applies to HTML type reports."
Tag	Begin	list	"The contents of the " Param:list " are prepended to the report. This only applies to HTML type reports."
Tag	Bottom	text	"The text (a single line, mutliple lines or a list) is appended to the bottom of the report. This may be HTML or Javascript. The placement of this text is determined by the ##html.includeBottom## entry in v4rppcore.v4i file in \
the V4 home directory."
Tag	Columns	collist	"Specifies a list of column identifiers (names) for the report. A column identifier may be an integer number or a \
dictionary entry with dictionary points being preferred. A group of columns may be given a single identifier by specifying a two-element list \
of the form (" Param:columnid " " Param:columnnumber "). For example, (a b c (d 5) e), defines a report of 9 columns. The first column is <b>a</b>, \
the second is <b>b</b>, etc. The identifier <b>d</b> represents a group of 5 columns between <b>c</b> and <b>e</b>. A contiguous group of columns may be redefined with another column name using a three-element list. \
For example, (a b c d (e a c)) defines four columns a, b, c and d. Column <b>e</b> is a reference to the three initial columns (a b c) of the report."
Tag	ColumnId	idlist	"Defines the column names to be used if XML is being generated. The form of " Param:idlist " is a list of lists- \
((colid xmltag) (colid xmltag) ...) where " Param:colid " is a column identifier and " Param:xmltag " is the XML tag name to be used for that column. \
If no explicit XML name is given for a column then its column identifier is used."
Tag	Cookie	string	"This option specifies cookies that are to be set within the HTML report. The format of the argument is <i>name=value</i>;<i>name=value</i>... where " Param:name " is the name of the cookie and " Param:value " is its value."
Tag	Close	section	"The " TagResName:Close " option closes off the entire report. This option can be used to close off only the current portion of the \
report. At this time, the only supported option is SHEET which closes off the current sheet. Normally the " TagName:Sheet " tag closes off the current sheet \
and immediately sets up for the new sheet. It is not possible to inject any code (HTML, XML) between sheets. The " TagName:Close ":Sheet option closes \
the current sheet and allows for the output of any code before starting the next sheet."
TagRes	Close	"Closes the report and frees all internal resources associated with the report. A report should always be closed with this option \
as it lets any of the V4 post-processors know that the report has finished normally. Note that this <b>does not</b> close the output stream of the report."
Tag	CSS	style	"The " Param:style " parameter can be a string specifying a single CSS line or it can be a list of strings for multiple \
CSS lines. Multiple " TagName:CSS " tags may also be given for multiple CSS lines.  If " Param:text " includes braces '{...}' then it is assumed to be a style entry. If " Param:text " does not include braces then it is assumed to be a URL link to a style sheet."
Tag	Disable	colist	"This argument may be given to disable one or more columns of a report. A disabled column does not appear in the report. The \
format of " Param:colist " is a list of column identifiers. Note that this option must be specified before any report headers or detail is output."
Tag	Embed	html	"The " Param:html " is to be embedded in the following column if the final report output is to be in HTML. If the output is not \
HTML then the " Param:html " text is not embedded. More than one " TagName:Embed " argument may be specified. The pattern '\\$' is used in the column \
text to denote the positioning of the embedded text. Each instance of '\\$' is replaced with the next embedded " Param:html " text."
Tag	Grid	logical	"This option determines whether or not to display grid lines within Excel. If TRUE then grid lines are set, if FALSE (default) then not. \
<b>Note</b>: This has no effect on HTML output. CSS provides many options for grid lines, too many to be enumerated here."
Tag	Heading	hlist	"Defines a heading line for the report columns. The format of " Param:hlist " is a list of lists. A sublist may be either of \
two formats. The first is '(<i>colid heading</i>)' where " Param:colid " is a column identifier and " Param:heading " is the text heading value. The \
second format is '(<i>startid endid heading</i>)' where " Param:startid " is a starting column, " Param:endid " is an ending column identifier, \
and " Param:heading " is the heading text to span the columns from " Param:startid " through " Param:endid "."
Tag	HTML	enctag	"This argument is used to give enclosing HTML tags/text if the report type is HTML. Otherwise the argument is ignored. More \
than one " TagName:HTML " argument may be given."
Tag	Id	rptid	"Associates a unique id to the report. This is only necessary if multiple reports are to be concurrently generated."
Tag	If	logical	"If TRUE (default) then output this line, if FALSE then do not output the line. However the values ARE included in any/all " IntMod:RCV " \
totals."
Tag	If	condition	"This option allows one to associate a post-processor conditional to the remaining report arguments. The " Param:condition " must be a valid xv4rpp 'If' expression."
Tag	Image	file	"Inserts the specified image file into the next cell. This only takes effect for spreadsheet output."
Tag	Image	list	"The list must be a two-element list of the form: (" Param:file " " Param:url ") where the file is used for output to a spreadsheet and the url is used for HTML output."
Tag	Image	url	"Inserts the image url into the next cell. This only takes effect for HTML output."
Tag	Job	number	"Assigns " Param:number " as the meta-information tag ##jobNumber## within the post-processor."
Tag	Library	url	"Defines either a javascript or CSS source " param:url " for the html post-processor. If the " Param:url " extension is '.js' then \
javascript is assumed, if it is '.css' then CSS is assumed, otherwise the module fails. The v4rpp post processor inserts the correct script/css HTML wrappers."
Tag	Link	option	"This determines how URLs are handled within spreadsheets. The allowed values are <b>External</b> to enable only links to external web sites. This is the default. \
<b>None</b> to disable all URL links. <b>UserKey</b> handles links to other application functions by forcing the user to log into the application and applying the security for that user. This means that \
a link can be embedded within spreadsheet that may not be viewable by all recipients of the spreadsheet. <b>Secure</b> assumes that the distribution of the spreadsheet is secure and anyone clicking on a link to an \
application function will be allowed to perform that function."
Tag	Memo	string	"Assigns " Param:string " as the meta-information tag ##memo## within the post-processor."
Tag	Name	name	"Assigns " Param:name " as the meta-information tag ##reportName## within the post-processor."
Tag	Note	string	"Assigns a note or memo value to the next cell."
Tag	Out	outid	"This binds the report output to a stream identified by " Param:outid ". See the " IntMod:Output " module for more information \
on output streams."
Tag	Page	how	"Forces a page-break before the current line if " Param:how " is <b>Before</b>, or after the current line if " Param:how " is \
<b>After</b>."
Tag	Privileges	privexp	"Assigns " Param:privexp " as the meta-information tag ##privileges## within the post-processor."
Tag	Row	ref	"Associates an identifier/key/reference with the row. This can be used as an argument to the " TagName:Select " row selection routine."
Tag	Scale	num	"Scale the size of the page to " Param:num "%. This only applies to Excel."
Tag	Scale	keyword	"If " Param:keyword " is <b>FIT</b> then scale the output to fit on one page. This only applies to Excel."
Tag	Section	name	"Specifies the xv4rpp (HTML/Excel post processor) section to be used to process this report. Normally the section is 'main.v4r' or \
main.v4rMS (for reports with multiple sheets). This option overrides the default with the given " Param:name "."
Tag	Segment	name	"This specifies the row segment name to be used when XML is being output. If no " TagName:Segment " is given then the following \
defaults are used- &lt;Heading&gt; for header values, &lt;Detail&gt; for detail rows, &lt;Recap&gt; for recap (subtotal) rows, and &lt;Footer&gt; for \
total rows."
Tag	Select	module	"Assigns a row selection module to the current sheet. The " Param:module " should be a javascript function to be called when the row is selected."
Tag	Server	url	"Assigns " Param:url " as the meta-information tag ##serverURL## within the post-processor."
Tag	Setup	jobsetup	"Assigns " Param:jobsetup " as the meta-information tag ##jobSetup## within the post-processor."
Tag	Sheet	name	"This argument is used when a report is composed of multiple sub-reports. The " Param:name " is the name of the sheet to appear \
as an Excel sheet, or HTML division. If the output is XML then " Param:name " is the name of the XML segment containing the sub-report. The " Param:name " \
parameter may also be given as a two-part list, '(<i>sheet xmlseg</i>)' where " Param:sheet " is the sheet name but " Param:xmlseg " is the name \
given to the XML segment. Multiple " TagName:Sheet " arguments may be given for multi-sheet reports."
Tag	Source	file	"Defines either a javascript or CSS source file for the html post-processor. If the " Param:file " extension is '.js' then \
javascript is assumed, if it is '.css' then CSS is assumed, otherwise the module fails."
Tag	Tag	tagval	"Assigns or appends a string to a report tag. This tag may be refernced by the V4R &rArr; HTML post-processor . The format \
of " Param:tagval " is '<i>tagname=value</i>' for assignment or '<i>tagname+=value</i>' to append <i>value</i> to the end of the current value of <i>tagname</i>. The \
tag can be referenced as '##<i>tagname</i>## within the post-processor."
Tag	Title	ttext	"This argument defines the title for the report. This argument can be given more than once for multi-line titles. (Or the title \
can be specified as a single string with the character sequence '\\l' being used to denote line breaks."
Tag	Top	text	"The text (a single line, mutliple lines or a list) is prepended to the beginning of the report. This may be HTML or Javascript. The placement of this text is determined by the ##html.includeTop## entry in v4rppcore.v4i file in \
the V4 home directory."
Tag	Type	rpttype	"Defines the type of report. The " Param:rpttype " argument can be one of- V4R (default) to output a V4 results file (for post-processing), \
CSV for comma-delimited unformatted output, HTML for HTML output, Tab for tab-delimited unformatted output, or XML for XML output."
Tag	URL	urlval	"Associates a URL link to the next column. This only applies to HTML and V4R type reports. If " Param:urlval " begins with a '+' \
then the URL is assumed to be associated with a " TagName:URLBase " and the " Param:urlval " is concatenated onto the end of the base when the link is clicked. \
If the next character is a digit (0-9) and the following character a comma, then the " Param:urlval " is associated with the corresponding " TagName:URLBase " from \
one to ten (1 or no digit corresponds to the first base, 2 the second, through 0 which references the 10<sup>th</sup>). See, also, the section on contextual \
formatting below. This tag may also be included within a " TagName:Heading " list for specifying links within a report heading."
Tag	URL	list	"If a list is given then the first element of the list is the URL link (see above). Any additional list elements are optional tagged argument \
for the link. Currently the only supported option is " TagName:Target "::" Param:window " where " Param:window " specifies the target window for the link. Details on valid \
targets can be found <a href='http://en.wikipedia.org/wiki/Hyperlink' target=_blank>here</a>."
Tag	URLBase	baseval	"Specifies a base URL value. Up to 10 different bases can be given for a report. If more than one is specified then " Param:baseval " must be a \
list containing the the bases. See below for more discussion."
Tag	User	name	"Assigns " Param:name " as the meta-information tag ##userName## within the post-processor."
Tag	Version	vstr	"Defines a version string for the report (meta-information tag ##version##)."
Tag	XML	xml	"Specifies one or more XML tags to enclose the report. This argument only applies to XML type reports. If the argument is UV4:none then it is ignored."
Desc
Index	URptL	general	Str("v4refmod_r.htm#IntMod:Rpt")
Index	URptT	general	Str("v4refmod_r.htm#IntMod:Rpt")
Index	URptR	general	Str("v4refmod_r.htm#IntMod:Rpt")
Index	URptS	general	Str("v4refmod_r.htm#IntMod:Rpt")
Index	URptV	general	Str("v4refmod_r.htm#IntMod:Rpt")
Index	URptSG	general	Str("v4refmod_r.htm#IntMod:Rpt")
Index	UV4:ColFormat	general	Str("v4refmod_r.htm#IntMod:Rpt")
Index	UV4:RowFormat	general	Str("v4refmod_r.htm#IntMod:Rpt")
Index	UV4:CellFormat	general	Str("v4refmod_r.htm#IntMod:Rpt")
Index	UV4:Link	general	Str("v4refmod_r.htm#IntMod:Rpt")
IPar	"This module is used to generate reports. When used properly many properties of the report can be easily modified. The " TagName:Type " argument \
can be used to vary the output from unformatted text, XML, or HTML without having to change other report parameters. The contextual formatting provides \
a simple, yet powerful mechanism for altering the format of report rows, columns, and cells. Columns of a report can be easily shifted or disabled,"
IPar	"Formatting of rows, columns, and cells can be done in two fashions. The first is through the use of dimensions and the " IntMod:SSDim " module. \
The other is by using special dimensions and UV4 values to define bindings that are automatically evaluated as part of the " IntMod:Rpt " module processing. \
If any of the following dimensions are defined then they are automatically updated in the context with the values described: \
URptL (" PntType:Integer ") is updated with the current detail line number, URptR (" PntType:Dictionary ") is updated with the report type (V4R, Tab, CSV, HTML, XML), \
URptS (" PntType:Dictionary ") is updated with the report sheet name (if sheets are defined), URptT (" PntType:Dictionary ") is set to the \
current line type (Default, Heading, Detail, Recap, Footer), and URptV (" PntType:Shell ") is updated with the current cell value."
IPar	"The current column id or name is always inserted into context as-is. If a column consists of multiple sub-columns then an addition point may be added to \
the context if the dimension, URptSG (" PntType:Integer ") is defined. Its value will range from 1 (the first sub-column to the maximum number of sub-columns)."
IPar	"For each report entry, the following are evaluated in the order given- [UV4:ColFormat] for any column formatting, [UV4:RowFormat] \
for any row formatting, [UV4:CellFormat] for any cell-specific formatting, and [UV4:Link] for any URL linking to be applied. \
See the example below, click <a href='v4refRptExample1.htm' target=_blank>here</a> to see the result."
IPar	"<b>Note</b>: If you plan on using any of the above features then the associated dimensions (e.g. Dim:URptR, Dim:URptT, etc.) <b>must</b> be defined before the first \
call to the " IntMod:Rpt " module. Binding incorporating these dimensions my be defined at runtime with the " IntMod:BindQE " module but the dimensions must be pre-declared. \
V4 checks for the existence of these dimensions with the first " IntMod:Rpt " call to determine whether or not to check on each subsequent call."
IPar	"The first call to this module binds the report to the current DATA output stream. All subsequent call to the module output to that stream even if the default stream \
is different within the scope of the module call. This may be overridden with the " TagName:Out " tagged option."
IPar	"The " IntMod:Rpt " module is integrated with the " TagName:XML " option in the " IntMod:Do " and " IntMod:EchoS " modules. If a report is sharing the \
same output stream as the " IntMod:Do " or " IntMod:EchoS " module then the implied output from the " TagName:XML " tag is only performed when the \
report type is XML or HTML. No output is performed when the report type is V4R, Tab, or CSV."
Examples
EXWD	Rpt(Columns::(a b c d e f))	Defines a report with 6 columns
EXWD	Rpt(Disable::(c e))	Disable columns c and e
EXWD	Rpt(URLBase::([base1] [base2] [base3]))	Defines 3 URL base strings
EXWD	Rpt(URL::"+xxxxx")	Associates with the first base string
EXWD	Rpt(URL::"+2,...")	Associates with the third base string
EXWD	Rpt(Columns::(a (b ListSize([hList])))	Declare a report with variable number of column b's
EXWD	Rpt(Heading::MakeL((a "moo") MakeL(b (MakeP(Tag:URL Str("www.moo.com?Int=" xx*)) Str("b-" xx*))/Num(x:1 To ListSize([hList])))))	Include URL links within a dynamic heading
EXML	"Using the Rpt() Module for Complex Formatting"
ML	Dim URptS, URptT, URptR Dictionary
ML	Dim URptL Int
ML	Dim URptV Shell
ML	&nbsp;
ML	Dim RType Dict
ML	Dim TR Alpha
ML	&nbsp;
ML	[UV4:ColFormat c URptT:Default] TextColor::Red
ML	[UV4:RowFormat URptT:Detail URptL..]
ML	&nbsp;If({MthMod(URptL* 2) = 0} Then::CellColor::LightGrey)
ML	[UV4:CellFormat d URptT:Detail] If({Int* > 3} Then::TextColor::ForestGreen)
ML	[UV4:CellFormat b URptT:Detail] Format::"#,###.0"
ML	[UV4:URL a] If({Int* = 2} Then::"+?Page=125")
ML	[Test RType..]
ML	&nbsp;Do(
ML	&nbsp;&nbsp;&nbsp;&nbsp;SSDim(Dim:Int TextColor::Purple Dim:TR Style::"Right")
ML	&nbsp;&nbsp;&nbsp;&nbsp;rpt(id::fred Type::RType* Columns::(a b c d) xml::"table border='1'" URLBase::"http::/www.mksinc.com/"
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CSS::"table { border-collapse: collapse; background: transparent ; font-family: Arial; font-size: smaller ; }"
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CSS::"td { padding: 3px; }"
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CSS::"a:link { text-decoration: underline; color: blue }"
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CSS::"a:visited { text-decoration: none; color: green }"
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CSS::"a:hover { text-decoration: underline ; color: purple }"
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Title::"First Title Line" Title::"(and second)" Version::"test-1.0")
ML	&nbsp;
ML	&nbsp;&nbsp;&nbsp;&nbsp;rpt(heading::((a c "This extends")))
ML	&nbsp;&nbsp;&nbsp;&nbsp;rpt(heading::((a now) (c the) (b TR:is) (d "time for")))
ML	&nbsp;&nbsp;&nbsp;&nbsp;Enum(Int:1..5 
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Rpt(((c "xx") (a "Line") (b {Int* * 10000}) (d Str("Line " Int*))))
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End::(1 Rpt((b RCV(b))))
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)
ML	&nbsp;&nbsp;&nbsp;&nbsp;rpt(close?)
ML	&nbsp;&nbsp;&nbsp;)
Mod	Same	Determine if two numeric points are the same within a limit	Math
Index	nSame	Module	Str("v4refmod_d.htm#IntMod:Same")
Usage	logical	"num1 num2 epsilon tagarg"
UsageX	value	nSame	"arguments same as Same"
Params	logical	"TRUE if the two arguments are the same within the limits of epsilon."
Params	num1	"The first numeric argument."
Params	num2	"The second numeric argument."
Params	epsilon	"An optional upper limit by which the first two arguments can differ and still be considered the same. If this parameter is not specified then 0.005 is assumed."
Params	tagarg	"Optional tagged arguments described below."
Tag	Else	point	"Specifies the value to be returned if the first two arguments are not the <i>same</i>."
Tag	ElseIf	logical	"Continues an If/Else tag chain."
Tag	Then	point	"The value to be returned if the first two arguments are the <i>same</i>."
Desc
IPar	"This module calculates the absolute value of the difference between the first two arguments. If that value is less than or equal to espilon then Logical:True is returned. Otherwise Logical:False is returned."
IPar	"The " IntMod:nSame " module is equivalent to {~" IntMod:Same "()}."
Examples
EXWD	Same(1.1 1.2 0.1)	returns Logical:True
EXWD	Same(1.1 1.2 0.05)	returns Logical:False
Mod	Secure	Secure Subsets of V4	V4Int
Usage	result	"tagarg"
Params	result	"The result of the module which varies according to the arguments"
Params	tagarg	"One or more tagged arguments described below"
Tag	AreaAll	logical	"If " Param:logical " is TRUE then prevent execution of any of the <i>area</i> commands or modules. Returns the prior setting of this option."
TagRes	AreaAll	"Returns TRUE if all area command and modules are restricted, FALSE otherwise."
Tag	AreaUpdate	logical	"If " Param:logical " is TRUE then prevent execution of any of the <i>area update</i> commands or modules. Returns the prior setting of this option."
TagRes	AreaUpdate	"Returns TRUE if all area update commands and modules are restricted, FALSE otherwise."
Tag	CPU	seconds	"This option causes V4 to terminate if its main process consumes more than " Param:seconds " CPU seconds. See also the discussion below on V4 watchdogs."
Tag	Data	logical	"If TRUE then redirection of the DATA stream is not allowed."
Tag	Echo	logical	"If " Param:logical " is TRUE then prevent execution of any of the echo commands or modules. Returns the prior setting of this option."
TagRes	Echo	"Returns TRUE if all echo commands and modules are restricted, FALSE otherwise."
Tag	Files	logical	"If " Param:logical " is TRUE then prevent execution of any of the file access/update commands or modules. Returns the prior setting of this option."
TagRes	Files	"Returns TRUE if all file commands and modules are restricted, FALSE otherwise."
Tag	Hidden	dimension	"Sets the 'hidden' flag for the " Param:dimension ". The dimension will appear to be undefined (i.e. any reference will result in a 'Point not defined...' error. \
Furthermore, any future output of the dimension will be displayed with 'UV4:hidden'. This is identical to the " TagName:Hidden " option within the " IntMod:Dim " module."
Tag	HTTPGet	quota	"Restricts the total number of bytes that subsequent " IntMod:HTTP " calls may retrieve."
TagRes	HTTPGet	"Returns the restriction quota on " IntMod:HTTP " calls."
Tag	HTTPPut	quota	"Restricts the total number of bytes that subsequent " IntMod:HTTP " calls may send/post."
TagRes	HTTPPut	"Returns the restriction quota on " IntMod:HTTP " sends/posts."
Tag	Idle	minutes	"This option causes a V4 process to terminate if it goes for more than " Param:minutes " without <a href='http://en.wikipedia.org/wiki/STDIN' target=_blank>stdin</a> input. \
See also the discussion below on V4 watchdogs."
Tag	Intersection	kiscts	"This option causes V4 to terminate after it has performed more than " Param:kiscts " kilo-intersection evaluations. See also the discussion below on V4 watchdogs."
Tag	Key	value	"This option must be used in order to restore access to the " IntMod:Secure " module. The " Param:value " is the 64 bit key returned when the module was locked."
Tag	Lock	module	"Prevents future access to the V4 " Param:module ". If the " Param:module " is " IntMod:Secure " then a 64 bit key is returned. This key must be given \
(see " TagName:Key " option above) to unlock the module."
Tag	EvalNest	logical	"If " Param:logical " is TRUE then prevent execution of any nested V4 evaluations (e.g. " IntMod:EvalCmd " module). Returns the prior setting of this option."
TagRes	EvalNest	"Returns TRUE if nested evaluations are restricted, FALSE otherwise."
Tag	Module	intmod	"Specifying an internal module (" Param:intmod ") prevents any subsequent parsing of V4 source referencing the module. It does not prevent the subsequent execution \
of the module, only its reference."
Tag	OSFileListOf	logical	"If " Param:logical " is TRUE then prevent execution of any of the " IntMod:OSFile " " Tag:ListOf " options. Returns the prior setting of this option."
TagRes	OSFileListOf	"Returns TRUE if the " IntMod:OSFile " " Tag:ListOf " operation is restricted, FALSE otherwise."
Tag	OSFileInfo	logical	"If " Param:logical " is TRUE then prevent execution of any of the " IntMod:OSFile " information options. Returns the prior setting of this option."
TagRes	OSFileInfo	"Returns TRUE if all " IntMod:OSFIle " information tags are restricted, FALSE otherwise."
Tag	ProjectArea	logical	"If " Param:logical " is TRUE then prevent creation of a " IntMod:Project " " TagName:Area " file. Returns the prior setting of this option."
TagRes	ProjectArea	"Returns TRUE if the creation of a " IntMod:Project " " TagName:Area " file is restricted, FALSE otherwise."
Tag	Redirection	logical	"If " Param:logical " is TRUE then prevent execution of any of the output redirection options. Returns the prior setting of this option."
TagRes	Redirection	"Returns TRUE if all output redirection options are restricted, FALSE otherwise."
TagRes	SessionKey	"Generates a new 32 byte string that the V4 xlib package uses as a web session key."
Tag	Test	logical	"If " Param:logical " is true then prevent the use of the " IntMod:V4 "(" TagName:Test ") feature."
TagRes	Test	"Returns the restriction status of the " IntMod:V4 "(" TagName:Test ") feature."
Tag	Unlock	module	"Unlocks (removes restrictions) on the specified V4 " Param:module ". (See also " TagName:Key " for unlocking the " IntMod:Secure " module.)"
Tag	Value	"section.name"	"Returns the value associated with the named entry within the section within the v4site.ini file. See the discussion below."
Tag	XDBAccess	logical	"If " Param:logical " is TRUE then prevent all read access to external databases (via " IntMod:DBGet " module). Returns the prior setting of this option. \
Note that this differs from restricting the " IntMod:DBGet " module. This restricts any subsequent access even with previously compiled bindings."
TagRes	XDBAccess	"Returns the restriction status of access to external databases."
Tag	XDBXct	logical	"If " Param:logical " is TRUE then prevent all updates to external databases (via " IntMod:DBXct " module). Returns the prior setting of this option."
TagRes	XDBXct	"Returns the restriction status of updates to external databases."
Desc
IPar	"This module can be used to lock-down or restrict access to just about any feature within V4. This feature is to be used when a trusted process must link to to \
an untrusted (or undebugged) area of bindings and run potentially harmful code."
IPar	"If the " IntMod:Secure " module itself is restricted a 64-bit random key is returned. This key must be the first argument of any subsequent call to " IntMod:Secure " or the \
module will fail. If an incorrect key is given, V4 will internally sleep for an unspecified amount of time. This delay effectively eliminates the possibility of a brut-force attempt to \
guess at the key."
IPar	"There are three <i>watchdog</i> options within this module: " TagName:CPU ", " TagName:Idle " and " TagName:Intersection ". All three are implemented with the spawning of a watchdog \
subprocess. This process wakes up periodically and compares the current V4 environment with the limits currently in effect. If any of the limits have been exceeded then the main process is \
terminated. The wakeup interval of this watchdog is currently 10 seconds. This means that any limit will likely be exceeded before a V4 process is actually terminated. For example if the " TagName:CPU " \
limit is set at 60 seconds then it is possible that a process could consume almost 70 seconds before terminating."
IPar	"Each time an instance of V4 is started it looks for a file v4runtimeinfo-<i>majorversion-minorversion</i>.bin in the v4 home directory. If the file does not exist it is created from the v4i files also in that home directory \
plus the v4site.ini file. This file contains any sensitive information that you need to run an application but don't want to explicitly reference within the V4 source code. The format of the file is similar to Window's ini files. \
It consists of sections and entries within the sections. Section names are enclosed in brackets and <i>name=value</i> entries appear on following lines."
IPar	"Taking the example file below, V4(Secure::\"gmail.password\") would return 'topsecret'."
EXML	"Example v4site.ini file"
ML	#       v4Site.ini - Site specific information
ML	 
ML	[mysql]
ML	password=secret
ML	 
ML	[gmail]
ML	defaultSender="V4 Moderator"
ML	userName=v4mod@gmail.com
ML	password=topsecret
ML	host=smtp.gmail.com
ML	 
ML	[client1]
ML	ftpUsername=fred
ML	ftpPassword=ftpsecret
EXWD	Secure(Lock::GuiAlert Lock::GuiMsgBox)	Prevent access to the two gui modules
EXWD	BindQE([secKey] Secure(Lock::Secure))	Prevent access to the Secure() module and save key to unlock
EXWD	Secure(Key::[secKey] Unlock::Secure)	Restore access to the Secure() module
EXWD	Secure(AreaAll::TRUE)	Prevent access to all Area commands and modules
Mod	Self	Return Argument as Value	V4Int
Usage	result	"point"
Usage	result	"point dimension"
Params	result	"The result of evaluating point."
Params	point	"Any V4 point."
Desc
IPar	"The " IntMod:Self " module simply returns its single argument as its value. Its main use is with other modules where an intersection is required but a context point is needed."
IPar	"If a second argument is given and is a dimension then the result is returned as a point on that dimension. \
If the second argument is given but it is not a dimension then it is ignored. \
Note that no conversions are performed, the dimension is simply updated. This option is primarily for preventing endless recursion in UV4:Acceptor and UV4:Displayer bindings (see example below)."
Index	Acceptor	UV4	Str("v4refmod_s.htm#IntMod:Self")	Self	IntMod
Index	Displayer	UV4	Str("v4refmod_s.htm#IntMod:Self")	Self	IntMod
EXWD	Self(Cus*)	returns the current customer
EXWD	Self(Plus(1 3))	Int:4
EXWD	Self(@Plus(1 3))	@Plus(1 3)
EXWD	Self("now is" Dim:Int)	Int:"now is"
EXWD	Dim lastName Alpha Displayer	define an Alpha dimension
EXWD	[UV4:Displayer lastName..] Str(lastName* Capitalize?)	will recurse into oblivion
EXWD	[UV4:Displayer lastName..] Str(Self(lastName Dim:Alpha) Capitalize?)	will evaluate properly
EXWD	Self(UDate:1/1/07 Dim:D)	returns D:1/1/07
EXWD	Self(UDate:1/1/07 Dim:Int)	returns Udate:1/1/07 (second argument ignored)
Mod	SendMail	Send Email	OSRel
Usage	result	"tagargs"
Params	result	"The module returns Logical:true if successful and fails otherwise."
Params	tagargs	"One or more of the tagged arguments below."
Tag	Attach	stream	"Attach the text that has been written to the output stream identified by " Param:stream ". The name of the attachment will be 'attachment'."
Tag	Attach	file	"Include the named " Param:file " as an attachment."
Tag	Attach	list	"The " Param:list " must contain two alpha elements. The first is the name of the file or stream to be attached. The second is the name to be associated with the attachment. See below for an example."
Tag	CC	address	"Send a CC (carbon copy) to the specified " Param:address "."
Tag	CC	list	"Send a CC to each of the email addresses within the " Param:list "."
Tag	Connection	type	"How to connect to the email server. The " Param:type " must be TLS (transport layer security, DEFAULT), PLAIN (unencrypted) or TRYTLS (attempts a TLS connection and degrades to PLAIN if necessary)."
Tag	Format	type	"The format of the email. The " Param:type " must be either TEXT or HTML."
Tag	From	name	"Who the email is from. The format for " Param:name " is <i>alias &lt;emailaddress&gt;</i>"
Tag	Host	address	"The ip address of the hosting email server."
Tag	HTML	stream	"Include the text, as an HTML segment, that has been written to the output stream identified by " Param:stream "."
Tag	HTML	text	"Include the " Param:text " within the email as an HTML segment."
TagRes	HTML	"Treat the next argument as text for an HTML segment. See also the " TagName:Include " tag."
Tag	Include	file	"Include the contents of " Param:file " within the body of the text."
Tag	Include	stream	"Include the contents of the named " Param:stream " into the email."
Tag	Name	text	"Associates " Param:text " as the name of the next email segment."
Tag	Password	text	"Specifies the connection password to the email server. It is used with the " TagName:User " tag."
Tag	Port	num	"The connection port number to use if connecting to a non-standard email server."
Tag	Reply	email	"An email reply-to address. Normally a reply returns to the email address of the sender. This can be overridden with this tag."
Tag	Subject	text	"The subject line for the email."
Tag	Text	stream	"Include the text, as an text segment, that has been written to the output stream identified by " Param:stream "."
Tag	Text	text	"Include the " Param:text " within the email as a text-only segment."
Tag	To	address	"Send the email to the specified " Param:address "."
Tag	To	list	"Send the email to each of the email addresses within the " Param:list "."
Tag	Trace	logical	"Turn debug tracing on if " Param:logical " is TRUE."
Tag	User	name	"The username to be used in connecting to the email server."
Desc
IPar	"This module constructs a (multi-part) email message, connects to a server and passes the message to the server. Various tag combinations can be used to send a variety of email types."
Examples
EXWD	SendMail(... Attach::("foo.txt" "instructions.txt"))	Attach the contents of foo.txt but use instructions.txt as the name of the attachment within the email.
EXWD	SendMail(... From::"John Doe &lt;jdoe@moo.com&gt;")	The 'from' field on the email will show as John Doe with most email clients.
EXWD	SendMail(... HTML? Include::"body.htm")	Include the file body.htm as an HTML segment within the email.
EXML	"Sending an email from a file stream"
ML	Output(Create::"email.tmp" Id::emailHTML)
ML	Do(Out::emailHTML <i>write to the stream</i>)
ML	/* Optional repeat above for stream emailText */
ML	nDefQ(Parse(email* As::email) Then::EchoW("Invalid email address: " email*))
ML	SendMail(Host::"smtp.gmail.com" /* Use gmail to send email */
ML	&nbsp;&nbsp;&nbsp;From::"V4 Documentation &lt;v4@mksinc.com&gt;"
ML	&nbsp;&nbsp;&nbsp;User::Secure(Value::"email.userName") /* Pull the gmail user account name from the v4site.ini file */
ML	&nbsp;&nbsp;&nbsp;Password::Secure(Value::"email.password")
ML	&nbsp;&nbsp;&nbsp;Reply::[defaultReplyTo],UV4:none /* If we have a reply-to defined use it otherwise ignore */
ML	&nbsp;&nbsp;&nbsp;Text? Include::Output(Id::emailText Close?),UV4:none /* If the emailText stream is defined then close it and use contents for text-only segment of email */
ML	&nbsp;&nbsp;&nbsp;HTML? Include::Output(Id::emailHTML Close?))
EXML	"Sending an email from a buffered stream"
ML	Output(Buffered? Id::bufStream)
ML	Do(Out::bufStream <i>write to the stream</i>)
ML	SendMail(Host::"smtp.gmail.com" /* Use gmail to send email */
ML	&nbsp;&nbsp;&nbsp;From::"V4 Documentation &lt;v4@mksinc.com&gt;"
ML	&nbsp;&nbsp;&nbsp;User::Secure(Value::"email.userName") /* Pull the gmail user account name from the v4site.ini file */
ML	&nbsp;&nbsp;&nbsp;Password::Secure(Value::"email.password")
ML	&nbsp;&nbsp;&nbsp;Reply::[defaultReplyTo],UV4:none /* If we have a reply-to defined use it otherwise ignore */
ML	&nbsp;&nbsp;&nbsp;Text? Include::bufStream))
ML	Output(Id::bufStream Close?)
Mod	Socket	Send and Receive Data Through an Internet Socket	DBase OSRel
Usage	result	"tagargs"
Params	result	"The received data as a point on Dim:Alpha or Logical:True if no data is requested."
Params	tagargs	"One or more of the tagged arguments below."
Tag	Bytes	num	"Specifies the number of bytes to receive for the reply."
Tag	Close	logical	"Determines whether or not to close the socket connection. If " Tag:Close ":FALSE is given then \
the socket is not closed and remains open for subsequent " IntMod:Socket " calls. The default is " Tag:Close ":TRUE."
Tag	Create	file	"The return message is written to " Param:file " rather than returned as a V4 string. See also the " TagName:Text " option."
Tag	Echo	how	"This option is used for debugging. If " Param:how " is SEND then all data sent through the \
socket is echoed to the current trace stream (see " IntMod:Output "). If " Param:how " is RECEIVE then all data received is \
echoed to the current trace stream. If " Param:how " is ALL then both send and receive data is echoed."
Tag	Host	name	"The " Param:name " of the server/host to connect to. This may be an entry in the local hosts file, an explicit IP address, \
or a domain name (e.g. www.mksinc.com). If no " Tag:Host " argument is given then the module fails unless a prior " IntMod:Socket " \
call has been given with " Tag:Close ":FALSE."
Tag	Include	file	"Send the contents of " Param:file " through the socket connection. If both a " TagName:Message " and " TagName:Include " arguments are given \
then the message text will be sent first and the file second."
Tag	Include	stream	"Same as " TagName:Include ":" Param:text " except that the data is taken from the specified stream's output buffer."
Tag	Message	string	"The " Param:string " is sent as the message to the target host/server. If no " Tag:Message " argument is \
given then no message is sent to the target."
Tag	Port	num	"The port number on the server to connect to. Like the " Tag:Host " argument, this is mandatory \
unless a prior " IntMod:Socket " call has been given."
Tag	Reply	logical	"Determines whether or not the module receives a reply. The default is " Tag:Reply ":TRUE."
Tag	Session	mode	"Starts or completes a multi-" IntMod:Socket " session. The " Param:mode " should be OPEN to start \
a session and CLOSE to terminate a session. All attributes set when the session is open are carried across the subsequent " IntMod:Socket " \
calls until the CLOSE is given. All input received on the socket connection is buffered and returned as a single Dim:Alpha point."
Tag	Text	logical	"This is used in conjunction with the " TagName:Create " option to specify if a text or binary file is created. The default value is TRUE (for text)."
Tag	Until	string	"The module receives a reply until the " Param:string " is matched in the reply."
Tag	Until	num	"The module receives a reply until a byte equal to " Param:num " is received. The default is " Tag:Until ":26 (ASCII EOM)."
Tag	Wait	seconds	"Specifies the maximum number of seconds to wait for a response. The default is 30 seconds."
Desc
IPar	"This module is used to initiate a socket connection to a remote server, send a message to it, and optionally receive a reply. \
There is no implicit end-of-message with socket streams so either a length or terminating byte/string must be specified or the \
module will time/error out. The maximum length of a reply is limited to that of a V4 " PntType:BigText " point. \
Longer replies must be broken into multiple segments with several " IntMod:Socket " calls OR through the use of the " TagName:Create " option \
to have the reply written to a file."
IPar	"Only one socket connection can be made at a time. Multiple concurrent connections are not yet supported."
Examples
EXWD	Socket(Host::Remote123 Port:2001 Message::"now is the time")	sends the message to host Remote123 on port 2001 and returns the reply as a point on the Alpha dimension
Mod	Sort	Sort a List of Points	V4Int List
Usage	sorted	"list sortoptions..."
Params	sorted	"The sorted points of list."
Params	list	"The list of points to be sorted."
Params	sortoptions	"One or more intersections specifying how list is to be sorted. If just a quoted intersection is specified then ascending order is assumed. If the " tag:Reverse " tag is used then reverse order is assumed. The " tag:BY " tag may be used for ascending sort order."
Tag	By	isct	"Sort the points in list in ascending order by the value returned by evaluating isct for each point in the list. Multiple By's may be given for complex sorts. Caution - make sure that the results of evaluating isct for all points to be sorted result in the same type of value. This can easily happen where the default value of an intersection is different than the normal result."
Tag	Context	point	"For each enumeration point, V4 evaluates and inserts the " Param:point " into the current context. \
If the point is UV4:none then nothing is done (i.e. UV4:none is not placed into the context). This point can be inserted into the context by quoting it: Context::@UV4:none. If " Param:point " is UV4:Skip the current point is ignored entirely."
Tag	ContextP	point	"This is identical to the " TagName:Context " tag except that if " Param:point " evaluates to a list then each point in the list is inserted into the context."
Tag	Do	isct	"After sorting the points in list, put each point in the current context and evaluate isct. This is equivalent to Enum(Sort(...) @isct) but more efficient because " IntMod:Sort " does not have to generate an output list. Note that no list is returned by " IntMod:Sort "."
Tag	Duplicate	logpt	"If " Param:logpt " is TRUE then allow duplicate points in result (this is the default), \
otherwise remove duplicate points."
Tag	If	isct	"Test each point in list by evaluating isct. If " param:isct " returns true then include the point for sorting. If " param:isct " returns false then do not include the point."
Tag	Index	dim	"The dimension is inserted into the context with each selected point with an integer value representing the ordinal \
number of the point (i.e. the first selected point is reflected as " Param:dim ":1, the second as 2, etc.)"
Tag	Index	point	"The " Param:point " is inserted into the context and incremented by one after each point. This allows one to specify a starting value for an index."
Tag	Num	number	"After sorting, only the first " Param:number " points are returned."
Tag	Parent	pt	"Specifies the parent point. See " IntMod:Enum " for a complete description."
Tag	PIf	isct	"Specifies a test based on the parent. See " IntMod:Enum " for a complete description."
TagRes	Pop	"When this tag is specified, V4 will pop off the context frame after processing each point in the enumeration. This option should be considered if points of differing dimensions are being enumerated. In this case, a point may unknowingly remain in the context and the " TagResName:Pop " option is the only way to ensure that a single enumeration point resides in the context at a time."
Tag	Reverse	isct	"Similar to " tag:By " except that the points are sorted in descending order."
Tag	Shell	dim	"Each point in the list is added to the current context under dimension " Param:dim ". Note \
that this dimension should be a shell dimension and should be specified as Dim:" Param:dim ". When this argument is given \
the enumerating point is NOT added to the context under its own dimension."
Tag	Sum	isct	"Maintains a rolling sum of the " param:isct ". See " IntMod:Enum " for a complete description."
Tag	While	isct	"Test each point in list by evaluating isct. If isct returns true then include the point for sorting. If " param:isct " returns false then that point and all other points in the list are not sorted- only those before the first evaluation of false."
Desc
IPar	"The " IntMod:Sort " module sorts its first argument list by the one or more sortoptions. Each sort option is an intersection usually referencing the points in list. By default the sort order is ascending."
Examples
EXWD	Sort(Cus.. By::Cus.State Reverse::Cus.AnnualSales )	Sort all points on Cus(tomer) dimension by state and descending annual sales
EXWD	Sort(Cus.. Reverse::Cus.YTDSales Num::1)	Sort customers by descending YTDSales and returns the first
EXWD	Enum(Sort(IM.. If::{IM.Code = Code:xyz} By::IM.Id Do::EchoT(IM.Id IM.Description IM.Price)))	Sorts all items having Code:xyz by Id and then outputs a table with the id, description, and price.
EXWD	Sort(Item.. If::{Item.Code = Code:xyz} By::Item.Id Do::EchoT(Item.Id Item.Description Item.Price))	Same as the prior example
Mod	Spawn	"Invokes a Sub Process"	OSRel
Usage	logical	"command tags"
Params	command	"A string argument to be executed. Multiple arguments are concatenated into a single command argument."
Params	oshandle	"An " PntType:OSHandle " point referencing a previously created subprocess."
Params	tags	"Any of the optional tags below."
Tag	Active	oshpnt	"Returns Logical:True if the subprocess/thread " Param:oshpnt " is currently active. The module \
fails if the subprocess/thread is no longer active."
Tag	Arg	argstr	"Use " Param:argstr " as the arguments. If not specified then then any arguments are assumed to be appended to the command line."
Tag	Append	file	"All stdout/stderr output from the subprocess is append to the " Param:file ". The " Param:file " is created if necessary. The file is closed when the process terminates."
Tag	Bytes	max	"Limits the output of the spawned process to " Param:max " bytes. The default is 10mb."
Tag	Create	file	"The " Param:file " is created and all stdout/stderr output from the subprocess is sent to the file. The file is automatically closed \
when the process finishes or is terminated."
Tag	Echo	logical	"If TRUE then echo the command line to the status output stream before spawning the subprocess."
Tag	Echo	option	"If " Param:option " is ONLY then only echo the command line. NO subprocess is spawned. This is a debugging option."
TagRes	Echo	"Echo the command line to the status output stream. The line is output immediately before the subprocess is created."
Tag	Maximum	secs	"V4 will wait a maximum of " Param:secs " for the subprocess to complete. This applies to processes with " Tag:Wait ":TRUE or " Tag:Wait ":FALSE."
Tag	Result	oshpnt	"Returns the exit code of the specified subprocess/thread. If the process is still running then \
the module fails."
Tag	Wait	logical	"If " Param:logical " is TRUE then wait for the subprocess to complete (default). If it is FALSE \
then spawn the process and immediately continue with V4 execution. If it is APPLICATION then the subprocess is spawned as \
an independent application. This option may also be used to wait for one or more previously created subprocesses with ALL \
or ANY. ALL waits for all subprocesses to complete, ANY for any one process to complete."
Desc
IPar	"The " IntMod:Spawn " module invokes a sub process and passes the command string to be executed by the sub process. The format of the command string may vary across operating systems."
Examples
EXWD	Spawn("cmd /C del *.foo")	Deletes files (under Windows)
EXWD	[DelCommand] "cmd /C del "	Bind value to intersection
EXWD	Spawn([DelCommand] "*.foo")	same as above
EXWD	BindQE([Proc1] Spawn("<i>program1</i>" Wait::No))	Starts program1 and binds [Proc1] to the process point
EXWD	BindQE([Proc2] Spawn("<i>program2</i>" Wait::No))	Starts program2 and binds [Proc2] to the process point
EXWD	Spawn([Proc1] [Proc2] Wait::All)	Waits for both program1 and program2 to complete
EXWD	Spawn([Proc1] [Proc2] Wait::Any)	Waits for either program1 or program2 to complete
Mod	Sqrt	Calculate the Square Root	Math
Usage	result	"number"
Params	result	"The resulting square root"
Params	number	"The number to calculate the square root of"
Desc
IPar	"The " IntMod:Sqrt " module calculates the square root of its argument."
Mod	SSDim	Set SpreadSheet Options for Dimension	SSRel
Usage	undef	"Dim:dim pt1 pt2 ..."
Params	dim	"The dimension to be set (or special keyword)."
Params	pt1	"An option to be set for the dimension."
Tag	CellColor	name	"The color of the spreadsheet cell. Colors may be specified as a 24 hexadecimal number of the form #" Param:rrggbb " or as any valid HTML color."
Tag	Class	name	"Associate the CSS class " Param:name " with the dimension."
Tag	CSS	string	"Associate the cascading style sheet attributes in " Param:string " with the dimension."
Tag	Font	name	"Associates the spreadsheet font name to the dimension."
Tag	FontSize	npt	"Associates a font size to the dimension. The value can be a integer from 1 to 256, or a percentage from 0 to 256%."
Tag	Id	name	"Associate the CSS Id " Param:name " with the dimension."
Tag	Mask	string	"Associates an output format mask (ex: 0,000.00) to a dimension."
Tag	Position	list	"Defines absolute positioning characteristics for the current table or sheet. The elements of \
the " Param:list " are combinations of the following tagged values: " TagName:Height " to specify the height of the table, " TagName:Left " \
to give the left starting position, " TagName:Right " for the rightmost position, " TagName:Top " for the top of the table, \
and " TagName:Width " for the width."
Index	Height	Tag	Str("v4refmod_s.htm#IntMod:SSDim")	SSDim	IntMod
Index	Left	Tag	Str("v4refmod_s.htm#IntMod:SSDim")	SSDim	IntMod
Index	Right	Tag	Str("v4refmod_s.htm#IntMod:SSDim")	SSDim	IntMod
Index	Top	Tag	Str("v4refmod_s.htm#IntMod:SSDim")	SSDim	IntMod
Index	Width	Tag	Str("v4refmod_s.htm#IntMod:SSDim")	SSDim	IntMod
Tag	Style	set	"Associates a set of format options to the dimension. The supported options are described in the table below."
Tag	StyleName	name	"Associates a spreadsheet style name to a dimension."
Tag	TextColor	name	"Specifies the color of the text. The " Param:name " is the same as the " Tag:CellColor " tag."
Tag	URL	urlspec	"A URL to be associated with points on this dimension. Each point on this dimension will be hyperlinked \
via " Param:urlspec " upon conversion to HTML. The xvrestohtml process will scan " Param:urlspec " for the asterisk character \
and when found will substitute it with the current text value of the dimension point. This option is often used with the " TagName:Include " tag \
within the " IntMod:EchoS " module."
Tag	Width	num	"Specifies the width of a column. If " Param:num " is a number between 0 and 1 (e.g. 0.15) then it is \
taken as a percentage of the screen width. If it is an integer number greater than 1 then it is considered to be pixels. \
This option only applies to HTML output."
TagRes	CSS	"Convert the formatting associated with the prior dimension to <a href='http://www.w3.org/TR/REC-html40/present/styles.html' target=_blank>Cascading Style Sheet</a> format."
TagRes	Mask	"Returns the formatting mask (set with the " TagName:Format " tag) for the dimension. The module fails \
if no format mask has been set for the dimension."
Desc
IPar	"The " IntMod:SSDim " module associates one or more spreadsheet formatting attributes to a dimension. \
When points on the dimension are sent to a spreadsheet via " IntMod:EchoS ", the cells receiving the points are appropriately formatted. \
Multiple dimensions can be specified within a single module call."
IPar	"This module usually associates formatting with a dimension. It may also associate formatting parameters with \
sections of the the output. Use <b>Table</b> (instead of a dimension name) to set formatting characteristics for the entire \
table, <b>Row</b> for row specific formatting, <b>Cell</b> for cell specific, <b>HdrRow</b> for heading row specific, \
<b>HdrCell</b> for heading cell specific, and <b>TopOfPage</b> for title specific formatting."
IPar	"The supported " Tag:Style " options are given below. See the " PntType:Color " dimension for more information on allowed colors."
Table	Options within SSDim() Format Argument	0	0	#E6E6C0
TE	"Bold" "Text is <b>bolded</b>."
TE	"Center" "Centered"
TE	"CSpan" "Text is centered across several consecutive cells.<br>The text MUST be prefaced with '{<i>n</i>}'<br>where <i>n</i> denotes the number of cells."
TE	"Fill" "The text fills the cell."
TE	"Fit" "The text is sized to fit the cell."
TE	"Indent1" "Indent the value 2em."
TE	"Indent2" "Indent the value 4em."
TE	"Indent3" "Indent the value 6em."
TE	"Italic" "Text is <i>italicized</b>."
TE	"Left" "Left Justified"
TE	"LSpan" "Similar to CSpan except that the text is left justified."
TE	"NoBreak"	"Text is shown as a single line with no breaks at hyphens or spaces."
TE	"Right" "Right Justified"
TE	"RSPan" "Similar to CSpan except that the text is right justified."
TE	"Strike" "Text is show with a horizontal strike-thru."
TE	"UnderLine" "Text is <u>underlined</u>."
TE	"VBottom" "Align text on the bottom of the cell."
TE	"VCenter" "Vertically center the text in the cell."
TE	"VTop" "Align text to the top of the cell."
TE	"Wrap" "Text is wrapped if necessary to fit the cell."
Examples
EXWD	SSDim(Dim:Neg Format::"#,###.00" TextColor::Red)	Specifies formatting and color for points on Dim:Neg
EXWD	SSDim(Dim:Neg Mask::1234)	Alpha:"1,234.00"  - same as Format(1234 Mask::SSDim(Dim:Neg Mask?))
EXWD	SSDim(Dim:Cus URL::"javascript:DrillDownToCus('*');")	the DrillDownToCus function assumed to be defined (EchoS(Include::"xxx"))
EXWD	SSDim(Dim:Alpha TextColor::Red FontSize::"80%" Style::"Bold,Underline,Italic")	sets formats for Dim:Alpha
EXWD	SSDim(Dim:Alpha CSS?)	Alpha:"color: #ff0000; font-size: '80%';font-weight: bold; font-style: italic; text-decoration: underline;"
IPar	"Complex color (or style) schemes may become awkward when explicit dimensions must be declared and setup for each \
possible color/style/format combination. The next example shows how to achieve this by letting V4 automatically create dimensions \
for each combination. The example defines cell colors for each of the three rows output. Dates are formatted with a strike-thru \
if after 1-Jan-01. Text containing HOHOHO has a yellow cell color otherwise it has a light gray cell, brown text and is in italics."
EXML	"Automatic Generation of Color/Format/Style Dimensions"
ML	Dim CClr, TClr, TSty Dict /* CellColor, TextColor, TextStyle */
ML	Dim SMask Shell
ML	&nbsp;
ML	[SSD UV4:IsctFail]
ML	&nbsp;Do(Context(BindEE(MakeI(SSD `MakeLC(DefQ(CClr*) CClr* DefQ(TClr*) TClr* DefQ(TSty*) TSty*)) MakeP(Dim:Dim Dim:SMask)))
ML	&nbsp;&nbsp;&nbsp;&nbsp;SSDim(Dim* `MakeLC(DefQ(CClr*) CellColor::CClr* DefQ(TClr*) TextColor::TClr* DefQ(TSty*) Style::TSty*))
ML	&nbsp;&nbsp;&nbsp;&nbsp;Dim*
ML	&nbsp;&nbsp;&nbsp;)
ML	&nbsp;
ML	[TDate UDate..] If({UDate* > UDate:010101} Then::[SSD TSty:Strike] Else::[SSD]):=UDate*
ML	[TAlpha Alpha..]
ML	&nbsp;If(Str(Alpha* UC? Has::"HOHOHO") Then::[SSD TClr:Yellow] Else::[SSD TClr:Brown TSty:Italic CClr:LightGray]):=Alpha*
ML	&nbsp;
ML	[TestReport]
ML	&nbsp;Do(Enum(Int:1..3
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Context(TEQ(int* 1 CClr:Red 2 CClr:White 3 CClr:Green))
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EchoS([SSD]:=23123 [TDate UDate:010101] [TDate UDate:020101] [TAlpha "Now is the time"] [TAlpha "A HOHOHO to you"])
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)))
IPar	"The example below creates an HTML screen with 3 separate divisions or an Excel workbook with 3 sheets."
EXML	"Multi-Sheet/Table Formatting"
ML	[MultiSheetExample]
ML	 Do(SSDim(Table CSS::"empty-cells: show; border-collapse: collapse; background: transparent ; font-family: Arial; font-size: smaller ; border: 1px solid darkgrey;")
ML	    SSDim(Cell CSS::"border: 1px solid darkgrey; padding: 2px;")
ML	    SSDim(HdrRow CSS::"font-style: italic; background: pink;")
ML	    SSDim(TopOfPage CSS::"border: none;")
ML	    SSDim(Dim:Num Class::foo)
ML	    EchoS(CSS::".foo { color: blue; decoration: underline; }")
ML	    EchoS(Position::(Height::300 Width::150 Left::50 Top::150))
ML	    EchoS("Integer" "Square")
ML	    Enum(Int:1..20 @EchoS(Int* Num:={Int* * Int*}))
ML	    EchoS(End::"Table of Squares")
ML	 
ML	    EchoS(CSS::".foo { color: blue; decoration: underline; }")
ML	    EchoS(Position::(Height::300 Width::150 Left::250 Top::150))
ML	    EchoS("Integer" "Cube")
ML	    Enum(Int:1..20 @EchoS(Int* Num:={Int* * Int* * Int*}))
ML	    EchoS(End::"Table of Cubes")
ML	 
ML	    EchoS(CSS::".foo { color: blue; decoration: underline; }")
ML	    EchoS(Position::(Height::300 Width::150 Left::450 Top::150))
ML	    SSDim(Dim:Num Class::foo Format::"#.0000")
ML	    EchoS("Integer" "Root")
ML	    Enum(Int:1..20 @EchoS(Int* Sqrt(Int*)))
ML	    EchoS(End::"Math Tables of Interest")
ML	   )
Mod	StatAdjCosSim	Calculated Adjusted Cosine Similarity Function	Statistical
Usage	value	"xlist ylist zlist"
Params	xlist	"The x or first argument list of numbers to be evaluated."
Params	ylist	"The y or second argument list of numbers to be evaluated."
Params	zlist	"The z or third argument list of numbers to be evaluated. If three lists are not specified then the four tagged values below must be given."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	X	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the X or first argument list."
Tag	Y	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the Y or second argument list."
Tag	Z	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the Z or third argument list."
Desc
IPar	"This module returns the adjusted cosine similarity between two vectors as described <a href='http://www10.org/cdrom/papers/519/node14.html target=_blank'>here</a>."
Mod	StatAvg	Calculates Average	Statistical
Usage	value	"arg1 arg2 ... argn"
Usage	value	"list"
Usage	value	tagarg
Params	value	"The arithmetic average of the elements in list."
Params	argn	"A number"
Params	list	"The argument list of numbers to be evaluated. If no list is given then both Enum and Values tags must be specified."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the argument list."
TagRes	Distribution	"If this argument is specified then the elements in the list describe not the sample points but the \
resulting distribution curve. This curve is converted to its corresponding sample points. Note that negative values are not \
allowed. Non-integer values are rounded to the nearest integer value."
Desc
IPar	IntMod:StatAvg " returns the average or arithmetic mean of its arguments- " ImgGif:StatAvg
Examples
EXWD	StatAvg(Enum::Int:1..10 Values::Plus(Int* 25))	results in 30.5
EXWD	StatAvg(1 2 3 4 5)	results in 3
EXWD	StatAvg((1 2 3 4 5))	also results in 3
EXWD	StatAvg(Enum::Employee.. Values::Employee.Salary)	the average employee salary
Mod	StatAvgDev	Average Deviation	Statistical
Usage	value	"list"
Params	value	"The average deviation of the elements in list."
Params	list	"The argument list of numbers to be evaluated. If no list is given then both Enum and Values tags must be specified."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the argument list."
TagRes	Distribution	"If this argument is specified then the elements in the list describe not the sample points but the \
resulting distribution curve. This curve is converted to its corresponding sample points. Note that negative values are not \
allowed. Non-integer values are rounded to the nearest integer value."
Desc
IPar	"This module returns the average of the absolute deviations of the points in list from their mean. The equation for calculating the average deviation is " ImgGif:StatAveDev
Examples
EXWD	StatAvgDev( (10 9 1 3 5) )	3.12
Mod	StatChiTest	Chi Squared Test for Independence	Statistical
Usage	value	"constraints actlist expectedlist"
Params	value	"<span style='color:red'>to be documented</span>."
Params	constraints	"The number of degrees of freedom."
Params	actlist	"A list of points corresponding to observed data."
Params	expectedlist	"A list of points containing ratio of the totals to the grand total."
Desc
IPar	"This module calculates the test for independence. The formula is show below-" imgGif:StatChiTest
Examples
Mod	StatConfidence	Confidence Interval for a Population	Statistical
Usage	value	"alpha stddev size"
Params	alpha	"Significance level used to compute confidence level."
Params	stddev	"The population standard deviation."
Params	size	"The sample size."
Desc
IPar	"This module returns the confidence interval for a population mean. This interval is a range on both sides of the mean so to get the actual range of values one must calculate the range as " ImgGif:StatConfidence1
Examples
IPar	"Assume that alpha is 0.05 (or that the confidence level is 100(1-alpha)% which is 95%) then we need to calculate the area under the standard normal curve (stddev = 1.0) that equals 95% which is +/- 1.96. The confidence interval is therefore " ImgGif:StatConfidence2 ". If our sample is 100 apples with an average weight of 100 grams and a standard deviation of 1.8 then we can be 95% confident that the population mean is in the interval of " ImgGif:StatConfidence3 ". "
Mod	StatCorrel	Calculates Correlation between Two Lists	Statistical
Usage	value	"xlist ylist"
Params	xlist	"The x or first argument list of numbers to be evaluated."
Params	ylist	"The y or second argument list of numbers to be evaluated. If two lists are not specified then the three tagged values below must be given."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	X	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the X or first argument list."
Tag	Y	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the Y or second argument list."
Desc
IPar	"This module returns the correlation coefficient of the members of the two lists. The formula is based on the StatCovar function and is " ImgGif:StatCorrel
Examples
EXWD	StatCorrel((2 4 6 8 10) (1 2 3 4 5))	Num:1
EXWD	StatCorrel((2 4 5 8 10) (1 2 3 4 5))	Num:0.990148
Mod	StatCovar	Calculates Covariance between Two Lists	Statistical
Usage	value	"xlist ylist"
Params	xlist	"The x or first argument list of numbers to be evaluated."
Params	ylist	"The y or second argument list of numbers to be evaluated. If two lists are not specified then the three tagged values below must be given."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	X	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the X or first argument list."
Tag	Y	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the Y or second argument list."
Desc
IPar	"This module returns the covariance, or average of the products of deviations for each pair of points in the two lists. The formula is " ImgGif:StatCovar
Examples
EXWD	StatCovar((2 4 6 8 10) (1 2 3 4 5))	Num:4
EXWD	StatCovar((10 9 8 7 6) (1 2 3 4 5))	Num:-2
Mod	StatCritBinom	Binomial Distribution Value is Less/Equal Criterion	Statistical
Usage	value	"trials probs alpha"
Params	value	"The value k."
Params	trials	"The number of Bernoulli trials."
Params	probs	"The probability of a success on each trial."
Params	alpha	"The criterion value."
Desc
IPar	"The " IntMod:StatCritBinom " module calculates the smallest integer, k, for which the cumulative binomial distribution function is greater than or equal to " param:alpha "."
Examples
EXWD	StatCritBinom(8 .3 .55)	Num:2
Mod	StatDevSq	Calculates Square of Deviation from Average	Statistical
Usage	value	"arg1 arg2 ... argn"
Usage	value	"list"
Usage	value	tagarg
Params	value	"The sum of the squares of the deviations from the average."
Params	argn	"A number"
Params	list	"The argument list of numbers to be evaluated. If no list is given then both Enum and Values tags must be specified."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the argument list."
Desc
IPar	IntMod:StatDevSq " returns the sum of the squares of the deviation from the average arguments- " ImgGif:StatDevSq
Examples
EXWD	StatDevSq((1 2 3 4 5 6))	results in 17.5
Mod	StatDist	Calculates a Point or Area of a Distribution	Statistical
Usage	value	"restag arg arg ..."
Params	value	"The result of the calculation, a point on the curve or cumulative area under the curve."
Params	restag	"What type of distribution to calculate - see Result Tag below"
Params	arg	"One or more arguments depending on the type of distribution."
Tagres	BetaPDF	"The cumulative beta probability density function. Required tags are " tag:X ", " tag:Alpha ", and " tag:Beta ". Note that the X value must be in the range 0 <= x <= 1. If the X value is not in this range then the " Tag:A " and " Tag:B " parameters must be given to normalize the X value."
Tagres	Binomial	"The Individual term binomial distribution. Required tags are " tag:Nums ", " tag:Trials ", and " tag:ProbS ". The " tag:Cumulative " tag is optional and defaults to True."
Tagres	ChiSq	"The one-tailed probability of the chi-squared distribution. Required tags are " tag:X " and " tag:DoF "."
Tagres	Exponential	"The exponential distribution. The required tags are " tag:X " and " tag:Lambda ". The " tag:Cumulative " tag is optional and defaults to True."
Tagres	F	"The " tag:F " probability distribution. Required tags are " tag:X " and " tag:DoF " (two required)."
Tagres	Gamma	"The gamma distribution. The required tags are " tag:X ", " tag:Alpha ", and " tag:Beta ". The " tag:Cumulative " tag is optional and defaults to True."
Tagres	HyperGeo	"The hypergeometric distribution. The required tags are " tag:Samples " for number of successes in sample, " Tag:Trials " for number of trials, " Tag:NumS " for number in successes overall, and " Tag:NumP " is population size."
Tagres	LogNorm	"The lognormal distribution. The required tags are " tag:X ", " tag:Mean ", and " tag:StdDev "."
Tagres	NegBinom	"The negative binomial distribution. Required tags are " tag:NumF ", " tag:NumS ", and " tag:ProbS "."
Tagres	Normal	"The normal cumulative distribution. The required tags are " tag:X ", " tag:Mean ", and " tag:StdDev ". The " tag:Cumulative " tag is optional and defaults to True."
Tagres	NormalStd	"The standard normal cumulative distribution. The required tag is " tag:Z "."
Tagres	Poisson	"The Poisson probability distribution. The required tags are " tag:X " and " tag:Mean ". The " tag:Cumulative " tag is optional and defaults to True."
Tagres	StudentT	"The Student t-distribution. The required tags are " tag:X ", " tag:DoF ", and " tag:Tail "."
Tagres	Weibull	"The Weibull distribution. The required tags are " tag:X ", " tag:Alpha ", and " tag:Beta ". The " tag:Cumulative " tag is optional and defaults to True."
Tag	A	npt	"An optional lower bounds for the " tag:Beta " distribution, default is 0."
Tag	B	npt	"An optional upper bounds for the " tag:Beta " distribution, default is 1."
Tag	Alpha	npt	"The " tag:alpha " parameter to the distribution."
Tag	Beta	npt	"The " tag:beta " parameter to the distribution."
Tag	Cumulative	npt	"True for the cumulative distribution (area under the curve), False for the point on the curve."
Tag	DoF	npt	"Degrees of freedom. This may be given more than once (example, the " tag:F " distribution requires two degrees-of-freedom arguments)."
Tag	Lambda	npt	"The lambda parameter to the distribution."
Tag	Mean	npt	"The mean."
Tag	Num	npt	"The number in the sample."
Tag	NumF	npt	"The number of failures."
Tag	NumP	npt	"The number in the population."
Tag	NumS	npt	"The number of successes."
Tag	ProbS	npt	"The probability of a success."
Tag	Samples	npt	"The number of samples."
Tag	StdDev	npt	"The standard deviation."
Tag	Trials	npt	"The number of trials."
Tag	X	npt	"The x argument to the distribution."
Tag	Z	npt	"The z argument to the distribution."
Desc
Heading	"BetaPDF Distribution"
IPar	"The <a href='http://www.entisoft.com/ESTools/MathStatistics_Probability.HTML' target=_blank>cumulative beta distribution</a> is based on four parameters- x the value at which to evaluate over the interval A..B, Alpha & Beta which are parameters to the distribution and A & B which are the lower & upper bounds of the function. The equation for the cumulative beta distribution, or incomplete beta function is- " ImgGif:StatDist_Beta1 " where y is " ImgGif:StatDist_Beta2
Heading	"Binomial Distribution"
IPar	"The individual term <a href='http://www.stat.yale.edu/Courses/1997-98/101/binom.htm' target=_blank>binomial distribution</a> probability. The arguments are NumS (the number of successes), Trials (the number of independent trials), ProbS (the probability of success per trial). The function can be calculated at a point or cumulatively. The formula for the probability mass function is "ImgGif:Binomial1 " and the cumulative distribution function is " ImgGif:Binomial2
Heading	"Chi-Square"
IPar	"<a href='http://www.uvm.edu/~golivett/introbio/lab_reports/chi.html' target=_blank>Chi-Square</a> returns the one-tailed probability of the chi-squared  distribution. The arguments are (the value at which to calculate the function) and DoF (the degrees of freedom)."
Heading	"Exponential Distribution"
IPar	"This returns the <a href='http://www.itl.nist.gov/div898/handbook/eda/section3/eda3667.htm' target=_blank>exponential distribution</a> function which is used to model the time between events. The arguments are X (the value of the function), Lambda (a parameter) and Cumulative (true for the cumulative, false for the density function). The formula for the density function is " ImgGif:Exponential " and the formula for the cumulative function is " ImgGif:Exponential
Heading	"F Distribution"
IPar	"The <a href='http://www.statsoftinc.com/textbook/glosf.html' target=_blank>F distribution</a> is used to determine whether or not two data lists have different degrees of diversity. The arguments are X (the value at which to evaluate), DoF1 and DoF2 which are the numerator and denominator degrees of freedom. The equation is " ImgGif:F " where n1 and n2 are the degrees of freedom."
Heading	"Gamma Distribution"
IPar	"The <a href='http://www.xycoon.com/gamma.htm' target=_blank>Gamma</a> distribution function is used to study variables with a skewed distribution such as those found in queuing problems. The arguments are X (the value at which to evaluate), Alpha & Beta (parameters to the distribution), and Cumulative. When Alpha is a positive integer, this distribution is also known as the Erlang distribution which is commonly used in the telephone industry. The equation for the distribution is " ImgGif:Gamma
Heading	"HyperGeometric Distribution"
IPar	"The <a href='http://mathworld.wolfram.com/HypergeometricDistribution.html' target=_blank>hypergeometric</a> function returns the probability of a given number of sample successes, NumS, given the sample size, Sample, population success PopS and population size NumP. The formula is given below where x is the NumS, n = Num, M is NumP and N = NumP." ImgGif:HyperGeometric
Heading	"LogNormal"
IPar	"This returns the <a href='http://www.itl.nist.gov/div898/handbook/eda/section3/eda366e.htm' target=_blank>lognormal cumulative distribution</a>. It is to be used when data has been logarithmically transformed. The formula is- " ImgGif:LogNormal
Heading	"Negative Binomial Distribution"
IPar	"This <a href='http://www.mathworks.com/access/helpdesk/help/toolbox/stats/prob_d24.shtml' target=_blank>distribution</a> returns the probability of NumF failures before the NumS'th success when the probability of success is a constant ProbS. The formula is shown below where x corresponds to NumF, r is NumS and p is ProbS." ImgGif:Negative_Binomial
Heading	"Normal Distribution"
IPar	"The <a href='http://www.itl.nist.gov/div898/handbook/eda/section3/eda3661.htm' target=_blank>normal distribution</a> is calculated based on the formula below. The arguments are x, the value at which to calculate the distribution, the mean of the distribution, and the standard deviation." ImgGif:Normal
Heading	"Normal Standard Distribution"
IPar	"The <a href='http://www.itl.nist.gov/div898/handbook/eda/section3/eda3661.htm' target=_blank>normal standard distribution</a> returns the standard normal cumulative distribution with a mean of 0 and a standard deviation of 1. The formula is " ImgGif:Normal_Standard
Heading	"Poisson"
IPar	"The <a href='http://engineering.uow.edu.au/Courses/Stats/File40.html' target=_blank>Poisson</a> probability mass function is given by " ImgGif:Poisson1 " where lambda is the mean. \
The cumulative density function is given as " ImgGif:Poisson2
Heading	"Student's T"
IPar	"The <a href='http://www-stat.stanford.edu/~naras/jsm/TDensity/TDensity.html' target=_blank>Student's t-distribution</a> which is used in the hypothesis testing of small sample lists. The formula for calculating is with the incomplete beta function- " ImgGif:Students_T
Heading	"Weibull Distribution"
IPar	"The <a href='http://www.windpower.org/en/tour/wres/weibull.htm' target=_blank>Weibull distribution</a> is used for reliability analysis such as calculating the mean time to failure. The parameters to the function are x, the value at which to evaluate the function, alpha and beta which are parameters to the distribution. The equation for this distribution is " ImgGif:Weibull
Heading	"A note on calculating factorials"
IPar	"Several of the above distributions require the determination of factorials. The factorial grows very quickly and can overflow double precision floating point. V4 works with the log of the \
factorial instead of the actual value. When determining factorials for numbers above 1000, the <a href='http://mathworld.wolfram.com/StirlingsApproximation.html' target=_blank>Stirling approximation</a> is used."
Examples
Mod	StatDistInv	The Inverse of a Distribution Function	Statistical
Usage	result	"tagval prob arg ..."
Params	result	"The inverse of the distribution specified by tagval."
Params	prob	"The probability to find the inverse for. Always represented by the tagged value of Prob::npt."
Params	arg	"One or more tagged argument as required by the distribution."
Tagres	BetaPDF	"The cumulative beta probability density function. Required tags are " tag:Prob ", " tag:Alpha ", and " tag:Beta "."
Tagres	ChiSq	"The one-tailed probability of the chi-squared distribution. Required tags are " tag:Prob " and " tag:DoF "."
Tagres	F	"The " tag:F " probability distribution. Required tags are " tag:Prob " and " tag:DoF " (two required)."
Tagres	Gamma	"The gamma distribution. The required tags are " tag:Prob ", " tag:Alpha ", and " tag:Beta "."
Tagres	LogNorm	"The lognormal distribution. The required tags are " tag:Prob ", " tag:Mean ", and " tag:StdDev "."
Tagres	Normal	"The normal cumulative distribution. The required tags are " tag:Prob ", " tag:Mean ", and " tag:StdDev "."
Tagres	NormalStd	"The standard normal cumulative distribution. The required tag is " tag:Prob "."
Tagres	StudentT	"The Student's t-distribution. The required tags are " tag:Prob ", " tag:DoF ", and " tag:Tail "."
Tag	A	npt	"An optional lower bounds for the Beta distribution, default is 0."
Tag	B	npt	"An optional upper bounds for the Beta distribution, default is 1."
Tag	Alpha	npt	"The alpha parameter to the distribution."
Tag	Beta	npt	"The beta parameter to the distribution."
Tag	DoF	npt	"Degrees of freedom. This may be given more than once (example, the F distribution requires two degrees-of-freedom arguments)."
Tag	Mean	npt	"The mean."
Tag	Prob	npt	"The probability- the value at which to calculate the inverse."
Tag	StdDev	npt	"The standard deviation."
Desc
Examples
Mod	StatFTest	Performs the F Test on Two Lists	Statistical
Usage	value	"xlist ylist"
Params	value	"The result of the F test."
Params	xlist	"The " tag:x " or first argument list of numbers to be evaluated."
Params	ylist	"The " tag:y " or second argument list of numbers to be evaluated. If two lists are not specified then the three tagged values below must be given."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	X	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the " tag:X " or first argument list."
Tag	Y	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the " tag:Y " or second argument list."
Desc
IPar	"This modules returns the result of an F-test which is the one-tailed probability that the variances in xlist and ylist are not significantly different."
Examples
EXWD	StatFTest( (1 2 3 4 5) (2 3 4 10 6) )	Num:0.208
Mod	StatFisher	Calculates the Fisher Transformation	Statistical
Usage	tran	"x"
Params	tran	"The Fisher transformation at point x."
Params	x	"The point at which to calculate the transform."
Desc
IPar	"This module returns the Fisher transformation at x. The formula is " ImgGif:StatFisherDes
Examples
EXWD	StatFisher(.379949)	Num:0.4
EXWD	StatFisher(.291313)	Num:0.3
Mod	StatFisherInv	Inverse of the Fisher Transformation	Statistical
Usage	value	"y"
Params	x	"The argument to the " IntMod:StatFisher " transformation that would yield y."
Params	y	"The point to find the inverse of."
Desc
IPar	"This module returns the inverse of the Fisher transformation. The formula is " ImgGif:StatFisherInv
Examples
EXWD	StatFisherInv(.3)	Num:0.291313
EXWD	StatFisherInv(.4)	Num:0.379949
Mod	StatForecast	Forecast Value via Linear Trend	Statistical
Usage	yvalue	"x xlist ylist"
Params	yvalue	"The forecasted y value"
Params	x	"The value at which to forecast"
Params	xlist	"A list of actual or known x values"
Params	ylist	"A list of actual or known y values"
Desc
IPar	"The " IntMod:StatForecast " module calculates the predicted yvalue for a given x and list of existing x and y values."
Examples
EXWD	StatForecast(6 (1 2 3 4 5) (2 4 6 8 10))	Num:12
Mod	StatGammaLn	Natural Log of the Gamma Function	Statistical
Usage	value	"list"
Params	list	"A list of numbers"	
Desc
IPar	"The module returns the natural logarithm of the gamma function "
Examples
EXWD	StatGammaLn(4)	Num:1.7918
Mod	StatGeoMean	Geometric Mean	Statistical
Usage	value	"list"
Params	result	"The geometric mean of the elements in list."
Params	list	"The argument list of numbers to be evaluated. If no list is given then both Enum and Values tags must be specified."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the argument list."
TagRes	Distribution	"If this argument is specified then the elements in the list describe not the sample points but the \
resulting distribution curve. This curve is converted to its corresponding sample points. Note that negative values are not \
allowed. Non-integer values are rounded to the nearest integer value."
Desc
IPar	"This module returns the geometric mean, as shown by the equation below, of its argument " param:list "." ImgGif:StatGeoMean
Examples
EXWD	StatGeoMean((10 10))	Num:10
EXWD	StatGeoMean((1 2 3 4 5))	Num:2.60517
Mod	StatHarMean	Harmonic Mean	Statistical
Usage	value	"list"
Params	value	"The harmonic mean of the argument " param:list "."
Params	list	"The argument list of numbers to be evaluated. If no list is given then both " tag:Enum " and " tag:Values " tags must be specified."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the argument list."
TagRes	Distribution	"If this argument is specified then the elements in the list describe not the sample points but the \
resulting distribution curve. This curve is converted to its corresponding sample points. Note that negative values are not \
allowed. Non-integer values are rounded to the nearest integer value."
Desc
IPar	"This module calculates the harmonic mean of its argument " param:list ". The harmonic mean is the reciprocal of the arithmetic mean of reciprocals as show by the equation " ImgGif:StatHarMean
Examples
EXWD	StatHarMean((10 10))	Num:10
EXWD	StatHarMean((1 2 3 4 5))	Num:2.18978
Mod	StatKurtosis	Calculates Kurtosis of a List	Statistical
Usage	value	"list"
Params	list	"The argument list of numbers to be evaluated. If no list is given then both " tag:Enum " and " tag:Values " tags must be specified."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the argument " param:list "."
TagRes	Distribution	"If this argument is specified then the elements in the list describe not the sample points but the \
resulting distribution curve. This curve is converted to its corresponding sample points. Note that negative values are not \
allowed. Non-integer values are rounded to the nearest integer value."
Desc
IPar	"This module returns the kurtosis, or relative sharpness/flatness of a data set defined by list. A positive number reflects a sharper peak while a negative number indicates a flatter curve. The formula is:" ImgGif:StatKurtosis
Examples
EXWD	StatKurtosis((10 11 10.4 12 9.8 11.8))	Num:-2.04855
EXWD	StatKurtosis((10 10 10.4 10 9.8 11.8))	Num:4.54674
Mod	StatLinFit	Fits a Line to a Set of Points	Statistical
Usage	value	"tagarg ..."
Params	value	"The result of the fit. The specific result depends on the arguments given. Note also that ancillary results may be returned as context points."
Params	tagarg	"Tagged arguments described below."
Tag	AbsDev	dim	"If given, then the calculated absolute deviation of the fit will be returned as a context point on this dimension."
Tag	At	list/pt	"A list or single point. After the best fit line has been determined, each of the points specified by this argument is taken as an x value and the corresponding y value is determined."
Tag	Bind	isct	"If specified then a binding is created with isct as the basis for each " tag:At " point. Each " tag:At " point is appended into the " tag:Bind " intersection and the result is bound to the calculated y value of the fitted line."
Tag	ChiSq	dim	"If given, then the calculated chi-square of the fit will be returned as a context point on this dimension."
Tag	Context	dim	"If specified then each calculated y point (see At) is placed into the current context under this dimension."
Tag	Do	isct	"This option is used with the " tag:At " parameter. The " tag:Do " " param:isct " is evaluated for each calculated point determined by the fitted line and the " tag:At " points."
Tag	Enum	list	"A list of points to enumerate through for x and y values. See " tag:X " and " tag:Y " below."
Tag	Intercept	isct	"If specified then the Y intercept of the fitted line is returned as a context point on this dimension."
Tag	Method	mode	"How the best fit is to be performed. Use SLLS for least squares fitting (default) or SLLAD for least absolute deviation."
Tag	Next	num	"Not yet implemented."
Tag	Slope	dim	"If specified then the slope of the fitted line is returned as a context point on this dimension."
Tag	StdDev	dim	"If given, then the calculated standard deviation of the fit will be returned as a context point on this dimension."
Tag	X	isct	"The intersection is evaluated for each point in the " tag:Enum " list. The result is taken as the x value (see " tag:Y " below)."
Tag	Y	isct	"The intersection is evaluated for each point in the " tag:Enum " list. The result is taken as the x value (see " tag:X " above)."
Desc
IPar	IntMod:StatLinFit " is a multi-purpose module for fitting a straight line to a series of points"
EXML	"StatLinFit Examples"
ML	"Bind [FcstFGSales]"
ML	"&nbsp;Enum(IM.. If::IM.IsFG"
ML	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@StatLinFit(Enum::UMonth:9401..9612 Y::[Units],0 X::UMonth* Method::SLLAD"
ML	"	   At::UMonth* Context::Dim:Qty Do::[Explode]))"
ML	""
ML	"Bind [Explode IM.. UMonth.. Qty..]"
ML	"&nbsp;&nbsp;DEF(IM.BOM"
ML	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enum(IM.BOM @[Explode BOM.IM {BOM.Qty / IM.Yield * [FGFcst BOM.FGIM | Qty*],Qty*}])"
ML	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Context(MakeP(Dim:Exp)) BindQ(Exp.IM IM*) BindQ(Exp.Qty Qty*) BindQ(Exp.UMonth UMonth*)))"
ML	""
ML	"Bind [SumByComCode]"
ML	"&nbsp;Tally(Exp.. Context::Exp.IM"
ML	"&nbsp;&nbsp;&nbsp;&nbsp;(Sum::{Exp.Qty * IM.StdCost * IM.CC.StdAdj,1.0} By::(IM.CC Exp.UMonth) Bind::[RMProj]))"
ML	""
ML	"Bind [RMProjection UMonth..]"
ML	"&nbsp;Do([FcstFGSales] [SumByComCode]"
ML	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MatrixS(Rows::CC.. RowCap::CC.Desc Columns::UMonth* ColCap::UMonth* Values::[RMProj],0))"
ML	""
ML	"Bind [KidProj Cus..]"
ML	"&nbsp;Int:=LT(StatLinFit(Enum::[PIList] X::List(Prior* Position::ProgId*) Y::[Kids],0 At::Plus(ListSize([PIList]) 1)) 0 0 Arg:1)"
Mod	StatMax	Returns Maximum Number in a List	Statistical
Usage	value	"list cim"
Params	list	"The argument list of numbers to be evaluated. If no list is given then both " tag:Enum " and " tag:Values " tags must be specified."
Params	dim	"If specified, the result is returned on that dimension."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each lpt. The result of the evaluations form the argument list."
TagRes	Distribution	"If this argument is specified then the elements in the list describe not the sample points but the \
resulting distribution curve. This curve is converted to its corresponding sample points. Note that negative values are not \
allowed. Non-integer values are rounded to the nearest integer value."
Desc
IPar	IntMod:StatMin " returns the largest number in the list. When the " TagName:Enum " and " TagName:Values " tags are used, \
the module returns the largest value. See the " IntMod:Optimize " module to obtain the corresponding " TagName:Enum " value."
Examples
EXWD	StatMax((123 343 342 984 902))	984
Mod	StatMedian	Returns the Median Number of a List	Statistical
Usage	value	"list"
Params	list	"The argument list of numbers to be evaluated. If no list is given then both " tag:Enum " and " tag:Values " tags must be specified."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the argument " param:list "."
TagRes	Distribution	"If this argument is specified then the elements in the list describe not the sample points but the \
resulting distribution curve. This curve is converted to its corresponding sample points. Note that negative values are not \
allowed. Non-integer values are rounded to the nearest integer value."
Desc
IPar	"This module returns the statistical median of a list of numbers. This is the number in the list such that there are an equal count of numbers in the list less than this number and greater than this number. By convention, if the list contains an even number of points then " intmod:StatMedian " returns the average of the two middle numbers."
Examples
EXWD	StatMedian( (1 2 3 4 5) )	3
EXWD	StatMedian( (1 2 3 4 5 6) )	3.5 (average of 3 & 4)
EXWD	StatMedian( (1 2 3 10 11) )	3
EXWD	StatMedian( (1 2 3 10 11 12) )	6.5
Mod	StatMin	Returns the Minimum Number in a List	Statistical
Usage	value	"list dim"
Params	value	"The smallest number in the argument list."
Params	list	"The argument list of numbers to be evaluated. If no list is given then both " tag:Enum " and " tag:Values " tags must be specified."
Params	dim	"If specified, the result is returned on that dimension."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the argument list."
TagRes	Distribution	"If this argument is specified then the elements in the list describe not the sample points but the \
resulting distribution curve. This curve is converted to its corresponding sample points. Note that negative values are not \
allowed. Non-integer values are rounded to the nearest integer value."
Desc
IPar	IntMod:StatMin " returns the smallest number in the list. When the " TagName:Enum " and " TagName:Values " tags are used, \
the module returns the smallest value. See the " IntMod:Optimize " module to obtain the corresponding " TagName:Enum " value."
Examples
EXWD	StatMin((33 324 21 98))	21
EXWD	StatMin(Enum::Int:1..10 Values::Plus(Int* Int*))	2
Mod	StatMode	Calculates the Mode of a List	Statistical
Usage	value	"list"
Params	value	"The mode or most frequently occurring value in a list of numbers."
Params	list	"The argument list of numbers to be evaluated. If no list is given then both " tag:Enum " and " tag:Values " tags must be specified."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the argument list."
TagRes	Distribution	"If this argument is specified then the elements in the list describe not the sample points but the \
resulting distribution curve. This curve is converted to its corresponding sample points. Note that negative values are not \
allowed. Non-integer values are rounded to the nearest integer value."
Desc
IPar	"This module returns the most frequently occurring value in a list of numbers. If there is no most frequently occurring number then the module fails."
Examples
EXWD	StatMode((1 2 3 4 5 6 7 8 2 9 10))	Num:2
EXWD	StatMode((1 2 3 4 5 6 7 8 9 10))	fails - no most frequent value
EXWD	StatMode((1 2 3 4 5 6 7 8 9 10))	-1 (returned because StatMode failed)
Mod	StatPearson	Calculates Pearson Product Moment	Statistical
Usage	value	"xlist ylist"
Params	xlist	"The x or first argument list of numbers to be evaluated."
Params	ylist	"The y or second argument list of numbers to be evaluated. If two lists are not specified then the three tagged values below must be given."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	X	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the " tag:X " or first argument list."
Tag	Y	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the " tag:Y " or second argument list."
Desc
IPar	"This module returns the Pearson product moment correlation coefficient, r, which ranges from -1.0 to +1.0 as given by the formula below. It reflects the degree of a linear relationship between two lists." ImgGif:StatPearson
Examples
EXWD	StatPearson((1 2 3 4 5 6) (10 20 30 40 50 60))	Num:1
EXWD	StatPearson((6 5 4 3 2 1) (10 20 30 40 50 60))	Num:-1
EXWD	StatPearson((1 2 3 3 5 6) (10 20 30 40 50 60))	Num:0.976088
Mod	StatPercentile	Returns kth Percentile of List	Statistical
Usage	value	"k list"
Params	value	"The value from list (or interpolated) corresponding to the k<sup>th</sup> percentile."
Params	k	"The percentile to select from list."
Params	list	"A list of points."
Desc
IPar	"This module returns the k<sup>th</sup>value point from the list." 
Examples
EXWD	StatPercentile(0.3 (1 2 3 4))	returns 1.9
Mod	StatPermute	Number of Permutations for Given Number of Objects	Statistical
Usage	value	"number chosen"
Params	value	"The number of permutations."
Params	number	"The number of objects."
Params	chosen	"The number chosen in each permutation."
Desc
IPar	"This module returns the number of possible permutations of chosen objects out of a total of number objects. The equation for the calculation is " ImgGif:StatPermute
Examples
EXWD	StatPermute(100 3)	Num:970200
EXWD	StatPermute(10 3)	Num:720
EXWD	StatPermute(10 2)	Num:90
Mod	StatQuartile	Returns a Quartile of a List	Statistical
Usage	value	"k list"
Params	value	"The value from list (or interpolated) corresponding to the k<sup>th</sup> quartile."
Params	k	"The quartile (0, 1, 2, 3, or 4) to select from list."
Params	list	"A list of points."
Desc
IPar	"This module returns the kth quartile value point from the list. For k=0 this is the smallest point in the list, for k=4 it is the largest. For k=1, 2, and 3 it corresponds to calling " IntMod:StatPercentile " with 0.25, .50, and .75 respectively."
Examples
EXWD	StatQuartile(2 (1 2 3 4))	returns 2.5
Mod	StatProduct	Calculates the Product of a List	Statistical
Usage	value	"list"
Params	list	"The argument list of numbers to be evaluated. If no list is given then both " param:Enum " and " param:Values " tags must be specified."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the argument list."
Desc
IPar	"This module simply calculates the product of a list of numbers."
Examples
EXWD	StatProduct((1 2 3 4 5))	Num:120
Mod	StatRan	Generates a Random Number	Statistical
Usage	value	"tagarg"
Params	value	"A random number."
Params	tagarg	"One or more of the optional tagged arguments below."
Tag	ListOf	num	"Generates a list of the integers from 1 to " Param:num " in a random order. See the " TagName:Offset " argument to offset the \
numbers within the sequence."
Tag	Num	num	"Generate a random number between 1 and " Param:num "."
Tag	Offset	value	"Use " Param:value " as an additive offset to the integers return by the " TagName:ListOf " option."
Tag	Prob	list	"When this tag is specified, the result is not a random number but an integer index into an element \
of " Param:list ". This " Param:list " must be either a list of probabilities adding up to 1.0 OR a list of cumulative probabilities, the last \
element being 1.0. The returned index is determined by first generating a random number from 0 to 1 and then determining which list entry that \
number corresponds to. Internally, V4 maintains a list of cumulative probabilities from the " Param:list " and then compares the generated random \
number to the list of cumulative probabilities, returning the index for the first cumulative value that is greater or equal to the random number."
Tag	Seed	num	"A starting seed value for the generator. Note that separate seeds are maintained for each of the generators."
Tag	Select	list	"Selects a random element from " Param:list ". The list must contain at least one point."
Tag	Type	num	"The type of generator to use. 0 uses the standard generator that is part of the C runtime library \
and is not recommended. 1 uses a better algorithm and is the default. 2 is better than 1 but requires more CPU resources and \
is good for sequences of numbers into the low millions. Type 3 is the best generator (and most cpu expensive) and is good for \
sequence of virtually unlimited length (10<sup>18</sup> numbers)."
Tag	To	num	"The generator creates a random number between 0 and 1. If this argument is given then an integer value between 0 and " Param:num " will be returned."
Desc
IPar	"This module generates a pseudo-random sequence of numbers."
Examples
EXWD	StatRan()	Num:7.82636925942561e-006
EXWD	StatRan(To::50)	Int:7
EXWD	StatRan(ListOf::10)	(Int:9 Int:5 Int:6 Int:10 Int:4 Int:3 Int:1 Int:2 Int:7 Int:8)
EXWD	StatRan(ListOf::10 Offset::10)	(Int:19 Int:15 Int:16 Int:20 Int:14 Int:13 Int:11 Int:12 Int:17 Int:18)
EXWD	StatRan(Select::(now is the time))	now (for instance)
Mod	StatRSQ	Calculates r2 Value of Two Lists	Statistical
Usage	value	"ylist xlist"
Params	value	"The r2 value of the linear regression line."
Params	ylist	"The y or second argument list of numbers to be evaluated. If two lists are not specified then the three tagged values below must be given."
Params	xlist	"The x or first argument list of numbers to be evaluated."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	X	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the " tag:X " or first argument " param:list "."
Tag	Y	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the " tag:Y " or second argument " param:list "."
Desc
IPar	"This value is the square of the Pearson product moment. This value can be interpreted as the proportion of the variance in y attributable to the variance in x " ImgGif:StatRSQ
Examples
EXWD	StatRSQ((2 3 9 1 8 7 5) (6 5 11 7 5 4 4))	Num:0.0579502
EXWD	StatRSQ((2 3 9 2 8 7 5) (6 5 11 7 5 4 4))	Num:0.0786517
Mod	StatScale	Scales a List of Numbers	Statistical
Usage	reslist	"list tagarg..."
Params	reslist	"The resulting scaled list of numbers."
Params	list	"A list of numbers to be scaled."
Params	tagarg	"One or more tagged arguments below."
Tag	Dim	dim	"The points of the resulting list, " Param:reslist ", are to be points on this dimension."
Tag	Maximum	max	"Scale the points in the list such that the largest number becomes " Param:max "."
Tag	Minimum	min	"Scale the points in the list such that the smallest number becomes " Param:min "."
Tag	Offset	num	"Add " Param:num " to each element of " Param:list "."
Desc
IPar	"This module performs various scaling operations on a list of numbers. All scaling is linear."
IPar	"If both the " TagName:Minimum " and " TagName:Maximum " arguments are given then the points of the source list are \
scaled such that the smallest point becomes the " TagName:Minimum " value and the largest point becomes the " TagName:Maximum " value."
IPar	"The dimension of the resulting list points are the same as those of the original list if all points in the original \
list are of the same dimension. If not then the resulting points are on Dim:Num. The use of the " TagName:Dim " tag overrides \
this logical and forces the resulting points to be of the specified dimension."
Examples
EXWD	StatScale((1 2 3 4 5) Minimum::50)	(Int:50 Int:51 Int:52 Int:53 Int:54)
EXWD	StatScale((1 2 3 4 5) Maximum::100)	(Int:96 Int:97 Int:98 Int:99 Int:100)
EXWD	StatScale((1 2 3 4 5) Maximum::100 Minimum::50)	(Int:50 Int:63 Int:75 Int:88 Int:100)
EXWD	StatScale((1 2 3.0 4 5) Maximum::100 Minimum::50)	(Num:50 Num:62.5 Num:75 Num:87.5 Num:100)
Mod	StatSkew	Calculates the Skew of a List	Statistical
Usage	value	"list"
Params	list	"The argument list of numbers to be evaluated. If no list is given then both " param:Enum " and " param:Values " tags must be specified."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the argument list."
TagRes	Distribution	"If this argument is specified then the elements in the list describe not the sample points but the \
resulting distribution curve. This curve is converted to its corresponding sample points. Note that negative values are not \
allowed. Non-integer values are rounded to the nearest integer value."
Desc
IPar	"This module calculates the skewness of a distribution. Positive skewness indicates a distribution with its tail more towards positive values, negative with an asymmetric tail towards the negative. The formula for calculating skewness is " ImgGif:StatSkew
Examples
EXWD	StatSkew((1 2 3 4 5 6))	Num:0
EXWD	StatSkew((1 2 3 3 3 4 5 6))	Num:0.301953
EXWD	StatSkew((1 0 0 2 3 4 5 6))	Num:0.22625
EXWD	StatSkew((1 -1 -1 2 3 4 5 6))	Num:-0.0988396
Mod	StatSlope	Calculates Slope on Linear Regression of Two Lists	Statistical
Usage	slope	"xlist ylist"
Params	slope	"The slope of the linear regression line through the points determined by " param:xlist " and " param:ylist "."
Params	xlist	"The x or first argument list of numbers to be evaluated."
Params	ylist	"The y or second argument list of numbers to be evaluated. If two lists are not specified then the three tagged values below must be given."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	X	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the " tag:X " or first argument " param:list "."
Tag	Y	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the " tag:Y " or second argument " param:list "."
Desc
IPar	"This module calculates the slope for the linear regression line through the point pairs specified by " param:xlist " and " param:ylist ". The formula for the calculation is " ImgGif:StatSlope
Examples
EXWD	StatSlope((3 6 9 12 15 18) (1 2 3 4 5 6))	Num:0.333333
Mod	StatStandardize	Returns a Normalized Value	Statistical
Usage	value	"x mean stddev"
Params	value	"The standardized value."
Params	x	"The value at which to calculate."
Params	mean	"The mean of the distribution."
Params	stddev	"The standard deviation of the distribution."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the argument " param:list "."
Desc
IPar	"This module returns a normalized value from a distribution given by its mean and standard deviation. The equation for calculating the standardization is " ImgGif:StatStandardize
Examples
EXWD	StatStandardize(36 34 2.3)	Num:0.869565
Mod	StatStdDev	Calculates the Standard Deviation of a Sample	Statistical
Usage	value	"" param:list ""
Params	list	"The argument list of numbers to be evaluated. If no list is given then both " tag:Enum " and " tag:Values " tags must be specified."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the argument " param:list "."
TagRes	Distribution	"If this argument is specified then the elements in the list describe not the sample points but the \
resulting distribution curve. This curve is converted to its corresponding sample points. Note that negative values are not \
allowed. Non-integer values are rounded to the nearest integer value."
Desc
IPar	"The " IntMod:StatStdDev " module returns an estimate for the standard deviation based on a the sample list as show by the equation " ImgGif:StatStdDev
Examples
EXWD	StatStdDev((10 11 12 11 14 9 10))	Num:1.63299
EXWD	StatStdDev((9.8 9.9 10 9.8 10 9.9))	Num:0.0894427
Mod	StatStdDevP	Standard Deviation of a Population	Statistical
Usage	value	"" param:list ""
Params	value	"The standard deviation."
Params	list	"The argument " param:list " of numbers to be evaluated. If no " param:list " is given then both " tag:Enum " and " tag:Values " tags must be specified."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the argument " param:list "."
TagRes	Distribution	"If this argument is specified then the elements in the list describe not the sample points but the \
resulting distribution curve. This curve is converted to its corresponding sample points. Note that negative values are not \
allowed. Non-integer values are rounded to the nearest integer value."
Desc
IPar	IntMod:StatStdDevP " calculates the standard deviation where list is the entire population. The formula is " ImgGif:StatStdDevP
Examples
EXWD	StatStdDevP((10 11 12 11 14 9 10))	Num:1.51186
EXWD	StatStdDevP((9.8 9.9 10 9.8 10 9.9))	Num:0.0816497
Mod	StatStdErrYX	Standard Error of Regression	Statistical
Usage	value	ylist "xlist"
Params	value	"The standard error of regression for the list of x & y values."
Params	ylist	"The y or second argument list of numbers to be evaluated. If two lists are not specified then the three tagged values below must be given."
Params	xlist	"The x or first argument list of numbers to be evaluated."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	X	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the " tag:X " or first argument " param:list "."
Tag	Y	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the " tag:Y " or second argument " param:list "."
Desc
IPar	"This module calculates the standard error of the regression. The equation is:" ImgGif:StatStdErrYX
Examples
EXWD	StatStdErrYX((2 4 6 8 10) (1 2 3 4 5))	Num:0
EXWD	StatStdErrYX((2 4 5 9 10) (1 2 3 4 5))	Num:0.795822
Mod	StatSumSq	Calculates the Sum of Squares of a List	Statistical
Usage	value	"" param:list ""
Params	value	"The sum of the squares of the points in " param:list "."
Params	list	"The argument " param:list " of numbers to be evaluated. If no " param:list " is given then both " tag:Enum " and " tag:Values " tags must be specified."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the argument " param:list "."
Desc
IPar	"The module returns the sum of the squares of all the points in list as shown by the equation " ImgGif:StatSumSq
Examples
EXWD	StatSumSq((3 4))	Num:25
Mod	StatSumX2mY2	Sum of X2 minus Y2	Statistical
Usage	value	"xlist ylist"
Params	value	"The sum of the differences of the squares."
Params	xlist	"The x or first argument list of numbers to be evaluated."
Params	ylist	"The y or second argument list of numbers to be evaluated. If two lists are not specified then the three tagged values below must be given."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	X	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the " tag:X " or first argument " param:list "."
Tag	Y	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the " tag:Y " or second argument " param:list"."
Desc	
IPar	"StatX2mY2 returns the sum of the differences of the squares as shown by the equation " ImgGif:StatSumX2mY2
Examples
EXWD	StatSumX2mY2((1 2 3 4 5) (1 2 3 4 5))	Num:0
EXWD	StatSumX2mY2( (1 2 3 4 5) (10 9 8 7 6))	Num:-275
Mod	StatSumX2pY2	Sum of X2 plus Y2	Statistical
Usage	value	"" param:xlist " " param:ylist ""
Params	value	"The sum of the sum of the squares."
Params	xlist	"The x or first argument " param:list " of numbers to be evaluated."
Params	ylist	"The y or second argument " param:list " of numbers to be evaluated. If two lists are not specified then the three tagged values below must be given."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	X	isct	"An intersection to be evaluated for each "param:lpt ". The result of the evaluations form the " tag:X " or first argument " param:list "."
Tag	Y	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the " tag:Y " or second argument " param:list "."
Desc
IPar	"This module returns the sum of the sum of the squares of the points in the two lists as shown by the equation " ImgGif:StatSumX2pY2
Examples
EXWD	StatSumX2pY2((1 2 3 4 5) (1 2 3 4 5))	Num:110
EXWD	StatSumX2pY2((1 2 3 4 5) (10 9 8 7 6))	Num:385
Mod	StatSumXmY2	Sum of X Minus Y2	Statistical
Usage	value	"" param:xlist " " param:ylist ""
Params	value	"The sum of the differences of the squares."
Params	xlist	"The x or first argument list of numbers to be evaluated."
Params	ylist	"The y or second argument list of numbers to be evaluated. If two lists are not specified then the three tagged values below must be given."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	X	isct	"An intersection to be evaluated for each "param:lpt ". The result of the evaluations form the " tag:X " or first argument " param:list "."
Tag	Y	isct	"An intersection to be evaluated for each "param:lpt ". The result of the evaluations form the " tag:Y " or second argument " param:list "."
Desc
Ipar	"The " IntMod:StatSumXmY2 " module returns the sum of the differences between x and y squared. The equation is " ImgGif:StatSumXmY2
Examples
EXWD	StatSumXmY2((1 4 9 16) (1 2 3 4))	Num:184
Mod	StatTrimMean	Mean of Interior of List	Statistical	
Usage	value	"percent list"
Params	value	"The resulting mean."
Params	percent	"The percentage to take from both sides of the list. Half are taken from the beginning of the list and half from the end."
Params	list	"The argument list of numbers to be evaluated. If no list is given then both " tag:Enum " and " tag:Values " tags must be specified."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the argument " param:list "."
Desc
IPar	"This module calculates the mean of a list of numbers. The original list is sorted in ascending order and half of the number to exclude are taken from the front and half from the end."
Examples
Mod	StatTTest	"Probability Associated with a Student T Test	Statistical
Usage	value	"list1 list2 tails type"
Params	list1	"The first data set."
Params	list2	"The second data set."
Params	tails	"1 for one-tailed distribution, 2 for two-tailed."
Params	type	"1 for paired, 2 for equal variance (homoscedastic), 3 for unequal variance (heteroscedastic)"
Desc
IPar	"This module returns the probability associated with a Student's t-test. For equal variance, the equations are " ImgGif:StatTTest1 " and " ImgGif:StaTTest2 " For unequal variance the following equation is used- " ImgGif:StaTTEst3 " And for paired- " ImgGif:StaTTest4 " and " ImgGif:StaTTest5
Examples
Mod	StatVar	Returns the Variance of a List	Statistical
Usage	value	"list"
Params	value	"The variance of the list."
Params	list	"The argument list of numbers to be evaluated. If no list is given then both " tag:Enum " and " tag:Values " tags must be specified."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the argument " param:list "."
TagRes	Distribution	"If this argument is specified then the elements in the list describe not the sample points but the \
resulting distribution curve. This curve is converted to its corresponding sample points. Note that negative values are not \
allowed. Non-integer values are rounded to the nearest integer value."
Desc
Ipar	IntMod:StatVar " returns an estimate of the variance of a population given a sample in " param:list ". Note that if the data in list represents the entire population, " IntMod:StatVarP " should be used. The formula for calculating " IntMod:StatVar " is " ImgGif:StatVar
Examples
EXWD	StatVar((2 3 4 5 6 7))	Num:3.5
EXWD	StatVar((100 101 102.4 99))	Num:2.10667
Mod	StatVarP	Returns the Variance of a Population	Statistical
Usage	value	"list"
Params	list	"The argument " param:list " of numbers to be evaluated. If no " param:list " is given then both " tag:Enum " and " param:Values " tags must be specified."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the argument " param:list "."
TagRes	Distribution	"If this argument is specified then the elements in the list describe not the sample points but the \
resulting distribution curve. This curve is converted to its corresponding sample points. Note that negative values are not \
allowed. Non-integer values are rounded to the nearest integer value."
Desc
IPar	"" IntMod:StatVarP " returns an estimate of the variance of a population assuming that " param:list " is the entire population. If " param:list " is only a sample then " IntMod:StatVar " should be used. The equation is " ImgGif:StatVarP
Examples
EXWD	StatVarP((2 3 4 5 6 7))	Num:2.91667
EXWD	StatVarP((100 101 102.4 99))	Num:1.58
Mod	StatZTest	Two Tailed P Value of a Z Test	Statistical
Usage	value	"x sigma list"
Params	x	"The value to test."
Params	sigma	"The population standard deviation"
Params	list	"The argument " param:list " of numbers to be evaluated. If no " param:list " is given then both " tag:Enum " and " param:Values " tags must be specified."
Tag	Enum	lpt	"A list of points to be enumerated."
Tag	Values	isct	"An intersection to be evaluated for each " param:lpt ". The result of the evaluations form the argument " param:list "."
Desc
IPar	"This module returns the two-tailed P-value of a z-test. The formula is:" ImgGif:StatZTest
Examples
EXWD	StatZTest(5.3 2.0 ( 3 6 10 9 9 12))	Num:0.000223186
Mod	Str	Perform Various String Functions	String
Index	nStr	Module	Str("v4refmod_d.htm#IntMod:Str")
Usage	result	"string tagarg"
Usage	result	"point point ... tagarg"
UsageX	value	nStr	"arguments same as Str"
Params	result	"The result of the module - varies depending on the arguments."
Params	string	"A string or dictionary entry point."
Params	point	"Any V4 point"
Params	tagarg	"One or more tagged arguments as described below."
Tag	After	str	"Returns the portion of the string found after the first (or last) occurrence of " Param:str ". An error is generated if " Param:str " is not found within the string. You may use the three-colon tag option \
to override the error and return the entire source string if " Param:str " is not found. See also the " TagName:Anchor " option."
Tag	All	class	"Returns TRUE if all characters in the string are elements of " Param:class ", where " Param:class " is one of: \
<b>Alpha</b> (alphabetic characters), <b>Digit</b> (one of the digits 0 through 9), <b>Hex</b> (a hexadecimal character), <b>Id</b> (a valid identifier character), <b>Lowercase</b> (\
a lower case character), <b>Octal</b> (an octal digit 0 through 7), <b>Print</b> (a printable character), <b>Punctuation</b> (a puncuation character), <b>Uppercase</b> (\
an uppercase character), <b>Whitespace</b> (a white space character, e.g. space, tab)."
Tag	All	list	"Returns TRUE if all elements of the " Param:list " are found within the string. This may be used with the " TagName:IC " or " TagName:UC " options. If any element is not found then FALSE is returned."
Tag	All	pattern	"Searches the " Param:string " for all occurences of the regular expression " Param:pattern ". The \
returned result is a list of " PntType:Int2 " points denoting the starting and ending positions of each found occurence. \
Any " IntMod:Str " arguments after this tag are processed as " IntMod:List " arguments. Note that regular expression may \
contain multiple patterns, each of which <b>must be enclosed within parentheses</b>."
Tag	Anchor	pos	"Determines the <i>anchor point</i> for the " TagName:Before ", " TagName:After ", and " TagName:Has " search \
options. The default is " TagName:Anchor ":<b>LHS</b> which sets the search anchor on the left side (beginning) of the string. \
The other option is " TagName:Anchor ":<b>RHS</b> which sets the search anchor on the right side (end) of the string. \
The default is to search for the <i>first</i> occurance of a substring. When the anchor is set to the right hand side the search \
is for the <i>last</i> occurance of the substring."
Tag	Any	class	"Returns TRUE if any of the characters in the string are elements of " Param:class ". See the " TagName:All " option for more details."
Tag	Before	str	"Returns the portion of the string found before the first (or last) occurrence of " Param:str ". An error is generated if " Param:str " is not found within the string. You may use the three-colon tag option \
to override the error and return the entire source string if " Param:str " is not found. See also the " TagName:Anchor " option."
Tag	Begin	num	"References the beginning character of a substring. Positive numbers reference from the left (1 is first). Negative numbers reference from the right (-1 is last character). Used with End or Length."
Tag	Break	int2	"Breaks the first argument string into 3 pieces based on the two values within " Param:int2 ". \
The first piece is all characters up to the first value in " Param:int ", the second is the characters denoted by the two values, and \
the third is all characters after the second value."
Tag	Break	list	"Breaks the first argument string into a list of substrings based on the " PntType:Integer " or " PntType:Int2 " elements \
of the list. If the list consists of " Param:n " integers then the string will be broken into " Param:n "+1 substrings using \
then integers as byte offsets. The first character of the string is byte 1. If the list consists of " Param:n " int2 points then a \
list of 2* " Param:n "+1 substrings."
Tag	Break	chars	"Breaks the first argument string into a list of two substrings broken on one of the " Param:chars ". \
If the next argument is " TagResName:Trim " then the breaking character is not included, otherwise it is included in \
the second string. If " Param:chars " is the empty string then V4 breaks on space/tab/period/comma. If no breaking character \
is found within the first argument then the result is a list consisting of the first argument string and an empty string."
Tag	Count	class	"Returns the number of characters in the string which are elements of " Param:class ". See the " TagName:All " option for more details."
Tag	Decode	Base64	"Decodes the string previously encoded in the <a href='http://en.wikipedia.ord/wiki/Base64' target=_blank>base 64</a> format."
Tag	Decode	DES	"Decodes the string using the <a href='http://en.wikipedia.org/wiki/Data_Encryption_Standard' target=_blank>Data Encryption Standard</a>. A " TagName:Key " must be specified before this option is used. \
See also " TagName:Key " and " TagName:Encode "."
Tag	Decode	Hex	"Decodes sequences of 4 byte hexadecimal numbers to the corresponding UNICODE characters."
Tag	Decode	Hex8	"Decodes sequences of 2 byte hexadecimal numbers to the corresponding UNICODE characters."
Tag	Decode	XML	"Decodes an valid XML string converting XML entities to characters."
Tag	Decode	XOR	"Decodes each 16 byte character by XOR'ing it with a previously specified key. A " TagName:Key " must be specified before this option is used. See also " TagName:Key " and " TagName:Decode "."
Tag	Decode	XOR8	"Decodes each 8 byte character by XOR'ing with a key. A " TagName:Key " must be specified before this option is used. See also " TagName:Key " and " TagName:Decode "."
Tag	Empty	log	"Tests for an empty string and returns TRUE or FALSE. If the string is empty and " Param:log " is TRUE then TRUE is returned. \
If the string is not empty and " Param:log " is FALSE then TRUE is also returned. Otherwise FALSE is returned. A string is considered <i>empty</i> \
if it is zero-length, or contains nothing but white space and control characters."
TagRes	Empty	"Returns TRUE if the string is empty or contains only white-space characters, FALSE otherwise."
Tag	Encode	Base64	"Encodes the string in <a href='http://en.wikipedia.ord/wiki/Base64' target=_blank>base 64</a> format."
Tag	Encode	DES	"Encodes the string using the <a href='http://en.wikipedia.org/wiki/Data_Encryption_Standard' target=_blank>Data Encryption Standard</a>. A " TagName:Key " must be specified before this option is used. \
Note that the resulting string may be longer than the source string. See also " TagName:Key " and " TagName:Decode "."
Tag	Encode	Hex	"Encodes each 16 byte character as a sequece of 4 hexadecimal numbers."
Tag	Encode	Hex8	"Encodes each 8 byte character as sequence of 2 hexadecimal numbers."
Tag	Encode	XML	"Encodes the string such that it is a valid XML string. Special characters (ampersand, less-than) are converted to XML entities."
Tag	Encode	XOR	"Encodes each 16 byte character by XOR it with a previously specified key. A " TagName:Key " must be specified before this option is used. See also " TagName:Key " and " TagName:Decode "."
Tag	Encode	XOR8	"Encodes each 8 byte character by XOR'ing with a key. A " TagName:Key " must be specified before this option is used. See also " TagName:Key " and " TagName:Decode "."
Tag	End	num	"References the ending character of a substring. Positive numbers reference from the left (1 is first). Negative numbers reference from the right (-1 is last character). Used with Begin."
Tag	Escape	char	"Sets the string literal escape characters to " Param:char "."
Tag	Escape	UV4:none	"No escape character is defined (see " TagName:Literal " tag below)."
Tag	Escape	HTML	"Converts any embedded ending characters to the <a href='http://www.w3.org/TR/REC-html40/charset.html#entities' target=_blank>HTML entity</a> format."
Tag	Evaluate	pattern	"This option scans through the first argument string looking for each instance of " Param:pattern ". When found \
V4 then scans for the mirror image of " Param:pattern ". The text between the first pattern and the mirror image is then evaluated as \
a V4 point. The resulting point is converted to a string and inserted within the source string. If the text between the pattern \
and its mirror represent a non-intersection point then an intersection is created containing just that point. The mirror image \
of " Param:pattern " is determined by reversing the order of the characters in " Param:pattern " and converting left parentheses, brackets \
braces, etc. to the right-handed equivalent."
Tag	Exact	xstr	"Returns Int:1 if " Param:xstr " exactly matches " Param:string ". The " TagResName:UC " tag can be used \
for case-insensitive matches. Logical:False is returned if the two strings do not match."
Tag	Exact	list	"This option attempts to match " Param:string " with one of the elements of " Param:list ". The module \
returns an index to the first point in " Param:list " that exactly matches the string or Logical:False if no match is detected. \
The " TagResName:UC " tag can be used for case-insensitive matches." 
Tag	Group	num	"Return the value of the " Param:num "<sup>th</sup> regular expression group matched."
Tag	Has	str	"Search the first argument string for an occurrence of " param:str ". If it is found then the starting character in the first argument is returned. \
If the " param:str " is not found then Logical:No is returned. See also the " TagName:Anchor " option."
Tag	Has	list	"Search the first argument string for an occurrence of any of the elements within " Param:list ". \
The module returns the first element index within " Param:list " that was matched within the string. If no element matches then Logical:False is returned."
Tag	Hash	mode	"Hashes the string based on the hash " Param:mode ". The supported " Param:modes " are: <b>32</b> to return a 32 bit (Dim:Int) hash value, \
<b>64</b> to return a 64 bit (Dim:Int2) hash value, <b>CRC</b> to return a 32 bit <a href='http://en.wikipedia.org/wiki/Cyclic_redundancy_check' target=_blank>cyclic redundancy check code</a>, \
<b>MD5</b> to return the <a href='http://userpages.umbc.edu/~mabzug1/cs/md5/md5.html' target=_blank>MD5 checksum</a>. The result is \
returned as a 32-byte string. <b>Note</b>: there is the potential for ambiguity when calculating this value on V4 strings. If the string contains <b>NO</b> \
UNICODE characters (values greater than 255), then a calculation is performed on 8-bit characters even if the string is UNICODE. If any character values \
greater than 255 are in the string then the calculation is performed on 16-bit characters. <b>SHA256</b> to return the <a href='http://en.wikipedia.org/wiki/SHA-2' target=_blank>SHA-256</a> hash of the first \
argument as a 64-byte hex string. <b>SHA1</b> to return then <a href='https://en.wikipedia.org/wiki/SHA-1' target=_blank'>SHA-1</a> hash of the first argument. The MD5, SHA256 and SHA1 hashes may be \
prefaced with a " TagName:Key ":" Param:key " argument to perform <a href='https://en.wikipedia.org/wiki/Hash-based_message_authentication_code' target=_blank>HMAC-SHA256 / HMAC-SHA1</a> hashing."
Tag	Head	num	"Returns the first " Param:num " characters of the string. If " Param:num " is negative then it refers to the end \
of the string (i.e. -1 is the entire string, -2 is the entire string minus the last character, -3 is minus the last 2 characters, etc.). If " Param:num " is \
0 (zero) then an empty string is returned."
Tag	Head	str	"Returns Int:1 if the first argument string begins with " Param:str " or Logical:No if it does not begin with " Param:str "."
Tag	Head	list	"Compares the beginning of the first argument string with each member of " Param:list ". If a member of the " Param:list " \
begins the string then the index of that member is returned, otherwise Logical:No is returned."
Tag	HTML	ASCII	"Converts the string to a 7-bit HTML printable string. Any special or UNICODE characters are converted to the HTML ';#<i>nnnn</i>;' format."
TagRes	HTML	"Converts the string such that it will output properly as HTML. It converts all '&amp;' characters to '&amp;amp;' and '&lt;' characters to '&amp;lt;'."
TagRes	IC	"Ignore case on all subsequent string comparisons within the current " IntMod:Str " module."
Tag	Key	value	"Specifies the key to be used for " TagName:Encode " and " TagName:Decode " See also " TagName:Encode " and " TagName:Decode ". This may also be used for several of the hashing functions."
Tag	Length	num	"References the length of a substring. Used with " tag:Begin ". See the " TagName:Maximum " option within the " IntMod:Format " module to truncate a string to a maximum length."
Index	CSV	Module	Str("v4refmod_s.htm#IntMod:Str")	Str	ListOf
Index	Tab	Module	Str("v4refmod_s.htm#IntMod:Str")	Str	ListOf
Index	Integer	Module	Str("v4refmod_s.htm#IntMod:Str")	Str	ListOf
Index	Characters	Module	Str("v4refmod_s.htm#IntMod:Str")
Tag	ListOf	keyword	"Creates a list of strings based on the " Param:keyword " value. If " param:Keyword " is <b>TAB</b> then the source string is considered tab-delimited text. If the " Param:keyword " \
is <b>CSV</b> then the source string is parsed as comma-separated-values. If the " Param:keyword " is <b>INTEGER</b> then a list of integers is returned corresponding to the ASCII/UNICODE value of the characters \
in the string is returned. If " Param:keyword " is <b>CHARACTERS</b> then the argument string is broken into a list of characters (same as " TagResName:ListOf ")."
Tag	ListOf	chars	"Converts the first argument into a list of substrings broken on any of the " Param:chars ". If the next argument is " TagResName:Trim " then the break characters are NOT included. \
Any " IntMod:Str " arguments after this tag are processed as " IntMod:List " arguments."
TagRes	ListOf	"Converts the first argument string into a list of characters. See also " IntMod:Num "(" TagResName:Listof ")."
Tag	Literal	char	"Converts the string to a literal enclosed by the character " Param:char ". Any occurrences of " Param:char " \
within the string are prefaced with the escape character (usually the backslash) or if no escape character is defined then \
the " Param:char " is doubled. If the escape character is the backslash then all non-printable characters are converted to \
their octal equivalents. Any occurrences of the escape character are also doubled within the string. If " Param:char " is a \
<i>left</i> character (left-paren, left-bracket, left-brace, etc.) then the ending character is automatically converted to \
the <i>right</i> version of the character."
Tag	Literal	HTML	"Converts the string to a valid javascript single-quoted string."
Tag	New	patstr	"Replace the source string with " Param:patstr ". If a regular expression pattern has been matched on the source string then \
the " Param:patstr " may include escape sequences referencing matched groups within the source string. The escape sequences are of the form '~1' '~2' ... '~9' \
which correspond to matched groups 1 through 9. The tilde escape character may be changed with the " TagName:Escape " argument."
Tag	None	class	"Returns TRUE if none of the characters in the string are elements of " Param:class ". See the " TagName:All " option for more details."
Tag	Num	num	"Determines the number of " Tag:Replace "/" Tag:With " occurences, the default is 1. \
Use " TagResName:Num " to replace all occurences. Note that this tag must precede the " Tag:With " tag."
Tag	Partial	pstr	"Returns the number of initial characters " Param:string " shares with " Param:pstr ". If either string \
is 0-length or none of the initial characters match then Int:0 is returned. If only the first characters match then Int:1 \
is returned. If the first two characters match then Int:2, etc."
Tag	Random	length	"Returns a string of " Param:length " characters randomly chosen from the source string. This option may be used to generate a random \
sequence of characters from an arbitrary set of characters."
Tag	RegExp	pattern	"Search for the regular expression " Param:pattern " within the first argument."
Tag	RegExp	list	"The same as the " TagName:Replace ":" Param:list " option except the pattern strings are treated as regular expressions, not literal strings."
Tag	Replace	str	"Search for the pattern " Param:str " within the first argument. See the " Tag:With " argument."
Tag	Replace	num	"If a regular expression pattern has been matched then replace the " Param:num "<sup>th</sup> group with the string specified by the " Tag:With " tag."
Tag	Replace	list	"A " Param:list " may be given to perform multiple replacements within a single module call. The " Param:list " \
is actually a list of lists. Each main list entry is a two part list. The first element being the string to match and the second \
being the replacement string. This form does not use the " Tag:With " or " TagResName:Num " tags."
Tag	Soundex	type	"Returns the <a href='http://en.wikipedia.org/wiki/Soundex' target=_blank>SOUNDEX</a> code for the current string. If " Param:option " is ALPHA then a 4 character soundex value is returned. If " Param:option " is \
NUMERIC then a 4-5 digit number is returns (where the first 1-2 digits are the numeric value (1-26) of the ALPHA value's first character. If " Param:option " is \
MYSQL then a 4-? character string is returned corresponding to the mySQL SOUNDEX() function."
TagRes	Soundex	"Returns a 4-5 digit integer number representing the Soundex code for the current string (or -1 if errors). The \
resulting number will always be less than 2<sup>16</sup>"
Tag	Split	substr	"This option splits a string into a list based on the " Param:substr " pattern. V4 searches the source string for all occurances of " Param:substr " \
and creates a list of the split string segments between the " Param:substr " matches. Unlike the " TagName:ListOf " options, the " Param:substr " is not included in the resulting list."
Tag	Sub	key	"Performs a simple substitution cipher on the string based on the contents of " param:key ". The " param:key " can be up to 36 characters in length. The first 26 characters \
are the characters to be substituted for the letters 'A' through 'Z' - i.e. the first character in " param:key " replaces any instances of 'A' in the string, the second character any instances of 'B', etc. \
The 27<sup>th</sup> through 36<sup>th</sup> characters are used to replace the digits '0' through '9'. If " param:key " is less than 36 characters then only those characters in the string with a corresponding \
subsitution character will be replaced. Case is preserved in this operation."
Tag	Start	num	"Identical to " TagName:Begin ":" Param:num "."
Tag	Tail	num	"Returns the last " Param:num " characters of the string. If " Param:num " is negative then it references the beginning of \
the string (i.e. -1 is the entire string, -2 is the entire string minus the first character, -3 is the string minus the first 2 characters, etc.). If " Param:num " is \
0 (zero) then an empty string is returned."
Tag	Tail	str	"Returns Logical:True if the first argument string ends with " param:str ", Logical:False otherwise."
Tag	Tail	list	"Compares the end of the first argument string with each member of " Param:list ". If a member of the " Param:list " \
ends the string then the index of that member is returned, otherwise Logical:No is returned."
Tag	Trim	how	"Trims off leading and/or trailing white-space characters from the string. The argument, " Param:how ", must be one of the \
following: <b>All</b> to trim leading and trailing characters (see also " TagResName:Trim "), <b>Left</b> to trim just the leading characters \
and <b>Right</b> to trim just trailing characters."
Tag	URL	option	"If " Param:option " is ENCODE or UTF8 then encode the string according to URL specifications. \
If the " Param:option " is DECODE then decode the URL string. UNICODE may also be specified in which case a character greater than FF<sub>16</sub> are encoded \
as '%u<i>xxxx</i> where <i>xxxx</i> is the four-digit hexadecimal representation of the character."
Tag	With	newstr	"Replace the matched " Param:str " via the " Tag:Replace " tag with " Param:newstr "."
Tag	With	num	"If a regular expression pattern has been matched then replace the " Tag:Replace " string with the " Param:num "<sup>th</sup> group of the pattern."
Tag	XML	xmlstring	"Evaluates the remaining arguments normally and then encloses the results within the XML tag specified by " Param:xmlstring ". Multiple " TagName:XML " tags \
may be specified within a single " IntMod:Str " module. If the argument is UV4:none then it is ignored."
Tag	XML	list	"See the " IntMod:Do " module for a complete description of this feature."
TagRes	Group	"Return all regular expression groups matched as a list of strings. \
Any " IntMod:Str " arguments after this tag are processed as " IntMod:List " arguments."
TagRes	Capitalize	"Capitalizes the first letter of each word in the string, all other letters are set to lower case (same as " TagResName:Title ")."
TagRes	LC	"Converts the string to lower case."
TagRes	Length	"Returns the current length of the string. See also " IntMod:Len "."
TagRes	Literal	"Same as " TagName:Literal ":\"\\\"\"."
TagRes	Num	"Replace all occurences of the " Tag:Replace " string (with no error if no occurences). Note that this tag must precede the " Tag:With " tag."
TagRes	Title	"Capitalizes the first letter of each word in the string, all other letters are set to lower case (same as " TagResName:Capitalize ")."
Tagres	Trim	"Trims all leading and trailing white characters from the string."
Tagres	UC	"Converts the string to upper case. This tag may also be used for force case-insensitive searches and comparisons."
Tag	Width	num	"Identical to " TagName:Length ":" Param:num "."
Tag	Word	str	"Tries to match " Param:str " in the first argument string as a word meaning that " Param:str " is delimited by punctuation or white space. The '*' character may be used for \
wild-card matching on either side of " Param:str ". For example, Word::\"go*\" would match on the words \"go\", \"going\", \"goes\", \"gone\", etc. Word::\"*ing\" would match on any word ending with \"ing\". \
Word::\"*<i>xxx</i>*\" is identical to Has::\"<i>xxx</i>\"."
Desc
IPar	"The " IntMod:Str " module performs various string functions. Many of the options can be chained as shown in \
the examples below. The " IntMod:Str " module can be used without any tagged arguments to convert and concatenate any \
number of V4 points into a single string point on the " PntType:Alpha " dimension."
IPar	"The resulting point will be a point on Dim:Alpha unless all component points of the string are of the same \
dimension and that dimension is an Alpha point type. When these two conditions are met the resulting point will be a point on that dimension."
IPar	"This module also operates with " PntType:BigText " points. If the resulting string exceeds the allowed length of \
a V4 " PntType:Alpha " point then V4 will return a point of type " PntType:BigText ". The dimension will be either \
the dimension of the last " PntType:BigText " argument, or if none of the arguments were of that type then the Dim:Alpha \
dimension will be used (yes, a Dim:Alpha point of type BigText - go figure)."
IPar	"The " IntMod:nStr " module is equivalent to {~" IntMod:Str "()}."
IPar	"<b>Note</b> that the UV4:none point is converted to an empty string (i.e. not formatted)."
Index	UV4:none	general	Str("v4refmod_s.htm#IntMod:Str")	Str	IntMod
Examples
EXWD	Str("now is the time" UC?)	NOW IS THE TIME
EXWD	Str("Now is the time" Head::NOW)	Logical:False
EXWD	Str("Now is the time" UC? Head::NOW)	Int:1
EXWD	Str("Now is the" UC? Head::(how about now))	Int:3
EXWD	Str("We the people" Begin::4 Length::3)	the
EXWD	Str("We the people" Begin::-6 End::-1)	people
EXWD	Str("We the people" Tail::6)	people
EXWD	Str("We the people" Tail::-4)	the people
EXWD	Str("We the people" Head::6)	We the
EXWD	Str("We the people" Head::-6)	We the p
EXWD	Str("We the people" ListOf::" " Trim?)	("We" "the" "people")
EXWD	Str("We the people" ListOf?)	("W" "e" " " "t" "h" "e" " " "p" "e" "o" "p" "l" "e")
EXWD	Str("We the people" ListOf::" " Trim? Head::2)	("We" "the")
EXWD	Str("In order to form" Has::the)	Logical:No
EXWD	Str("In order to form" Has::to)	Int:10
EXWD	Str("INORDERTOFORM" Has::to)	Logical:No
EXWD	nStr("INORDERTOFORM" Has::to)	Logical:Yes
EXWD	Str("INORDERTOFORM" UC? Has::to)	Int:8
EXWD	Str("Now is the time" Before::" ")	"Now"
EXWD	Str("Now is the time" Anchor::RHS Before::" ")	"Now is the"
EXWD	Str(x:"Now is the time" ListOf::" " Trim?)	(x:"Now" x:"is" x:"the" x:"time")
EXWD	Str(x:"Now is the " "time" ListOf::" " Trim?)	("Now" "is" "the" "time")
EXWD	Str("Now's the time" Literal::"'")	"'Now\\'s the time'"
EXWD	Str("Now's the time" Escape::HTML Literal::"'")	"'Now&#039;s the time'"
EXWD	Str("Now is {the} time" Escape::none Literal::"{")	"{Now is {the}} time}"
EXWD	Str("nowxisxthe" Replace::"x" With::" ")	"now isxthe"
EXWD	Str("nowxisxthe" Replace::"x" Num? With::" ")	"now is the"
EXWD	Str("now   is the        time" RegExp::"( +)" Replace::1 Num? With::"|")	"now|is|the|time"
EXWD	Str("file.ext" RegExp::"^(.*)$" New::"copy ~1 f:~1")	"copy file.ext f:file.ext"
EXWD	Str("now is the time" Replace::((a x) (e x) (i xx) (o x) (u x))	"nxw xxs thx txxmx"
EXWD	Str("now is the time" Break::(1 5 8 10))	("now " "is " "th" "e time")
EXWD	Str("now is the time" Break::Int2:<5 10>)	("now " "is the" " time")
EXWD	Str("now is the time" All::"([A-Za-z]+)")	(Int2:<1 3> Int2:<5 6> Int2:<8 10> Int2:<12 15>)
EXWD	Str("now is the time!" Break::Str("now is the time!" All::"([A-Za-z]+)"))	("" "now" " " "is" " " "the" " " "time" "!")
EXWD	Str(Soundex::"ST JOHN")	Alpha:"S532"
EXWD	Str("Saint John" Soundex?)	Int:19532 (integer equivalent of above)
EXWD	Str("Today is /{Format(UDate:{now} Mask::'mmmm d, yyyy')}/" Evaluate::"/{")	"Today is February 12, 2005"
EXWD	Str(XML::"a href='www.moo.com'" "Visit moo.com")	"&lt;a href='www.moo.com'>Visit moo.com&lt;/a>"
Mod	Sum	Sum a List of Numbers	Math List
Usage	resnum	"list"
Params	resnum	"The resulting numerical point.The resulting dimension is either Int or Num depending on the actual sum. If the sum has a fractional part then the result is a point on the Num dimension, otherwise the result is an Int point."
Params	list	"A list of numerical points."
Desc
IPar	"This module sums its list of numbers."
Examples
EXWD	Sum(List(Int:1..10))	Int:55
EXWD	Sum((1 2 3 4 5.0))	Int:15
EXWD	Sum((1 2 3 4 5.1))	Num:15.1
Mod	Table	Create, Modify, Examine V4 Tables	V4Int
Usage	respnt	"tag ..."
Params	respnt	"The result is based on the tagged arguments."
Params	tag	"One or more of the tagged arguments described below."
Tag	Acceptor	isct	"Associates an acceptor routine with a column."
TagRes	Acceptor	"Returns the acceptor associated with the column, or fails if none defined."
Tag	AggKey	logical	"Sets the aggregate-key attribute for the column."
TagRes	AggKey	"Returns TRUE if the aggregate-key attribute is set for the column, fails otherwise."
Tag	Column	integer	"To skip over " Param:integer " columns with the IGNORE option."
Tag	Column	name	"To reference the column with " Param:name " within the current table."
Tag	Comment	char	"Defines one or more comment characters. An input line beginning with any of the characters in this string will be ignored."
TagRes	Comment	"Returns any comment characters associated with the table, fails if none are defined."
Tag	Create	table	"To create a new table with " Param:table " as the name."
Tag	Decimal	num	"Defines the implied number of decimal points for the column."
TagRes	Decimal	"Returns the implied number of decimal points, fails if none given."
Tag	Default	point	"Defines the default value point for the column."
TagRes	Default	"Returns the default value for the column, fails if none given."
Index	CSV	Module	Str("v4refmod_t.htm#IntMod:Table")	Table	Delimiter
Index	Tab	Module	Str("v4refmod_t.htm#IntMod:Table")	Table	Delimiter
Tag	Delimiter	delim	"Defines the column delimiter as " Param:delim ". This may be any character value or one of the following: \
<b>CSV</b> for comma-separated values, <b>None</b> for no delimiter (i.e. fixed width), or <b>Tab</b> for tab delimited. The difference between \
specifiy "," and CSV is that CSV triggers strict <a href='http://en.wikipedia.org/wiki/Comma-separated_values' target=_blank>comma-separated-value parsing rules</a>. \
The same difference applies with '\t' and Tab."
TagRes	Delimiter	"Returns the delimiter (type) associated with the table, fails if none given."
Tag	Description	text	"Assigns a description string to the column."
TagRes	Description	"Returns the description assigned to the column, fails if none given."
Tag	Dim	dimension	"Defines the dimension associated with the new column."
TagRes	Dim	"Returns the dimension associated with a column."
Tag	Embed	none	"NYI"
Tag	End	column	"Defines the ending character position for a column."
Tag	Ending	column	"See " TagName:End "."
TagRes	End	"Returns the ending character position, fails if none given."
TagRes	Ending	"See " TagResName:End "."
Tag	Error	point	"Defines an error point value for the column. This value is used if an error occurs while parsing the \
column value."
TagRes	Error	"Returns the error point for a column, fails if none given."
Tag	Expression	point	"Defines a value for the column. This basically defines a <i>virtual column</i> that is not to be \
parsed from the input. Columns with this attribute are not included in table aggregates. These columns are to be evaluated at runtime. \
Compare this option with the " TagName:Point " tag."
TagRes	Expression	"Returns the value for the column or fails if none defined."
Tag	Filter	isct	"Defines a filter intersection to be called for each input line. See the " Command:Include " command for more information."
TagRes	Filter	"Returns the filter point associated with the table, fails if none specified."
Tag	FixedLength	num	"Defines a fixed length for a column."
TagRes	FixedLength	"Returns the fixed-length attribute of a column, fails if none defined."
Tag	Format	option	"Sets the formatting " Param:option " for the column, one of: \
<b>Default</b>, <b>Internal</b>, <b>YYMMDD</b>, <b>MMDDYY</b>, <b>DDMMMYY</b>, <b>Hex4</b>, <b>Hexadecimal</b>, <b>Money</b>, <b>YYMM</b>, <b>MMYY</b>, <b>MMM</b>,"
TagRes	Format	"Returns the format setting for the column, fails if none set."
Tag	Header	num	"Defines the number of header lines in the input (to be skipped)."
TagRes	Header	"Returns the number of header lines, fails if none defined."
Tag	Ignore	logical	"If TRUE then set this column to be ignored."
TagRes	Ignore	"Returns TRUE if the column is set to be ignored, fails otherwise."
Tag	Include	xxx	"NYI"
Tag	Index	maskbit	"NYI"
TagRes	Index	"NYI"
Tag	Link	method	"Declares a column to be a linking column. The allowed " Param:method " values are: \
<b>NoPrefix</b> and <b>Prefix</b>."
TagRes	Link	"Returns the link status of a column or fails if no link is defined."
Tag	ListOf	what	"Returns a list of attributes for a previously specified table: <b>All</b> for a list of all columns (including " TagName:Ignore " columns) in the table, \
<b>Dim</b> for a list of all associated dimensions, <b>Name</b> for a list of all column names, <b>Position</b> for a list of column starting positions, \
<b>Width</b> for a list of column widths. Note that <b>Start</b> and <b>Width</b> are not defined for character-delimited columns. \
Also note that columns with the " Tag:Ignore " attribute are not included in these lists."
TagRes	ListOf	"If this is the only argument then a list of all defined tables is returned. If a table has been defined (with the " TagName:Table " tag) then the list of \
columns for that table is returned. The column names are, by default, returned as points on Dim:NId. This may be overridden with the " TagName:Dim " tagged argument."
Tag	Macro	name	"Associates the processing macro " Param:name " with the table."
TagRes	Macro	"Returns the processing macro associated with the table, fails if none assigned."
Tag	Mask	bitlist	"Sets the inclusion mask for this column. The " Param:bitlist " is a list of bits between 1 and 32."
TagRes	Mask	"Returns the inclusion mask for the column, fails if none specified."
Tag	Minimum	size	"Ignore any input lines fewer than " Param:size " characters."
TagRes	Minimum	"Returns the minimum character input line length, fails if none assigned."
Tag	Missing	point	"Defines a value " Param:point " to be used if the aggregate 'record' cannot be found."
TagRes	Missing	"Returns the " TagName:Missing " point or fails if none has been defined."
Tag	Name	colname	"Specifies the name when defining or specifying a column."
TagRes	Name	"Returns the name of the current column."
Tag	Other	string	"Assigns the " Param:string " as a user-defined value to the table. Use the point UV4:none to clear this value."
TagRes	Other	"Returns the user-defined value of the table, fails if no value is assigned."
Tag	Point	point	"Assigns a point value to the column. The column value is not taken from the input but from the evaluation of " Param:point ". \
Columns assigned a " Tagname:Point " value are included in any output aggregates. See also the " Tagname:Expression " tag."
TagRes	Point	"Returns the assigned point value, fails if none."
Tag	Quoted	logical	"Sets the 'quoted' option for the column."
TagRes	Quoted	"Returns TRUE if the quoted option is set for the column, fails otherwise."
Tag	Scale	num	"Sets the scaling factor for the column."
TagRes	Scale	"Returns the scaling factor for the column, returns 0.0 if none."
Tag	Start	position	"Sets the starting character for the column."
TagRes	Start	"Returns the starting character position for the column, fails if none assigned."
Tag	Table	tablename	"Specifies a table."
Tag	Trim	logical	"Set the field trim attribute for the column."
TagRes	Trim	"Returns the field trim attribute for the column- TRUE is set, fails otherwise."
TagRes	Type	"Returns the basic column type as a point on Dim:UV4. The returned value will be one of: UV4:Ignore if the column is set to ignore."
Tag	Width	colwidth	"Defines the column width for the column."
TagRes	Width	"Returns the column width, fails if none given."
Desc
IPar	"This module is used to create, modify and examine V4 tables. See also the " Command:Table " and " Command:Include " commands for more information."
Examples
EXML	"Creating a New Table with Table() Module"
ML	[makeNewTable]
ML	&nbsp;Do(Table(Create::newTable Macro::newTableMacro Header::1 Comment::"!" Filter::@[hohoho] Minimum::5 Delimiter::CSV)
ML	&nbsp;&nbsp;&nbsp;&nbsp;Table(newTable Create::col1 Dim:Int Description::"This is column one")
ML	&nbsp;&nbsp;&nbsp;&nbsp;Table(newTable Create::col2 Dim:Num Mask::1 Default::Num:3.2 Decimal::2)
ML	&nbsp;&nbsp;&nbsp;&nbsp;Table(newTable Create::col3 Dim:UDate Format::yymmdd Error::@[mooo])
ML	&nbsp;&nbsp;&nbsp;&nbsp;Table(newTable Create::col4 Dim:Alpha Quoted::TRUE FixedLength::30 Trim::TRUE)
ML	&nbsp;&nbsp;&nbsp;&nbsp;Table(newTable Create::col5 Dim:Cus Missing::Cus:0)
ML	&nbsp;&nbsp;)
EXML	"Outputting Table Definition using Table() Module"
ML	[dumpOutTable tblName..]
ML	&nbsp;Do(
ML	&nbsp;&nbsp;    Echo("Table " tblName* 
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str(" Comment " Str(Table(tblName* Comment?) Literal?)),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str(" Delimiter " Str(Table(tblName* Delimiter?) Literal?)),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str(" Filter " Table(tblName* Filter?)),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str(" Header " Table(tblName* Header?)),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str(" Macro " Table(tblName* Macro?)),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str(" Minimum " Table(tblName* Minimum?)),""
ML	&nbsp;)
ML	&nbsp;&nbsp;&nbsp;&nbsp;Enum(Table(tblName* ListOf?)
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Do(Echo(" Col " NId* " " Table(tblName* Column::NId* Dim?)
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str(" Acceptor " Table(tblName* Column::NId* Acceptor?)),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If(Table(tblName* Column::NId* AggKey?) Then::" AggKey"),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str(" Decimal " Table(tblName* Column::NId* Decimal?)),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str(" FixedLength " Table(tblName* Column::NId* FixedLength?)),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str(" Default " Format(Table(tblName* Column::NId* Default?) Point?)),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str(" Description " Str(Table(tblName* Column::NId* Description?) Literal?)),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str(" Start " Table(tblName* Column::NId* Start?)),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str(" End " Table(tblName* Column::NId* End?)),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str(" Error " Format(Table(tblName* Column::NId* Error?) Point?)),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str(" Format " Table(tblName* Column::NId* Format?)),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If(Table(tblName* Column::NId* Ignore?) Then::" Ignore"),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str(" Missing " Format(Table(tblName* Column::NId* Missing?) Point?)),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str(" Mask " List(Table(tblName* Column::NId* Mask?) Column::",")),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If(Table(tblName* Column::NId* Quoted?) Then::" Quoted"),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If(Table(tblName* Column::NId* Trim?) Then::" Trim"),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Str(" Width " Table(tblName* Column::NId* Width?)),""
ML	&nbsp;&nbsp;&nbsp;&nbsp;)
ML	&nbsp;&nbsp;))
ML	&nbsp;&nbsp;&nbsp;&nbsp;Echo("EndTable")	
ML	&nbsp;)
Mod	Tally	Tally Up Points in a List	V4Int List
Usage	undef	"list opttag (tallyoption1) (tallyoptions2) ..."
Params	list	"A list of points to be tallied."
Params	opttag	"One or more tagged arguments as described below."
Params	tallyoption	"A list of tally options described below. More than one list may be given in a " IntMod:Tally "."
Tag	Area	filename	"Output the results of the tally to the intermediate filename. The results of several independently run Tally's can be merged into a consolidated result with the " IntMod:TallyM " module."
Tag	AWhile	isct	"Similar to " tag:While " except that the test is performed after the processing of the list point."
Tag	Context	point	"For each enumeration point, V4 evaluates and inserts the " Param:point " into the current context. \
If the point is UV4:none then nothing is done (i.e. UV4:none is not placed into the context). This point can be inserted into the context by quoting it: Context::@UV4:none. If " Param:point " is UV4:Skip the current point is ignored entirely."
Tag	ContextP	point	"This is identical to the " TagName:Context " tag except that if " Param:point " evaluates to a list then each point in the list is inserted into the context."
Tag	Count	dim	"Updates the context with a point on dimension dim representing the current count/index into the the source list of points (i.e. updated with 1 on the first point, 2 on the second, etc.)"
Tag	Dim	dim	"Sets the dimension for all resulting points. The default is Dim:Int.:"
Tag	Do	isct	"Evaluate the isct for each selected point in the " param:list "."
Tag	Hold	isct	"Similar to Context except that the point is held constant."
Tag	Id	name	"Associate the name with the tally. This is used to identify multiple tallies with the Set Trace Tally command."
Tag	If	isct	"Test each point in list against the evaluation of isct. If isct evaluates to true then use the point in the " IntMod:Tally ". \
If the point evaluates to false then exclude it. If the argument is UV4:none then it is ignored."
Tag	Index	dim	"The dimension is inserted into the context with each selected point with an integer value representing the ordinal \
number of the point (i.e. the first selected point is reflected as " Param:dim ":1, the second as 2, etc.)"
Tag	Index	point	"The " Param:point " is inserted into the context and incremented by one after each point. This allows one to specify a starting value for an index."
Tag	Sample	n	"Sample, on average, every n<sup>th</sup> point. This is useful for testing large " param:lists "."
Tag	Num	max	"Only look at the first " Param:max " number of points before quitting. This option limits the number of points for the specific tally. The " Command:"Set PointMax" " command affects all " IntMod:Tally " calls."
Tag	Parent	isct	"The " param:isct " evaluates to a parent point. This is used in conjunction with the PIf::test argument. \
For each point in the tally, the " param:isct " is evaluated and compared to the previous parent point. If the points are identical then the point is either \
used in the tally or immediately rejected based on the last " tag:PIf " test. If the point is different then it is entered into the current context and \
the " tag:PIf " point is tested. If the argument is UV4:none then it is ignored."
Tag	PIf	isct	"Evaluates the " param:isct " and if true continues with the point in the tally. If the result is false then the point is rejected. \
If the argument is UV4:none then it is ignored."
TagRes	Prefetch	"Enable prefetching of aggregate data. This option only applies in a multi-processor (or hyperthreaded) environment. Use of this \
option triggers a separate thread within V4 that reads and buffers aggregate data while the main V4 thread performs the actual " IntMod:Tally " operation. \
This can result in a significant wall-clock performance boost."
Tag	Sample	n	"Sample, on average, every n<sup>th</sup> point. This is useful for testing large lists."
Tag	Shell	dim	"Each point in the list is added to the current context under dimension " Param:dim ". Note \
that this dimension should be a shell dimension and should be specified as Dim:" Param:dim ". When this argument is given \
the enumerating point is NOT added to the context under its own dimension."
Tag	Skip	n	"Skips the first " param:n " points in the source " param:list ". This may be useful for debugging/testing large lists."
Tag	Sum	isct	"The " param:isct " is evaluated with each selected list point. The result of the first evaluation is entered into the current context. For each subsequent point evaluated, the new value is added to the current value in the context."
Tag	Sum	slist	"Same as " TagName:Sum ":" Param:isct " except that the summation is performed for each point in the " param:slist "."
Tag	Values	n	"Defines the maximum number of " IntMod:Tally " by combinations. In most cases the default number is sufficient. If a Tally results in too many combinations, an error will occur and this option will be required. If a Tally approaches the default limit, performance may suffer but, again, warning messages will be given by the V4 runtime system."
Tag	While	isct	"Similar to " tag:If " except that the processing of " param:list " stops with the first evaluation of " param:isct " which returns false."
Tag2	Array	name	"Create an array that may be referenced as [<i>name</i>] and populate it with the current entry values using dimensions as defined by the " TagName:By " points. See below for discussion and examples. \
Use of this option enables the " TagName:Listof ":<i>num</i> option within the " IntMod:Array " module."
Tag2	Average	point	"Calculate the average of all points tallied. If point is a list then separate averages are calculated for each. Note that the number of points must match those in the Bind (i.e. one binding per each average)."
Tag2	Bind	isct	"The intersection to use to bind the results of the " tag:Average ", " tag:Sum ", " tag:Sub ", " tag:StdDev ", or " tag:Count ". \
The points in this isct plus those from the " tag:By " are used to form the final binding to the values. \
See the " Tag:BindIf " option for control over insertion of specific bindings. \
Note: if the argument is not an intersection, but a single point then it is automatically converted into an intersection."
Tag2	BindIf	isct	"This option is given to test a binding value before actually creating it. At the end of the " IntMod:Tally " operation, V4 creates \
bindings based on the " TagName:Bind " and " TagName:By " tags. When " TagName:BindIf " is given, V4 inserts the bind value into the context and then \
evaluates " Param:isct ". If the result is TRUE then the binding is made, if FALSE then no binding is created and V4 skips to the next Bind/By combination."
Tag2	Bits	num	"The maximum number of bits to allocate for UCount/UList operations."
Tag2	By	point	"A point or list of points to " IntMod:Tally " by. This is optional and if not specified then all points in the Tally will be summed, averaged, etc. into a single bucket."
Tag2	ByIf	test	"After processing the main list of points, the " IntMod:Tally " module constructs any ByLists as specified by the " tag:ByList " option below. This argument can be used to control insertion of points into this list. Each point to be added is inserted into the context and test is evaluated. If the result is true then the point is appended to the " tag:ByList ". If the result is false or undefined then the point is not appended."
Tag2	ByList	isct	"An intersection to be used to save a list of all unique " tag:By " points found."
Tag2	Cache	num	"Specifies the number of entries in the cache buffer. If the number is an integer then that number becomes the size of the cache. If the number is a decimal between 0 and 1 then the cache size is that number times the number of points in the tally list."
Tag2	Count	point	"Keep a count of the number of points tallied. If point is 1 then the result is the number of points tallied. If it is 2 then it will be twice the number tallied."
Tag2	Dim	dim	"Sets the dimension for all resulting points of this group. The default is Dim:Int or the \
dimension specified globally (described above). If " Param:dim " is a " PntType:List " type with the " TagName:Entries " \
option <b>and</b> the " TagName:List " option is used then a bitmap is created on " Param:dim ". This can be an extremely efficient \
method for creating lists of points."
Tag2	Do	point	"Evaluate " Param:point " if all global and local conditionals are met."
Tag2	If	isct	"Only include the Tally list point for this operation if " param:isct " evaluates to true."
Tag2	Ifx	isct	"V4 supports three special variations of If- IfA, IfB, and IfC. These are identical to " tag:If " but also remember their values and can be referenced in other parts of the Tally with " TagResName:IfA ", " TagResName:IfB ", and " TagResName:IfC ". These are provided solely for performance."
Index	IfA	Tag	Str("v4refmod_t.htm#IntMod:Tally")	Tally	IntMod
Index	IfB	Tag	Str("v4refmod_t.htm#IntMod:Tally")	Tally	IntMod
Index	IfC	Tag	Str("v4refmod_t.htm#IntMod:Tally")	Tally	IntMod
Tag2	IfOnce	isct	"Only include the Tally list point for this operation if isct evaluates to true. If it does then do not perform subsequent operations for the point. If isct evaluates to false then continue with subsequent operations."
Tag2	ListOf	point	"Maintain a list of the points and use that as the value to be associated with the " tag:Bind " at the end of the tally."
Tag2	Maximum	point	"Keep track of the largest point in the tally."
Tag2	Minimum	point	"Keep track of the smallest point in the tally."
Tag2	Project	dim	"This tag may be used in lieu of the " TagName:Bind " tag. When the tally action is complete, V4 \
creates projections from the " TagName:By " points onto values of the " Param:dim " dimension. This option may be used only \
when a single " TagName:By " value is specified. It is significantly faster than the " TagName:Bind " option. The " TagName:BindIf " \
option also applies to this tag."
Tag2	SetOf	point	"Similar to " tag:ListOf " except that only a single copy of each point will be in the resulting list, i.e. there will be no duplicate points."
Tag2	StdDev	point	"Calculate the standard deviation (sample, not population) of points in the tally."
Tag2	Sub	point	"Subtract the points in the tally (same as Sum with the sign reversed)."
Tag2	Sum	point	"Sum the points for the tally."
Tag2	UCount	isct	"Maintain a unique count. The results are the same as using the " tag:SetOf " tag and then taking the " IntMod:ListSize " of the result. If the count is the wanted result, UCount is significantly faster than " tag:SetOf ". The " tag:Cache " tag can be used to improve performance."
Tag2	Values	list	"The tally operations are not performed on the main tally list but on the list of points specified by this list. See the example below."
Tag2	WBind	isct	"Specifies the binding environment to be used with the With argument."
Tag2	With	pt	"The " tag:With " and " tag:WBind " arguments are used with the " tag:Minimum " and " tag:Maximum " arguments. These allow you to record points associated with minimum and maximum values. See the example below."
Desc
IPar	"The " IntMod:Tally " module is a powerful function of V4 which scans through a list of points, performs a variety of calculations and either returns the results as a list or binds the results to intersections for later reference. \
A " Param:tallyoption " is a list containing arguments as described in the Secondary Tagged Argument list."
IPar	"Actions/operations include any combination of the following-"
List	Dot
Entry	"An operation which is performed on the selected list points (" Tag:Count ", " Tag:Sum ", " Tag:Sub ", " Tag:Maximum ", " Tag:Minimum ", " Tag:Average ", " Tag:StdDev ", " Tag:UCount ")."
Entry	"A bypoint which specifies how the lists points are to be aggregated (" Tag:By ")."
Entry	"A bindisct which specifies the base intersection used in binding the results (" Tag:Bind ")."
Entry	"Or an array which is filled with the operation results (ie. " Tag:Array " instead " Tag:Bind ")."
Entry	"A listbyisct which specifies an intersection used to bind the list of aggregation points (" Tag:ByList ")."
Entry	"And a " Param:localselect " which specifies more specific selection of list points within the particular " Param:tallyoption "(" TagName:"If(A/B/C)" ", " Tag:IfOnce ")."
EndList
IPar	"The arguments " tag:Count ", " tag:Index ", " tag:Sample ", and " tag:Skip " can be used to reduce the total number of points examined as part of the tally. If a " tag:Count " dimension is given then the context is updated with a point on that dimension reflecting the current index (1 through the number of points in the tally). " tag:Index " can be used to select only portions of the source list. For instance Index::Int:<=1000 selects on the first 1000. Index::Int:5000..10000,20000..30000 selects only points 5000 through 10000 and points 20000 through 30000. Sample is used to random select, on average, every nth point. " tag:Skip " is used to skip over the first n points. Skip::1000 is identical to Index::Int:>1000."
IPar	"The processing order within a " IntMod:Tally " is as follows:"
List	Dot
Entry	"Evaluate next point in source " Param:list "."
Entry	"Perform any " Tag:Count ", " Tag:Sample ", or " Tag:Skip " checking."
Entry	"Add the point, as is, to the context."
Entry	"If a " Tag:Shell " dimension is given then add point to context via the shell dimension."
Entry	"If a " Tag:Hold " point is given then evaluate it and hold it in the context."
Entry	"Process any " Tag:Context " points."
Entry	"Handle any " Tag:Parent " / " Tag:PIf " processing."
Entry	"If a " Tag:While " point was specified then test it. If the result is Logical:True then continue otherwise terminate."
Entry	"If an " Tag:If " tag is given then test it. If the result is Logical:False then continue from the top. Otherwise continue with next step."
Entry	"Perform any necessary " Tag:Sum " and " Tag:Calc " processing."
Entry	"Process any " Tag:Do " points."
Entry	"Process all of the " IntMod:Tally " actions."
Entry	"If an " Tag:AWhile " point has been given then evaluate it. If the result if Logical:True then continue from the top, otherwise terminate."
EndList
Examples
Ex	"Tally( Cus.. (ListOf::Cus* By::Cus.State Bind::[CusBySt] ByList::[StList]) )"
Ipar	"This example tallies all customers and creates a list of customers by state. A binding of the form-"
EXWD	Bind [CusBySt State:xx]	list of customers in xx
IPar	"Additionally it creates a list of all states seen in the tally and binds that list to [StList]."
EXML	"Tally - Averages"
ML	"Tally(IM.. If::{IM.LastSale > Date:950101"
ML	"&nbsp;&nbsp;(Average::(IM.Cost IM.YearSales) By::IM.Class Bind::([AvgClassCost] [AvgClassSales]) ))"
IPar	"In the above example, the tally selects only those inventory item points (IM) which have a last sale date greater than or equal to 01-Jan-95. It then aggregates the selected points by inventory class (By:IM.Class) and calculates the average cost and average sales for the year. Upon completion it generates bindings of the form:"
EXWD	Bind [AvgClassCost Class:xx]	average cost for the class
EXWD	Bind [AvgClassSales Class:xx]	average sales for the class
IPar	"The example below simply selects all sales in June 1996 over 15000 and sums them into [TotalSales]-"
EXML	"Tally - Sums"
ML	"Tally(Sales.. If::{Sales.Amt > 15000 Sales.Date == Date:960601..960630}"
ML	"&nbsp;&nbsp;(Sum::Sales.Amt Bind::[TotalSales]))"
IPar	"The example below selects all bills-of-materials of type ASSM1 and makes a list of component parts. The Sort then sorts the parts by inventory ID and then displays the part ID and description."
EXML	"Tally - Roll Up Bill-of-Materials"
ML	"Tally(BOM.. If::{BOM.Type = Type:ASSM1}"
ML	"&nbsp;&nbsp;&nbsp;(Values::BOM.CompList SetOf::BOM.Parts Bind::[PartList]))"
ML	"Sort([PartList] By::IM.Id Do::EchoS(IM.Id IM.Desc))"
IPar	"The example below demonstrates the With/WBind options. The Tally enumerates through all sales and generates the minimum sales per state. The With argument additionally records the customer bill-to associated with each minimum in each state. The bindings created are [MinSale State:xxx] and [MinCus State:xxx]."
EXML	"Tally - Minimums"
ML	"Tally(Sales.."
ML	"&nbsp;&nbsp;(Minimum::Sales.OrderAmt By::Sales.State Bind::[MinSale] With::Sale.BillTo WBind::[MinCus]))"
EXML	"Tally - Creating a bitmap result"
ML	"Dim BMList List Entries Photo"
ML	"Tally(PhotoAttributes.. (ListOf::PhotoAttributes.Photo By::PhotoAttribute.Value Bind::PhotoList Dim:BMList))"
IPar	"This example demonstrates the use of the " TagName:Array " option."
EXWD	[ItemSalesByState date..]	generate sales by item (rows) and state (columns)
EXWD	&nbsp;Do(Tally(sale:(date*)	tally for the specified date range
EXWD	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Sum::sale.units By::(sale.item sale.state) Array::units) )	sum units by item and state -> [units] array
EXWD	&nbsp;&nbsp;&nbsp;&nbsp;Context::Sort(Array([units] ListOf::2) By::state*)	List* = sorted list of selected states
EXWD	&nbsp;&nbsp;&nbsp;&nbsp;Rpt(Title::"Units Sold By Item / State")	report title
EXWD	&nbsp;&nbsp;&nbsp;&nbsp;Rpt(Columns::(a b (c ListSize(List*))))	define report columns (c = set of columns for states)
EXWD	&nbsp;&nbsp;&nbsp;&nbsp;Rpt(Heading::(a "Item") (b "Description") (c (state*)/List*)))	report headings
EXWD	&nbsp;&nbsp;&nbsp;&nbsp;Enum(Sort(Array([units] ListOf::1) By::item.id)	enum through all items
EXWD	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Rpt((a item.id) (b item.description) (c Array([units] item* state*)/List*)))	generate report detail
EXWD	&nbsp;&nbsp;&nbsp;&nbsp;Rpt(Close?)	close off report
EXWD	&nbsp;&nbsp;&nbsp;)	 
Mod	TallyM	Merge Results of Multiple Tallies	V4Int List
Usage	TallyM "argss"	List
Params	opttag	"One or more tagged arguments as described below."
Params	tallyoption	"A list of tally options described below. More than one list may be given in a " IntMod:TallyM "."
Tag	Area	list	"This specifies a list of areas to be merged as part of this tally. Each of the areas must have been created by a prior " IntMod:Tally " call with the Area option. This tag is mandatory."
Tag	Values	n	"Defines the maximum number of " IntMod:Tally " by combinations. In most cases the default number is sufficient. If a Tally results in too many combinations, an error will occur and this option will be required. If a Tally approaches the default limit, performance may suffer but, again, warning messages will be given by the V4 runtime system."
Desc
IPar	"The " IntMod:TallyM " module takes the results of previous " IntMod:Tally " calls and merges them into a single result. There is no (reasonable) limit to the number of areas that may be merged in a single " IntMod:TallyM ". The previously run " IntMod:Tally "'s may have been run on different hardware or operating systems. This module has two main uses. The first is to pre-aggregate a large, non-changing set of points and then quickly merge in a smaller dynamic or recent set of points to get a consolidated answer. The second use is to factor very large " IntMod:Tally "'s into smaller pieces which can be run concurrently on different machines and then merge the sub-results back into a consolidate result."
Examples
EX	"Tally(OldSales.. Area::File1 (Sum::Sales.Amt By::Sales.ShipTo))"
EX	"Tally(CurrentSales.. Area::File2 (Sum::Sales.Amt By::Sales.ShipTo))"
EX	"TallyM(Area::(File1 File2) (Bind::[CusSales] ByList::[CusList]))"
Mod	TEQ	Test Equal/In (Quoted)	RelLog
Usage	value	"expression test1 value1 test2 value2 ... dfltvalue"
Params	value	"The result of evaluating one of the valuen arguments"
Params	expression	"A point that must evaluate to a numeric or dictionary type."
Params	test	"A point to be compared with the expression."
Params	value	"A point to be evaluated if its corresponding test point matches the expression. The evaluated result is returned as the result of the module."
Params	dfltvalue	"The evaluated value to be returned if no tests match the expression."
Desc
IPar	"The " IntMod:TEQ " module evaluates its first argument and compares the result with each of the testn arguments until a match is found. The corresponding valuen point is then evaluated and returned as the result for the module. If no test matches the expression then the " param:dfltvalue " is evaluated and returned. If no " param:dfltvalue " is given then the module fails."
Examples
EXML	"TEQ - Different Recapping"
ML	TEQ(HowRecap*
ML	&nbsp;&nbsp;&nbsp;HowRecap:Name
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Do(Enum(Sort([EmpList] By::Emp.Id) Do::Emp.CLOut))
ML	&nbsp;&nbsp;&nbsp;HowRecap:Mgr
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Do(Enum(Sort([EmpList] By::Emp.Mgr.Id By::Emp.Id) Do::Emp.CLOut
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;After::(Emp.Mgr EchoS("" T:=Emp.Mgr.Name))) )
ML	&nbsp;&nbsp;&nbsp;)
EXML	"TEQ - Integer Ranges"
ML	TEQ({1 + 5}
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Int:1        Result is 1
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Int:2..10    Result is between 2-10
ML	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Result is > 10)
Mod	Throw	Throw an Error Exception	V4Int
Usage	result	"excstr ctxpt ctxpt ..."
Params	result	"The result is the last point evaluated by the V4 " IntMod:Try " module " TagName:Catch " point(s)."
Params	excstr	"An exception to be thrown (string) or list of exceptions separated with commas."
Params	ctxpt	"One or more points to be inserted into the context as the exception is thrown."
Desc
IPar	"The " IntMod:Throw " module attempts to throw an exception as defined by " Param:excstr ". If the string consists of more than one exception \
(delimited by commas) then V4 attempts to throw the first exception. If no nested " IntMod:Try " modules catch the exception then V4 continues with \
the next exception. If no exceptions are caught then the module fails."
IPar	"The result of the module is the value point of the last evaluated point within the point or list of points that <i>caught</i> the exception."
IPar	"The failure within a V4 module may trigger an implicit exception. This may be controlled with the " IntMod:V4 " " TagName:Throw " option that \
enables the automatic throwing of an exception when a specific error occurs within V4."
IPar	"See also " IntMod:Try "() and " IntMod:V4 "() for additional information."
Examples
EX	"[TryThrowExample]"
EX	"&nbsp;Do(V4(Throw::(ODBCConErr))"
EX	"&nbsp;&nbsp;&nbsp;&nbsp;Enum(Int:1..10 Id::OnceAgain"
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Try("
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Echo(line1)"
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[xxx],Echo(\"&nbsp;oops\")"
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Echo(line2)"
EX	""
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Catch::\"XDB*\""
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Echo(\"Looks like an XDB xxx-xxx = \"&nbsp;Error()) hohoho)"
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Catch::(Catch Str(\"the\"&nbsp;\"se\") if you can)"
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Echo(\"Caught this - \"&nbsp;Int* \"&nbsp;\"&nbsp;UDim*) Continue::OnceAgain)"
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Catch::\"ThatsEnough\""
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Echo(\"Caught this - \"&nbsp;Int* \"&nbsp;\"&nbsp;UDim*) End::OnceAgain)"
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Catch::\"TestFail\""
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Echo(\"Caught this - \"&nbsp;Int* \"&nbsp;but going to fail\") FAIL)"
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;))"
EX	"&nbsp;&nbsp;&nbsp;)"
EX	""
EX	"[xxx]"
EX	"&nbsp;Do(Echo(\"In xxx-\"&nbsp;Int*)"
EX	"&nbsp;&nbsp;&nbsp;&nbsp;If({Int* = 2} Then::Throw(\"that,those,these,This\"&nbsp;23444))"
EX	"&nbsp;&nbsp;&nbsp;&nbsp;If({Int* = 3} Then::Echo(\"XDB = \"&nbsp;dbConnect(Dim:O DSN::Freddy)))"
EX	"&nbsp;&nbsp;&nbsp;&nbsp;If({Int* = 4} Then::Throw(\"TestFail\"))"
EX	"&nbsp;&nbsp;&nbsp;&nbsp;If({Int* = 5} Then::Throw(\"ThatsEnough\"))"
EX	"&nbsp;&nbsp;&nbsp;&nbsp;Echo(\"&nbsp;&nbsp;still in xxx - \"&nbsp;Int*)"
EX	"&nbsp;&nbsp;&nbsp;)"
EX	""
EX	"Eval [TryThrowExample]"
IPar	"Generates the following output"
EX	"line1"
EX	"In boo-1"
EX	"&nbsp;&nbsp;still in boo - 1"
EX	"line2"
EX	"line1"
EX	"In boo-2"
EX	"Caught this - 23444 THESE"
EX	"line1"
EX	"In boo-3"
EX	"Looks like an XDB boo-boo = [ODBCConErr] dbConnect() fail - ODBCCon err: State(IM002), Native(0), Msg=[Microsoft][ODBC Driver Manager] Data source name not found and no default driver specified"
EX	"XDB = hohoho"
EX	"&nbsp;&nbsp;still in boo - 3"
EX	"line2"
EX	"line1"
EX	"In boo-4"
EX	"Caught this - 4 but going to fail"
EX	"&nbsp;oops"
EX	"line2"
EX	"line1"
EX	"In boo-5"
EX	"Caught this - 5 THATSENOUGH"
EX	"V4>"
EX	"D:\vic\v3>xv4 trythrow"
EX	"V4 1.401 - \"Data that thinks like us\"&nbsp;(protected by U.S. Patent 6,470,490 - MKS Inc. - 2002)"
EX	"line1"
EX	"In xxx-1"
EX	"&nbsp;&nbsp;still in xxx - 1"
EX	"line2"
EX	"line1"
EX	"In xxx-2"
EX	"Caught this - 23444 THESE"
EX	"line1"
EX	"In xxx-3"
EX	"Looks like an XDB xxx-xxx = [ODBCConErr] dbConnect() fail - ODBCCon err: State(IM002), Native(0), Msg=[Microsoft]..."
EX	"XDB = hohoho"
EX	"&nbsp;&nbsp;still in xxx - 3"
EX	"line2"
EX	"line1"
EX	"In xxx-4"
EX	"Caught this - 4 but going to fail"
EX	"&nbsp;oops"
EX	"line2"
EX	"line1"
EX	"In xxx-5"
EX	"Caught this - 5 THATSENOUGH"
Mod	Timer	Time the Evaluation of an Intersection or Schedule Future Context Point	V4Int OSRel DateTime
Usage	result	"v4point tagres"
Usage	result	"tagged arguments"
Params	result	"Depends on the arguments"
Params	v4point	"The evaluation of this point (usually a quoted intersection or module) is timed"
Params	tagres	"One of the tagged results below"
TagRes	ConnectTime	"Return the elapsed time required by the evaluation."
TagRes	CPUTime	"Return the actual CPU time required for the evaluation."
Tag	At	time	"The time at which the " TagName:Context " point is to be inserted. If " Param:time " is an integer or real number then it is treated as the number of seconds from now. \
If " Param:time " is a universal date-time or calendar point then it is the actual (local) time of the insertion. If it is a UTime point then it is the hours-minutes-seconds from now."
Tag	Context	point	"The point to be inserted into the context."
Tag	Id	point	"A point identifying the timer entry. If no " TagName:Id " point is given then a unique point will be created."
TagRes	ListOf	"Returns a list of all current timer id's. If no timer entries exist then an empty list is returned."
TagRes	Remove	"Removes the timer entry specified by the " TagName:Id " tag value."
Tag	Value	type	"Returns a value associated with a specific timer entry. If " Param:type " is <b>Delta</b> then the number of seconds until the timer is triggered is returned. If \
the " Param:type " is <b>UDT</b> then the local date-time of the trigger is returned."
Desc
IPar	"This module has two forms. The first is to time the evaluation of a binding. In this form, the first argument is a quoted binding to be timed. \
Optional remaining arguments specify whether wall-clock, cpu time or both times are to be returned. If no tagged result is specified \
then a list of both connect time and cpu is returned. If either of " TagResName:ConnectTime " or " TagResName:CPUTime " is \
given then only that time is returned."
IPar	"The second form is used to specify the insertion of a point into the context at some future time. The insertion takes place within a separate execution thread independently of \
the main execution thread. Multiple timer entries are possible."
Examples
EXWD	Timer(@V4(Sleep::2))	results in (Num:2.0043 Num:0) meaning 2 seconds (approximately) elapsed, 0 cpu seconds required
EXWD	Timer(@[Complex] CPUTime?)	results in Num:<i>nnn.nn</i> reflecting actual cpu time
EXWD	Timer(Context::alarm1 At::30)	specifies that the point NId:alarm1 is to be inserted into the context after 30 seconds
EXWD	Timer(Id::id1 At::UDT:9/23/14:13:30 Context::dim:value)	specifies that dim:value is to be added to the context at the given date-time
EXWD	Timer(Value::delta Id::id1)	returns the number of seconds remaining until the trigger identified as id1 is processed
EXWD	Timer(Id::id1 Remove?)	removes the timer entry
Mod	Transform	Transform Point	V4Int
Usage	result	"point tagarg"
Params	result	"The resulting transformed point."
Params	point	"The point to be transformed."
Params	tagarg	"One or more tagged arguments below."
Tag	All	isct	"All values in the point are transformed by this evaluation."
Tag	First	isct	"The first point in a range of values for the point is transformed by this evaluation."
Tag	Dim	dim	"Specifies a new dimension for the result. The default is the dimension of the first argument."
Tag	Last	isct	"The last point in a range of values for the point is transformed by this evaluation."
TagRes	First	"Return the first value in " Param:point "."
TagRes	Last	"Return the last value in " Param:point "."
Desc
IPar	"The " IntMod:Transform " module can be used to alter or change the values of a point specification."
Examples
EXWD	Transform(UDate:5/20/98..7/10/98 All::DTInfo(UDate* UMonth?) Dim:UMonth)	UMonth:May-98..Jul-98
EXWD	Transform(Int:100..200 First::Div(Int* 2) Last::Mult(Int* 3))	Int:50..600
EXWD	Transform(UDate:8/10/98 First::DTInfo(UDate* Month::1 Day::1))	UDate:01-Jan-98..10-Aug-98
EXWD	Transform(UDate:8/10/98 Last::DTInfo(UDate* Day::31))	UDate:10-Aug-98..31-Aug-98
EXWD	Transform(UDate:3/5/2002..5/1/2002 First?)	UDate:05-Mar-02
EXWD	Transform(UDate:3/5/02..5/1/02 Last?)	UDate:01-May-02
Mod	Tree	Tree Manipulation	DBase V4Int List
Usage	value	"point tag ..."
Params	value	"The result depends on the arguments."
Params	point	"A dimension or point within an existing tree."
Params	tag	"One or more tagged arguments below."
Tag	Bottom	bisct	"Enumerate through the tree and evaluate the intersection " Param:bisct " for each bottom (leaf) point within a tree."
Tag	Child	cisct	"Returns a list of all immediate children nodes that satisfy the conditional " Param:cisct ". Each child \
node is inserted into the context and " Param:cisct " is evaluated. If the result is TRUE then the node is included in the returned \
list. If no children are selected then an empty list is returned. If there are no children nodes then the module fails."
TagRes	Child	"Return a list of all immediate children nodes relative to the current node."
Tag	Create	estmax	"Create a new tree associated with the dimension specified in the first argument to the module. \
V4 uses " Param:estmax " as the estimated maximum number of nodes in the tree. This is just a guideline, not a hard maximum. The return \
value is the new top-most point/node in the tree. Note that the dimension must be of point type " PntType:Integer "."
TagRes	Create	"Create a new tree associated with the dimension specified in the first argument to the module. \
V4 assumes the tree will be small to modest in size (less than 100000 nodes). The return \
value is the new top-most point/node in the tree. Note that the dimension must be of point type " PntType:Integer "."
Tag	Delete	nodespec	"If " param:nodespec " is CHILD then all children of the current node are removed from the tree. If " param:nodespec " is \
NODE then the current node and all of its children are removed. If the node is the top node of the tree then the entire tree is deallocated from the \
current runtime environment."
Tag	Depth	dim	"Updates dimension " Param:dim " with the current depth of the tree for each node visited in an enumeration. This is used in \
conjunction with the " TagName:Enter ", " TagName:Leave ", " TagName:Return ", and " TagName:Bottom " arguments."
Tag	Depth	disct	"Search the specified tree (or starting point within a tree) for one or more points such that the \
evaluation of " Param:disct " returns TRUE. A depth-first search is performed and the first point satisfying the condition \
is returned unless the " TagResName:ListOf " argument precedes this argument. In this case a list of all tree points \
satisfying the condition are returned."
TagRes	Elevate	"Elevate the children of the current node to become children of the parent node. The current node is removed from the tree."
Tag	Enter	eisct	"Enumerate through the tree and evaluate the intersection " Param:eisct " for each node as it is \
entered. If the node is a leaf (i.e. no children) and a " TagName:Bottom " argument has been given then " Param:eisct " is \
not evaluated, only the " TagName:Bottom ":" Param:bisct " intersection."
TagRes	Hash64	"Returns a 64-bit hash of the tree. If two trees have the same hash value then there is a very high likelyhood that the two trees \
are identical (although not necessarily the same tree)."
Tag	Leave	lisct	"Similar to the " TagName:Enter " argument except " Param:lisct " is evaluated when the node is left."
TagRes	Left	"Position to the sibling node to the left of the current node. The module fails if the current node is \
the left-most node."
Tag	Left	num	"Position to the node " Param:num " nodes to the left of the current node. If " Param:num " is 0 \
then position to the left-most sibling node of the current node."
TagRes	ListOf	"Return a list of points in the tree using the current node as the starting point. This option may also be \
used with the " TagName:Depth " and " TagName:Width " arguments to return a list of all matching points."
TagRes	Parent	"Return the parent node of the current node. The module fails if the current node is the top-most node of the tree."
Tag	New	pos	"Create a new node at the relative position " Param:pos " to the current node. The allowed values \
for " Param:pos " are- <b>Child</b> to create a child node relative to the current node. If the current point already has children \
then the new point becomes the right-most child, <b>Left</b> to create a node directly to the left of the current node. This \
fails if the current node is the top-most node of the tree, <b>Right</b> to create a node directly to the right of the current node. \
Again this fails for the top-most node, <b>Parent</b> to create a node directly above the current."
TagRes	Nodes	"Returns the number of nodes currently in the tree."
TagRes	Quoted	"Returns the value of the specified node. The value is returned as-is. (See the " TagResName:Value " option to force evaluation.)"
TagRes	Remove	"See " TagName:Remove "::NODE."
Tag	Return	risct	"Enumerate through the tree and evaluate the intersection " Param:risct " when returning to a node \
with more than one child."
TagRes	Right	"Return the node directly to the right of the current node. The module fails if the current node is the \
right-most node."
Tag	Right	num	"Position to the node " Param:num " nodes to the right of the current node. If " Param:num " is 0 \
then position to the right-most sibling node of the current node."
TagRes	Root	"Returns the root, or top-most node, of the tree."
Tag	Swap	node2	"Swap the current node with " Param:node2 ". The two nodes (and each node's children) swap positions \
within the tree."
Tag	Value	point	"Set the value of the current node to " Param:point "."
TagRes	Value	"Returns the value of the specified node. If the value is an intersection or expression then it is evaluated first. (See the " TagResName:Quoted " option to prevent evaluation.)"
Tag	Width	wisct	"Search the specified tree (or starting point within a tree) for one or more points such that the \
evaluation of " Param:wisct " returns TRUE. A breadth-first search is performed and the first point satisfying the condition \
is returned unless the " TagResName:ListOf " argument precedes this argument. In this case a list of all tree points \
satisfying the condition are returned."
Desc
IPar	"This module may be used to create one or more tree structures. Each tree is associated with a integer dimension. Points \
within the tree are integer points within the dimension. The root (top) of the tree is initially the " Param:dim ":0 point \
on the dimension. All enumerations through a tree are left-to-right. A depth-first search starts down the left side of the \
tree and works its way to the right. A width-first search is left-to-right for each successive level of the tree."
IPar	"New nodes may be created within the tree and consist of points on the tree's dimension. Any additional information \
to be associated with a node must be done with bindings incorporating the tree points."
IPar	"The tagged arguments, " TagName:Enter ", " TagName:Leave ", " TagName:Return ", and " TagName:Bottom " may be used \
in combination or alone. Note that the " TagName:Bottom " argument overrides the other arguments for leaf nodes (those without \
children)."
IPar	"Any of the tagged arguments resulting in a single node may be chained. See the example below."
Examples
EXWD	Tree(TrDim:xxx Child? Right::0 Child?)	Returns the child of the rightmost child to the current node
EXWD	Dim Exp Int	Create an integer dimension
EXWD	Tree(Dim:Exp Create?)	Create a tree (returns Exp:0)
EXWD	[Exp:0 Oper] "*"	Assign an operator to the node
EXWD	[Exp:0 Func] "Times"	  and a function name
EXWD	Context Add Tree(Exp:0 New::Child)	Add a child to the top node
EXWD	[Exp* Oper] "+"	Assign an operator and function to the child
EXWD	[Exp* Func] "Plus"	  
EXWD	Context Add Tree(Exp* New::Child)	Create two children to this node
EXWD	[Exp* Value] 2	First child value is 2
EXWD	Context Add Tree(Exp* Parent? New::Child)	Create second child
EXWD	[Exp* Value] 5	Second child value is 5
EXWD	Context Add Tree(Exp:0 New::Child)	Create another child beneath root of tree
EXWD	[Exp* Oper] "-"	Assign operator and function
EXWD	[Exp* Func] "Minus"	  
EXWD	Context Add Tree(Exp* New::Child)	Create two children to this node
EXWD	[Exp* Value] 7	 
EXWD	Context Add Tree(Exp* Parent? New::Child)	 
EXWD	[Exp* Value] 1	 
EXWD	[Exp.. Infix] Exp.Oper	Define the "infix" operator
EXWD	[Exp.. Prefix] Exp.Func	  and the "prefix" operator
EXWD	Tree(Exp:0 ListOf? Return::@Exp.Infix Bottom::@Exp.Value)	(Int:2 "+" Int:5 "*" Int:7 "-" Int:1)
EXWD	Tree(Exp:0 ListOf? Leave::@Exp.Func Bottom::@Exp.Value)	(Int:2 Int:5 "Plus" Int:7 Int:1 "Minus" "Times")
EXWD	Echo(`Tree(Exp:0 ListOf? Enter::@Str(Exp.Func "( ") Leave::")" Bottom::@Str(Exp.Value " ")))	"Times( Plus( 2 5 )Minus( 7 1 ))"
Mod	Trig	Trigonometric Functions	Math
Usage	value	"tag tag ..."
Params	value	"The numeric result."
Params	tag	"Tagged arguments as described below."
TagRes	ACos	"Return the arc cosine of the prior " TagName:X " or " TagName:Cos " tagged value."
TagRes	ASin	"Return the arc sine of the prior " TagName:X " or " TagName:Sin " tagged value."
TagRes	ATan	"Return the arc tangent of the prior " TagName:X " or " TagName:Tan " tagged value."
TagRes	ATan2	"Return the arc tangent of the prior " TagName:Y " and " TagName:X " tagged values based on the ratio of \
<i>y</i> / <i>x</i>."
Tag	Cos	npt	"Specifies the cosine."
Tagres	Cos	"Return the cosine"
Tagres	CosH	"Return the hyperbolic cosine."
Tag	Degrees	npt	"Specifies the angle in degrees."
Tagres	Degrees	"Return the angle in degrees"
Tag	Radians	npt	"Specifies the angle in radians."
Tagres	Radians	"Return the angle in radians."
Tag	Sin	npt	"Specifies the cosine."
Tagres	Sin	"Return the sine."
Tagres	SinH	"Return the hyperbolic sine."
Tag	Tan	npt	"Specifies the tangent."
Tagres	Tan	"Return the tangent."
TagRes	TanH	"Return the hyperbolic tangent."
Tag	X	npt	"An <i>x</i> value."
Tag	Y	npt	"A <i>y</i> value."
Desc
IPar	"The various permutations of this module can be used to determine most of the trigonometric functions. For a \
historical overview of these functions visit <a href='http://www-gap.dcs.st-and.ac.uk/~history/HistTopics/Trigonometric_functions.html' target=_blank>this site</a>."
Examples
EXWD	Trig(Degrees::90 Sin?)	Num:1
EXWD	Trig(Radians::{3.14159 // 4} Cos?)	cosine of 45&deg; - Num:0.707107250279226
EXWD	Trig(Cos::0.707107250279226 Degrees?)	Num:45 (degrees)
EXWD	Trig(Sin::1 Degrees?)	Num:90 - same as Trig(X::1 ASin?) but with result in degrees, not radians
EXWD	Trig(X::2 Y::1 ATan2?)	Num:0.463647609 (the tangent of angle between lines from {0,0} to {0,x=2} and {0,0} to {x=2, y=1}
Mod	Try	"Evaluate Points with Exception Catching"	V4Int
Usage	result	"arg arg ... catcharg catchpt ..."
Params	result	"The resulting point is the value of the last evaluated argument."
Params	arg	"One or more points to be evaluated and/or tagged arguments below."
Params	catcharg	"One or more " TagName:Catch " tagged arguments."
Params	catchpt	"A point or list of points to be evaluated if the prior " TagName:Catch " argument is thrown and caught."
Desc
IPar	"This module takes the same arguments and performs almost identically to the " IntMod:Do " module. It differs in that, after the argument points \
to be evaluated are one or more arguments with the " TagName:Catch " tag followed by the point to be evaluated."
IPar	"The result of the last point evaluated is returned as the value of the " IntMod:Throw " that generated the exception, or in the case of an internal \
error, the point that was being evaluated that resulted in the error. In all cases, control is returned to the point of the error after the exception \
handling finishes. Note however that the " TagResName:End " and " TagResName:Continue " values may be returned to immediately alter the normal flow of \
execution. The FAIL point (" IntMod:NOp "(0)) may also be returned to cause the evaluation generating the exception to fail. The example given with \
the " IntMod:Throw " module shows all these combinations."
IPar	"See the documentation for " IntMod:Do " for a complete list of options."
IPar	"See the " IntMod:Throw " module for instructions on throwing exceptions. See the " IntMod:V4 " module's " TagName:Throw " option for instructions \
on enabling implicit exceptions when an internal V4 error occurs."
Tag	Catch	excstr	"The " Param:excstr " specifies one or more exceptions to be caught. If multiple exceptions are given then they must be delimited \
with commas."
Tag	Catch	excpat	"An exception pattern that consists of a string prefix followed by an asterisk. For example " TagName:Catch "::\"XDB*\" represents \
all exceptions starting with \"XDB\"."
Examples
IPar	"The following example evaluates two intersections- [Eval1] and [Eval2]. If any XDB errors occur then the EchoE() module is called. If either of \
the exceptions MyError or YourError are thrown then the GuiAlert is called and then [Retry] is evaluated. The result of evaluating [Retry] becomes the result \
of the " IntMod:Throw " module throwing the exception."
EX	"Try("
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V4(Throw::(ODBCConErr))"
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Eval1]"
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Eval2]"
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Catch::\"XDB*\""
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EchoE(\"A fatal XDB error has been detected\")"
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Catch::\"MyError,YourError\""
EX	"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(GuiAlert(\"Looks like a problem\") [Retry])"
EX	"&nbsp;&nbsp;&nbsp;)"
Mod	Unicode	"Perform Unicode - Integer Conversions"	String
Usage	result	"arg"
Params	result	"The result of the operation, dependent on the arguments."
Params	arg	"Either a string, integer or list."
Desc
IPar	"This module converts a string to its Unicode representation or converts one or more integers into a string of Unicode characters. If the argument is a single character string then its Unicode integer equivalent is return. \
If the argument is a multi-character string then a list of integers is returned. If the argument is an integer then an single character string is returned. If the argument is a list of integers then a string representing those integers is returned."
Examples
EXWD	Unicode("a")	returns 97
EXWD	Unicode(97)	returns "a"
EXWD	Unicode("abcDEF")	returns the list (97 98 99 68 69 70)
EXWD	Unicode((97 98 99 68 69 70))	returns "abcDEF"
Mod	UOM	"Perform Various Units of Measure Operations"	Math DBase
Usage	result	"uom tagarg"
Params	result	"The result of the " IntMod:UOM " operation."
Params	uom	"A unit of measure specification."
Params	tagarg	"One or more of the tagged arguments below."
Desc
IPar	"V4 supports a powerful units-of-measure facility. Any number of different units-of-measure tables may be defined. Each table describes its own various measures and how they interrelate. For instance a linear table may describe units in inches, feet, yards, centimeter, and meters. A volume table may describe quarts, pints, liters, and gallons. Different units may be differentiated with unique prefixes or suffixes."
IPar	"Each units-of-measure table must be defined before any entries or operations on that table are performed. The tags to define tables include " Tag:Id ", " Tag:Acceptor ", and " Tag:Displayer ". The tags to define entries within a table include " Tag:Id " (to define the table), " Tag:Index " (to define the entry), " Tag:Factor " (to define the conversion factor) and " Tag:Label " to define a prefix or suffix."
IPar	"The definition of a UOM table is usually done automatically by the V4 runtime. The first time any reference is made to a UOM entry, V4 attempts to initialize that UOM's table by evaluating the binding [UV4:UOMInitialize Int:n] where n is the UOM table's "tag:Id ". See the example below."
IPar	"The UOMPer point type is a combination of a real number and a unit of measure. It is most often used to define a price or amount per a unit of measure (e.g. 3.95 per 6oz.)."
IPar	"Many arithmetic operations are allowed on UOM and UOMPer points. For example '{UOM1:1lb * PPer:2.00/1oz}' would evaluate properly to Num:32.00"
IPar	"UOM Coercion ...."
TagRes	Reset	"Resets the entire internal UOM table or if a UOM table is given as the first argument then just that UOM."
Tag	Id	uomid	"Specifies the UOM string identifier or internal number to specify a particular entry within a UOM."
Tag	Description	string	"Specifies the description of the current UOM entry."
Tag	Name	string	"Specifies the name of the current UOM entry."
Tag	Type	point	"Defines the user defined point type for the current UOM."
Tag	Index	num	"Specifies the next UOM index number for the current UOM."
Tag	Round	decimals	"The number of decimal places to keep for the current UOM."
Tag	Factor	num	"The conversion factor off of the base for the current UOM."
Tag	Format	logical	"If TRUE then use the prefix/suffix when displaying a UOM."
Tag	Count	num	"Specifies the case-count for the current UOM entry."
Tag	Label	string	"Specifies the prefix/suffix character string for the current UOM entry."
Tag	Num	num	"Sets the numeric portion of a UOM to " Param:num " (in <b>base units</b>). If the first argument is a UOMPer then the \
price portion is set to " Param:num "."
Tag	CoMingle	logical	"If " Param:logical " is TRUE then entries within a UOM can be added to other UOMs, if FALSE (default) then they may not."
Tag	Partial	logical	"If " Param:logical " is TRUE then fractional UOM entries are allowed. If FALSE (default) then only integral amounts are accepted."
Tag	Acceptor	name	"The name of the UOM entry to be the default acceptor (input) unit of measure."
Tag	Displayer	uomid	"The name of the UOM entry to be used as the default display UOM. Use the string AsIs to have UOM entries display in current UOM."
TagRes	Id	"Return the UOM entry name of the current UOM."
TagRes	Round	"Return the rounding of the current UOM entry."
TagRes	Factor	"Return the conversion factor of the current UOM entry."
TagRes	Index	"Return the unit-of-measure table internal index of the current UOM entry."
TagRes	Label	"Return the label of the current UOM entry."
TagRes	Num	"Return the numeric quantity of the current UOM entry. This quantity is <b>always</b> in base units."
TagRes	Head	"Returns the price portion of a UOMPer point or the first UOM of a UOMperUOM point."
TagRes	Tail	"If this is the last argument then it returns the UOM portion of a UOMPer point or the second UOM of a UOMperUOM point. \
If it is not the last argument then the UOM portion (or second UOM) is taken and module processing continues."
TagRes	Description	"Returns the description associated with a UOM table."
TagRes	Type	"Returns the type point associated with a UOM table."
TagRes	Format	"Returns TRUE or FALSE depending on whether or not a UOM utilizes a prefix/suffix string."
Examples
EXML	"Initializing a UOM Table"
ML	[UV4:UOMInitialize]
ML	&nbsp;Do(Echo("Init UOM!")
ML	&nbsp;&nbsp;&nbsp;&nbsp;UOM(Id::1 Index::1 Factor::1 Label::"ea" Partial::1)
ML	&nbsp;&nbsp;&nbsp;&nbsp;UOM(Id::1 Index::2 Factor::12 Label::"dz")
ML	&nbsp;&nbsp;&nbsp;&nbsp;UOM(Id::1 Acceptor::"ea" Displayer::ASIS)
ML	&nbsp;&nbsp;&nbsp;)
Mod	V4	V4 Utility Module	V4Int
Usage	result	"point tagarg"
Params	result	"The result of the module which varies according to the arguments"
Params	point	"An option point which may be required by some of the options below."
Params	tagarg	"One or more tagged arguments described below"
Tag	All	pt	"Returns Logical:True if pt specifies all points on a dimension, false otherwise"
TagRes	All	"Returns Logical:True if the prior point references all points of a dimension, Logical:False otherwise."
Tag	Begin	pt	"Returns the starting point represented by the segment " Param:pt "."
TagRes	Begin	"Returns the starting point of the segment as given by the first argument."
Tag	Binding	num	"Locally sets the binding weight of the prior argument dimension to " Param:num ". The prior argument must be a point on the Dim dimension."
TagRes	Binding	"Returns the binding weight associated with the prior argument dimension."
Tag	Count	option	"Returns a count based on " Param:option " which may be <b>Context</b> for a count of the number of \
context insertions, <b>Errors</b> for the number of V4 errors, or <b>Evaluations</b> for a count of the number of intersection evaluations performed thus far."
Tag	Context	scope	"Returns a list of points in the context. If " Param:scope " is <b>Global</b> then only points in the global context are returned. If " Param:scope " \
is <b>Local</b> then only points in the local context are returned. The global context consists of points added with the " Command:Context " Add command or \
the " IntMod:Context "() module. Local points are those added with the " IntMod:ContextL "() module, the " TagName:Context "::xxx tag or point intersection evaluation."
TagRes	Context	"Returns a list of all the points in the current context."
TagRes	ConnectTime	"Returns the number of seconds the V4 process has been running."
TagRes	CPUTime	"Returns the number of CPU seconds accumulated by the V4 process."
Tag	Delete	list	"Removes a list of aggregate points."
TagRes	Delete	"Removes all aggregate points associated with the previously specified dimension. The number of points removed is returned as a \
point on Dim:Int. If the specified dimension dimension is not of point type " PntType:AggRef " then the module fails."
Tagres	Description	"Returns the description associated with the dimension of the first argument. If the referenced dimension has no description then the module fails."
Tag	Epsilon	num	"Sets the value of the floating point comparison epsilon-value to " Param:num ". The default \
value is 0. See " PntType:Real " for more information."
Tag	Epsilon	list	"The argument list must contain two numeric values. The first is the comparison value, the second is the update round-to-0-value. See " PntType:Real " for more information."
TagRes	Epsilon	"Returns the current value of the floating point epsilon-value. See " PntType:Real " for more information."
Tag	Error	num	"Returns the error message associated with the " Param:num "<sup>th</sup> nested level. If " Param:num " is \
not within the allowed range of nested levels then an empty string is returned."
TagRes	Error	"Returns the last error message generated by V4. This usually corresponds to " Tag:Error "::0. The last error \
may not be the appropriate error message if multiple levels of error trapping have occurred."
TagRes	Evaluations	"Returns the number of evaluated intersections as a point on the Dim:Int dimension."
TagRes	Image	"Returns the full path of the current xv4.exe image."
TagRes	Include	"Returns the file name and line number of the current 'include' file. Unlike the " TagResName:Source " tag, this option works at run \
time and is useful for displaying errors within dimension Acceptors and Displayers."
Tag	Logical	list	"Defines a logical value for the duration of the V4 process. The " Param:list " must contain two elements. The first is the \
name of the logical and the second element is the value."
Tag	Mask	format	"Assigns a format mask to the point type of the first argument. This overrides any default formatting for all points of the same type."
Tag	Name	value	"Assigns the string " Param:value " to the value of the first argument. This option is used to relate \
a keyword or name to a particular point value. Note that the assignment is made not only to the dimension of the first \
argument but to all dimensions of the same point type. The " Param:value " becomes an acceptable input value for those \
point types and is displayed whenever the point value of the first argument is output. The " IntMod:V4 " call making this \
association returns a unique integer handle to this assignment. This handle may be used to remove the association at a later time."
Tag	Name	handle	"Removes the named point-name association (described below) with the given integer " Param:handle "."
TagRes	Name	"Returns a list of special names associated with the dimension of the first argument. If no names have been \
assigned then the module fails. Each name is described by a list of three points- (" Param:internalvalue " " Param:externalvalue " " Param:handle ") \
where " Param:internalvalue " is the internal value represented as a point on Dim:Num."
TagRes	NoError	"If this tag is used before an " TagName:Agg " tagged argument then the module will not fail if the aggregate \
file cannot be found or read."
Tag	Number	num	"Associates the " Param:num " with range of values to follow (see " Tag:Range "). The prior argument must be a dimension of type CodedRange."
Tag	Range	point	"Used with the " Tag:Number " argument to set the associated range of points."
Tag	Segment	pt	"Returns the segment type for " Param:pt " as a point on Dim:UV4. The possible UV4 values are: Multiple (if point represents \
multiple segments), Range (point represents a single segment range), Point, All (i.e. <i>dim</i>..), Current (i.e. <i>dim</i>*), Now, Last, Undef, RHS, LHS, Sample, LT, LE, GE, GT, NE, \
New (i.e. <i>dim</i>+), PCurrent (i.e. <i>dim</i>**), None, and Alll (i.e. <i>dim</i>...)"
TagRes	Segment	"Returns segment type of prior point (see " TagName:Segment " above)."
Tag	Sleep	num	"Causes V4 to sleep for " Param:num " seconds."
Tag	Share	mode	"Not yet implemented."
Tag	Sort	num	"Sets the maximum number of seconds V4 will wait for a spawned sort to complete before forcing a termination. The return value is the prior setting. \
If " Param:num " is zero then the wait will be infinite. The initial value is 300 (seconds) or 5 minutes."
TagRes	Sort	"Returns the maximum number of seconds V4 will wait for a sort to complete."
Tag	SourceFile	hnum	"Returns a list of lists describing the source files that were compiled in the building of the V4 area described by \
the hierarchy number " Param:hnum ". Each sub-list begins with a point on Dim:UV4 which describes the entry and then follows with numeric or string points \
representing that value. For example, (UV4:Version <i>major</i> <i>minor</i>) denotes the version of V4 at the time of compilation."
Tag	SourceFile	srcref	"Returns a list of values that describe source file reference " Param:srcref ". The format of the list is \
(<i> hnum filenum filename linenumber </i>) where <i>hnum</i> is the hierarchy number, <i>filenum</i> is the file number (see the " Command:Debug " command), \
<i>filename</i> is the name of the file, and <i>linenumber</i> is the line number within the source file. Also see the " TagResName:References " option \
within the " IntMod:Dim " module."
TagRes	SourceFile	"Returns the name of the source file from which this module is currently being executed. If the \
module is not being executed from within a source file then " IntMod:V4 " fails. Note that this <b>only succeeds at compile time</b>."
TagRes	Stack	"Returns the current intersection call stack as a list of Dim:Alpha points."
Tag	Test	point	"Sets an internal debugging point to the value of " Param:point " and returns the prior value (or Logical:False if no prior value). \
This may be used for any type of testing/conditional execution. The use of this option can be controlled via the " IntMod:Secure " module. See also the " Tagname:UserOptions " tag."
TagRes	Test	"Returns the current value of the test point. An error occurs if no test value point has been defined."
Tag	Throw	errmne	"Enables an exception to be thrown whenever the internal V4 error corresponding to " Param:errmne " occurs. Not all V4 errors can \
be thrown as exceptions. See the " TagResName:Throw " option below."
Tag	Throw	"-errmne"	"Disables the throwing of an exception when the V4 error occurs."
TagRes	Throw	"Returns a list of lists. Each sublist consists of an error mnemonic followed by Logical:True or Logical:False. All throw-able error \
mnemonics are listed. The logical value indicates whether or not each mnemonic will result in an exception. Initially all mnemnonics are set to FALSE."
Tag	Type	point	"Returns the V4 point type associated with the " Param:point "."
TagRes	Type	"Returns the V4 point type of the prior argument. This is usually, but not necessarily, the declared point type of the prior point's dimension."
TagRes	Unique	"Returns a unique point on Dim:NId. All points generated within a V4 process are guaranteed to be unique from one and other. Unique points \
generated in one V4 process are most likely going to be different from points generated within any other process(es)."
TagRes	UserOptions	"Returns the startup user-option string. An empty string is returned if it is not set. See also the " Tagname:Test " option."
Tag	UserOptions	string	"Sets the startup user-option string to " Param:string " and returns the prior value."
TagRes	Version	"Returns the current version of V4 as a list. The first element is the major version number, the second is the minor version. If a third element \
is given then it is the date of V4 build. It may be given as a point on Dim:UDate or as a string depending on whether or not the V4 runtime can parse the date \
string supplied by the compiler."
Tag	XML	case	"Specifies the case of generated XML output tags. The values are <b>AsIs</b> (default) to keep tag case as specified, <b>Uppercase</b> to force all tags to upper case \
and <b>LowerCase</b> to force all tags to lower case."
Desc
IPar	"The " IntMod:V4 " module performs various V4 internally related functions as described by its arguments."
Examples
EXWD	V4(Area?)	a list of all open areas
EXWD	V4(Agg::olddata.v4a)	the same as Area Read olddata.v4a Aggregate command
EXWD	V4(All::Int..)	Logical:True
EXWD	V4(1234 Type?)	UV4:Integer
EXWD	V4(Dim:OENum Description?)	The order number
EXWD	Enum(V4(Stack?) @EchoT(Alpha*))	Outputs the current intersection evaluation stack
EXWD	V4(Remove::List(Dim:xxx))	Removes all aggregate points on dimension xxx
EXWD	V4(UDate:#-1 Name::TBD)	Associates "TBD" with the value "-1" for all dimensions of type UDate
EXWD	V4(UDate:#-4 Name::"n/a" Dim:UYear,UMonth)	Associates "n/a" with all dimensions of type UDate, UYear, and UMonth
EXWD	V4(Dim:UDate Name?)	((Num:-1 "TBD" Int:1) (Num:-4 "n/a" Int:2))
EXWD	V4(Name::2)	Removes the association with the handle of 2
EXWD	V4(Segment::UDate:<5/1/2004)	UV4:LT
EXWD	V4(Int:<100 Begin?)	Int:100
EXWD	V4(Logical::(data "c:/v4/data/"))	creates a process logical: data=c:/v4/data
EXWD	V4(Dim:UDate Mask::"mm/dd/yy;")	sets the default formatting for all points of type universal-date
Mod	V4ISCon	Connect to a V4IS Area	DBase
Usage	v4pt	"v4dim opttag"
Params	v4pt	"The resulting point is a point on v4dim referencing an open connection to the area. Undefined is returned if the connect cannot be made."
Params	v4dim	"A dimension of type V4"
Params	opttag	"One or more tagged arguments described below"
Tag	Area	areaname	"The name of the V4IS area (filename) to be opened."
Tag	Open	mode	"This argument specifies how the area is to be opened. The mode should be Read for read only access (default), Write for write-only, or Update for read/write access."
Tag	Share	mode	"How access to records in the area are to be shared with other processes. Use 1 for shared access (default), or 0 for exclusive access."
Tag	KeyNum	num	"This argument specifies which key (1 for first, 2 for second, etc.) is to be described with the " tag:Key " argument below."
Tag	Key	field	"Specifies the field index for the key numbered previously specified with the " tag:KeyNum " argument. If a key has multiple components then use multiple " tag:Key " arguments."
Tag	Lock	mode	"Default locking mode for the area. Use 1 (or Logical:True) for record locking, 0 (Logical:False) for no locking. This effects both the locking of records accessed by this process and whether or not locks created by other processes are respected. Usually Lock:0 is used for read-only access to an area."
Tag	Put	mode	"The default put mode. The default value is Keyed."
Tag	Get	mode	"The default get mode. The default value is Keyed."
Tag	FileRef	ref	"The fileref within the area to be accessed. If no fileref is given then the default fileref for the area is used."
Desc
IPar	"The " IntMod:V4ISCon " module connects the current V4 process to a V4IS area which may reside on the host system or on another platform (which is running the V4Server process). The returned value is a point on a V4IS dimension that references the area. This point may be used in other V4ISxxx() module calls or within a " IntMod:List " call to create a list of points referencing records or sub-records within the area."
Examples
EX	"Dim V V4IS"
EX	"Context Add V4ISCon(Dim:V Area::"table.dat" FileRef::9027 Open::1 KeyNum::1 Key::1)"
Mod	V4ISOp	Perform an Operation on a V4 Area	DBase
Usage	v4pt	"opttag"
Params	v4pt	"A point previously created with the " IntMod:V4ISCon " module."
Params	opttag	"One or more tagged arguments described below"
Tag	DataId	id	"Access V4IS record by its unique " Param:id "."
Tag	KeyNum	num	"Specifies the key to be used for this call. Use 1 for the first (primary) key, 2 for the second, etc. The default is KeyNum::1"
Tag	Key	value	"Specifies the key value for this operation. If the key is composed of several parts then use multiple " tag:Key " tagged arguments."
Tag	Lock	mode	"Whether or not locking is to be used for this operation."
Tag	Put	mode	"The put or write mode for this operation. Specifying this argument implies that a write operation is to be performed."
Tag	Get	mode	"The get or read mode for this operation. Specifying this argument implies that a read operation is to be performed."
TagRes	DataId	"Return the data-id of the record as an Int point. No data associated with the record is accessed. This \
option may be used to generate lists of V4IS records which may be again retrieved (at a later time) with the " Tag:DataId " tag."
Desc
IPar	"" tag:Key " conversion is performed as follows. Integer values specifying alpha keys are converted to zero fill, right justified text fields. Alpha fields are left justified and filled with blanks."
Examples
EXML	"Accessing a V4IS File"
ML	Dim V V4IS
ML	Context Add V4ISCon(Dim:V Area::"table.dat" FileRef::9027 Open::1 KeyNum::1 Key::1)
ML	Eval V4ISOp(V* KeyNum::1 Key::164)
ML	Eval EchoT(V4ISVal(V* Dim:Int 1) V4ISVal(V* Dim:Alpha 2) V4ISVal(V* Dim:Int 10)
ML	&nbsp;&nbsp;&nbsp;&nbsp; V4ISVal(V* Dim:Alpha 11 1) V4ISVal(V* Dim:Int 12 1) )
ML	Eval Enum(List(V* KeyNum::0 If::GE(V4ISVal(V* Dim:Int 1) 100) Count::10 If::LT(V4ISVal(V* Dim:Int 12) 2))
ML	&nbsp;@EchoT(V4ISVal(V* Dim:Int 1) V4ISVal(V* Dim:Alpha 2) V4ISVal(V* Dim:Int 10)
ML	&nbsp;&nbsp;&nbsp;&nbsp; V4ISVal(V* Dim:Alpha 11) V4ISVal(V* Dim:Int 12)
ML	&nbsp;&nbsp;&nbsp;&nbsp;)
ML	&nbsp;)
Mod	V4ISVal	Return Value of Field in V4 Record	DBase
Usage	value	"v4pt resdim index [subindex]"
Params	value	"The value of referenced field within the V4 area."
Params	v4pt	"A V4 point referencing a record within a V4 area."
Params	resdim	"The dimension of the resulting value."
Params	index	"The index number referencing the field within the record."
Params	subindex	"An optional argument used to reference the occurrence of a field within a substructure within the record."
Desc
IPar	"If the resulting dimension (" param:resdim ") is a dimension with the Entries option then the value is returned as a bitmap."
Examples
EX	"Eval Enum(List(V* KeyNum::0 If::GE(V4ISVal(V* Dim:Int 1) 100) Count::10 If::LT(V4ISVal(V* Dim:Int 12) 2))"
Mod	Zip	Create a Zip File	OSRel
Usage	point	"opttag ..."
Params	point	"The returned pointed is the result of invoking the remote procedure."
Params	opttag	"Any of the tags defined below."
TagRes	Close	"Close off the name/current zip file."
Tag	Create	filename	"Creates an empty zipfile called " Param:filename "."
Tag	Data	filename	"Appends the " Param:filename " to the named (or current) zip file. The data is considered to be binary."
Tag	Id	name	"An optional internal identifier for this zip file if multiple files are opened simultaneously."
TagRes	ListOf	"Returns the contents of an opened zip file as a list of lists. Each file within the zip is represented as a 4-element list: (Alpha:<i>filename</i> Num:<i>size</i> UDT:<i>update-datetime</i> Num:<i>compressed-size</i>)"
Tag	Name	filename	"The filename to be given to the " TagName:Data "/" TagName:Text " file being appended. If not specified then the inserted file's actual name is used."
Tag	Open	filename	"Opens an existing zip file"
Tag	Text	filename	"Appends the " Param:filename " to the named (or current) zip file. The data is considered to be text."
Desc
IPar	"This module is used to create zip files."
Examples
EXWD	Zip(Create::"demo.zip")	creates an empty zip file
EXWD	Zip(Text::fileName* Name::Str(List.3 OSFile(fileName* FileName?)))	Adds the file referenced by fileName* to the current zip file with that file's name (minus any device/path information)
EXWD	Zip(Data::"data.bin"	Name::"binarydata1.bin")	Adds the binary file 'data.bin' and names it 'binarydata1.bin' within the zip file
EXWD	Zip(Close?)	Closes off the current zip file
EXWD	Zip(Close? Id::foo)	Closes off the named zip file